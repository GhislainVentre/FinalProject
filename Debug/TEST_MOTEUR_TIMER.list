
TEST_MOTEUR_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000327c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  0800333c  0800333c  0001333c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003388  08003388  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  08003388  08003388  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003388  08003388  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003388  08003388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800338c  0800338c  0001338c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08003390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000010c  0800349c  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  0800349c  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000da86  00000000  00000000  00020177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001caf  00000000  00000000  0002dbfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce8  00000000  00000000  0002f8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a2e  00000000  00000000  00030598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019535  00000000  00000000  00030fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef76  00000000  00000000  0004a4fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097554  00000000  00000000  00059471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ec8  00000000  00000000  000f09c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f3890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000010c 	.word	0x2000010c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003324 	.word	0x08003324

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000110 	.word	0x20000110
 8000104:	08003324 	.word	0x08003324

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fe24 	bl	8000e70 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f816 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f988 	bl	8000540 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000230:	f000 f8aa 	bl	8000388 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000234:	f000 f8fc 	bl	8000430 <MX_TIM3_Init>
  MX_CAN_Init();
 8000238:	f000 f870 	bl	800031c <MX_CAN_Init>
  MX_USART1_UART_Init();
 800023c:	f000 f950 	bl	80004e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  SystemClock_Config();
 8000240:	f000 f80a 	bl	8000258 <SystemClock_Config>
  HAL_TIM_Base_Start_IT(&htim3);
 8000244:	4b03      	ldr	r3, [pc, #12]	; (8000254 <main+0x34>)
 8000246:	0018      	movs	r0, r3
 8000248:	f002 f828 	bl	800229c <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  automate();
 800024c:	f000 fa52 	bl	80006f4 <automate>
 8000250:	e7fc      	b.n	800024c <main+0x2c>
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	20000198 	.word	0x20000198

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b590      	push	{r4, r7, lr}
 800025a:	b099      	sub	sp, #100	; 0x64
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	242c      	movs	r4, #44	; 0x2c
 8000260:	193b      	adds	r3, r7, r4
 8000262:	0018      	movs	r0, r3
 8000264:	2334      	movs	r3, #52	; 0x34
 8000266:	001a      	movs	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f003 f82f 	bl	80032cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026e:	231c      	movs	r3, #28
 8000270:	18fb      	adds	r3, r7, r3
 8000272:	0018      	movs	r0, r3
 8000274:	2310      	movs	r3, #16
 8000276:	001a      	movs	r2, r3
 8000278:	2100      	movs	r1, #0
 800027a:	f003 f827 	bl	80032cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027e:	003b      	movs	r3, r7
 8000280:	0018      	movs	r0, r3
 8000282:	231c      	movs	r3, #28
 8000284:	001a      	movs	r2, r3
 8000286:	2100      	movs	r1, #0
 8000288:	f003 f820 	bl	80032cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028c:	0021      	movs	r1, r4
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2202      	movs	r2, #2
 8000292:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2201      	movs	r2, #1
 8000298:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2210      	movs	r2, #16
 800029e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2202      	movs	r2, #2
 80002a4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2280      	movs	r2, #128	; 0x80
 80002aa:	0212      	lsls	r2, r2, #8
 80002ac:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2280      	movs	r2, #128	; 0x80
 80002b2:	0352      	lsls	r2, r2, #13
 80002b4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2200      	movs	r2, #0
 80002ba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	0018      	movs	r0, r3
 80002c0:	f001 f9ac 	bl	800161c <HAL_RCC_OscConfig>
 80002c4:	1e03      	subs	r3, r0, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002c8:	f000 fc80 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002cc:	211c      	movs	r1, #28
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2207      	movs	r2, #7
 80002d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2202      	movs	r2, #2
 80002d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2101      	movs	r1, #1
 80002ea:	0018      	movs	r0, r3
 80002ec:	f001 fd1c 	bl	8001d28 <HAL_RCC_ClockConfig>
 80002f0:	1e03      	subs	r3, r0, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80002f4:	f000 fc6a 	bl	8000bcc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002f8:	003b      	movs	r3, r7
 80002fa:	2201      	movs	r2, #1
 80002fc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002fe:	003b      	movs	r3, r7
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000304:	003b      	movs	r3, r7
 8000306:	0018      	movs	r0, r3
 8000308:	f001 fe7a 	bl	8002000 <HAL_RCCEx_PeriphCLKConfig>
 800030c:	1e03      	subs	r3, r0, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000310:	f000 fc5c 	bl	8000bcc <Error_Handler>
  }
}
 8000314:	46c0      	nop			; (mov r8, r8)
 8000316:	46bd      	mov	sp, r7
 8000318:	b019      	add	sp, #100	; 0x64
 800031a:	bd90      	pop	{r4, r7, pc}

0800031c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000320:	4b17      	ldr	r3, [pc, #92]	; (8000380 <MX_CAN_Init+0x64>)
 8000322:	4a18      	ldr	r2, [pc, #96]	; (8000384 <MX_CAN_Init+0x68>)
 8000324:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000326:	4b16      	ldr	r3, [pc, #88]	; (8000380 <MX_CAN_Init+0x64>)
 8000328:	2210      	movs	r2, #16
 800032a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800032c:	4b14      	ldr	r3, [pc, #80]	; (8000380 <MX_CAN_Init+0x64>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000332:	4b13      	ldr	r3, [pc, #76]	; (8000380 <MX_CAN_Init+0x64>)
 8000334:	2200      	movs	r2, #0
 8000336:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_CAN_Init+0x64>)
 800033a:	2200      	movs	r2, #0
 800033c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <MX_CAN_Init+0x64>)
 8000340:	2200      	movs	r2, #0
 8000342:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_CAN_Init+0x64>)
 8000346:	2200      	movs	r2, #0
 8000348:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800034a:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <MX_CAN_Init+0x64>)
 800034c:	2200      	movs	r2, #0
 800034e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <MX_CAN_Init+0x64>)
 8000352:	2200      	movs	r2, #0
 8000354:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000356:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <MX_CAN_Init+0x64>)
 8000358:	2200      	movs	r2, #0
 800035a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <MX_CAN_Init+0x64>)
 800035e:	2200      	movs	r2, #0
 8000360:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000362:	4b07      	ldr	r3, [pc, #28]	; (8000380 <MX_CAN_Init+0x64>)
 8000364:	2200      	movs	r2, #0
 8000366:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <MX_CAN_Init+0x64>)
 800036a:	0018      	movs	r0, r3
 800036c:	f000 fde4 	bl	8000f38 <HAL_CAN_Init>
 8000370:	1e03      	subs	r3, r0, #0
 8000372:	d001      	beq.n	8000378 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000374:	f000 fc2a 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	20000128 	.word	0x20000128
 8000384:	40006400 	.word	0x40006400

08000388 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800038e:	2308      	movs	r3, #8
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	0018      	movs	r0, r3
 8000394:	2310      	movs	r3, #16
 8000396:	001a      	movs	r2, r3
 8000398:	2100      	movs	r1, #0
 800039a:	f002 ff97 	bl	80032cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800039e:	003b      	movs	r3, r7
 80003a0:	0018      	movs	r0, r3
 80003a2:	2308      	movs	r3, #8
 80003a4:	001a      	movs	r2, r3
 80003a6:	2100      	movs	r1, #0
 80003a8:	f002 ff90 	bl	80032cc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003ac:	4b1e      	ldr	r3, [pc, #120]	; (8000428 <MX_TIM2_Init+0xa0>)
 80003ae:	2280      	movs	r2, #128	; 0x80
 80003b0:	05d2      	lsls	r2, r2, #23
 80003b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80003b4:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <MX_TIM2_Init+0xa0>)
 80003b6:	4a1d      	ldr	r2, [pc, #116]	; (800042c <MX_TIM2_Init+0xa4>)
 80003b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ba:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <MX_TIM2_Init+0xa0>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80003c0:	4b19      	ldr	r3, [pc, #100]	; (8000428 <MX_TIM2_Init+0xa0>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c6:	4b18      	ldr	r3, [pc, #96]	; (8000428 <MX_TIM2_Init+0xa0>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003cc:	4b16      	ldr	r3, [pc, #88]	; (8000428 <MX_TIM2_Init+0xa0>)
 80003ce:	2280      	movs	r2, #128	; 0x80
 80003d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003d2:	4b15      	ldr	r3, [pc, #84]	; (8000428 <MX_TIM2_Init+0xa0>)
 80003d4:	0018      	movs	r0, r3
 80003d6:	f001 ff11 	bl	80021fc <HAL_TIM_Base_Init>
 80003da:	1e03      	subs	r3, r0, #0
 80003dc:	d001      	beq.n	80003e2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80003de:	f000 fbf5 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e2:	2108      	movs	r1, #8
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2280      	movs	r2, #128	; 0x80
 80003e8:	0152      	lsls	r2, r2, #5
 80003ea:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003ec:	187a      	adds	r2, r7, r1
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <MX_TIM2_Init+0xa0>)
 80003f0:	0011      	movs	r1, r2
 80003f2:	0018      	movs	r0, r3
 80003f4:	f002 f8e8 	bl	80025c8 <HAL_TIM_ConfigClockSource>
 80003f8:	1e03      	subs	r3, r0, #0
 80003fa:	d001      	beq.n	8000400 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80003fc:	f000 fbe6 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000400:	003b      	movs	r3, r7
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000406:	003b      	movs	r3, r7
 8000408:	2200      	movs	r2, #0
 800040a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800040c:	003a      	movs	r2, r7
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_TIM2_Init+0xa0>)
 8000410:	0011      	movs	r1, r2
 8000412:	0018      	movs	r0, r3
 8000414:	f002 fae6 	bl	80029e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000418:	1e03      	subs	r3, r0, #0
 800041a:	d001      	beq.n	8000420 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800041c:	f000 fbd6 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	b006      	add	sp, #24
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000150 	.word	0x20000150
 800042c:	00001c1f 	.word	0x00001c1f

08000430 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000436:	2308      	movs	r3, #8
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	0018      	movs	r0, r3
 800043c:	2310      	movs	r3, #16
 800043e:	001a      	movs	r2, r3
 8000440:	2100      	movs	r1, #0
 8000442:	f002 ff43 	bl	80032cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000446:	003b      	movs	r3, r7
 8000448:	0018      	movs	r0, r3
 800044a:	2308      	movs	r3, #8
 800044c:	001a      	movs	r2, r3
 800044e:	2100      	movs	r1, #0
 8000450:	f002 ff3c 	bl	80032cc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000454:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <MX_TIM3_Init+0xa0>)
 8000456:	4a1f      	ldr	r2, [pc, #124]	; (80004d4 <MX_TIM3_Init+0xa4>)
 8000458:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 800045a:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <MX_TIM3_Init+0xa0>)
 800045c:	4a1e      	ldr	r2, [pc, #120]	; (80004d8 <MX_TIM3_Init+0xa8>)
 800045e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <MX_TIM3_Init+0xa0>)
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000466:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <MX_TIM3_Init+0xa0>)
 8000468:	4a1c      	ldr	r2, [pc, #112]	; (80004dc <MX_TIM3_Init+0xac>)
 800046a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800046c:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <MX_TIM3_Init+0xa0>)
 800046e:	2200      	movs	r2, #0
 8000470:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000472:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <MX_TIM3_Init+0xa0>)
 8000474:	2200      	movs	r2, #0
 8000476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000478:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <MX_TIM3_Init+0xa0>)
 800047a:	0018      	movs	r0, r3
 800047c:	f001 febe 	bl	80021fc <HAL_TIM_Base_Init>
 8000480:	1e03      	subs	r3, r0, #0
 8000482:	d001      	beq.n	8000488 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000484:	f000 fba2 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000488:	2108      	movs	r1, #8
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2280      	movs	r2, #128	; 0x80
 800048e:	0152      	lsls	r2, r2, #5
 8000490:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000492:	187a      	adds	r2, r7, r1
 8000494:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_TIM3_Init+0xa0>)
 8000496:	0011      	movs	r1, r2
 8000498:	0018      	movs	r0, r3
 800049a:	f002 f895 	bl	80025c8 <HAL_TIM_ConfigClockSource>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80004a2:	f000 fb93 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a6:	003b      	movs	r3, r7
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ac:	003b      	movs	r3, r7
 80004ae:	2200      	movs	r2, #0
 80004b0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004b2:	003a      	movs	r2, r7
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_TIM3_Init+0xa0>)
 80004b6:	0011      	movs	r1, r2
 80004b8:	0018      	movs	r0, r3
 80004ba:	f002 fa93 	bl	80029e4 <HAL_TIMEx_MasterConfigSynchronization>
 80004be:	1e03      	subs	r3, r0, #0
 80004c0:	d001      	beq.n	80004c6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80004c2:	f000 fb83 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b006      	add	sp, #24
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	20000198 	.word	0x20000198
 80004d4:	40000400 	.word	0x40000400
 80004d8:	0000bb7f 	.word	0x0000bb7f
 80004dc:	0000ffff 	.word	0x0000ffff

080004e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004e4:	4b14      	ldr	r3, [pc, #80]	; (8000538 <MX_USART1_UART_Init+0x58>)
 80004e6:	4a15      	ldr	r2, [pc, #84]	; (800053c <MX_USART1_UART_Init+0x5c>)
 80004e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80004ea:	4b13      	ldr	r3, [pc, #76]	; (8000538 <MX_USART1_UART_Init+0x58>)
 80004ec:	2296      	movs	r2, #150	; 0x96
 80004ee:	0212      	lsls	r2, r2, #8
 80004f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004f2:	4b11      	ldr	r3, [pc, #68]	; (8000538 <MX_USART1_UART_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <MX_USART1_UART_Init+0x58>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <MX_USART1_UART_Init+0x58>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <MX_USART1_UART_Init+0x58>)
 8000506:	220c      	movs	r2, #12
 8000508:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <MX_USART1_UART_Init+0x58>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MX_USART1_UART_Init+0x58>)
 8000512:	2200      	movs	r2, #0
 8000514:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <MX_USART1_UART_Init+0x58>)
 8000518:	2200      	movs	r2, #0
 800051a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <MX_USART1_UART_Init+0x58>)
 800051e:	2200      	movs	r2, #0
 8000520:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000522:	4b05      	ldr	r3, [pc, #20]	; (8000538 <MX_USART1_UART_Init+0x58>)
 8000524:	0018      	movs	r0, r3
 8000526:	f002 facb 	bl	8002ac0 <HAL_UART_Init>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800052e:	f000 fb4d 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200001e0 	.word	0x200001e0
 800053c:	40013800 	.word	0x40013800

08000540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b08b      	sub	sp, #44	; 0x2c
 8000544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	2414      	movs	r4, #20
 8000548:	193b      	adds	r3, r7, r4
 800054a:	0018      	movs	r0, r3
 800054c:	2314      	movs	r3, #20
 800054e:	001a      	movs	r2, r3
 8000550:	2100      	movs	r1, #0
 8000552:	f002 febb 	bl	80032cc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	4b60      	ldr	r3, [pc, #384]	; (80006d8 <MX_GPIO_Init+0x198>)
 8000558:	695a      	ldr	r2, [r3, #20]
 800055a:	4b5f      	ldr	r3, [pc, #380]	; (80006d8 <MX_GPIO_Init+0x198>)
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	0309      	lsls	r1, r1, #12
 8000560:	430a      	orrs	r2, r1
 8000562:	615a      	str	r2, [r3, #20]
 8000564:	4b5c      	ldr	r3, [pc, #368]	; (80006d8 <MX_GPIO_Init+0x198>)
 8000566:	695a      	ldr	r2, [r3, #20]
 8000568:	2380      	movs	r3, #128	; 0x80
 800056a:	031b      	lsls	r3, r3, #12
 800056c:	4013      	ands	r3, r2
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	4b59      	ldr	r3, [pc, #356]	; (80006d8 <MX_GPIO_Init+0x198>)
 8000574:	695a      	ldr	r2, [r3, #20]
 8000576:	4b58      	ldr	r3, [pc, #352]	; (80006d8 <MX_GPIO_Init+0x198>)
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	0289      	lsls	r1, r1, #10
 800057c:	430a      	orrs	r2, r1
 800057e:	615a      	str	r2, [r3, #20]
 8000580:	4b55      	ldr	r3, [pc, #340]	; (80006d8 <MX_GPIO_Init+0x198>)
 8000582:	695a      	ldr	r2, [r3, #20]
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	029b      	lsls	r3, r3, #10
 8000588:	4013      	ands	r3, r2
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	4b52      	ldr	r3, [pc, #328]	; (80006d8 <MX_GPIO_Init+0x198>)
 8000590:	695a      	ldr	r2, [r3, #20]
 8000592:	4b51      	ldr	r3, [pc, #324]	; (80006d8 <MX_GPIO_Init+0x198>)
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	02c9      	lsls	r1, r1, #11
 8000598:	430a      	orrs	r2, r1
 800059a:	615a      	str	r2, [r3, #20]
 800059c:	4b4e      	ldr	r3, [pc, #312]	; (80006d8 <MX_GPIO_Init+0x198>)
 800059e:	695a      	ldr	r2, [r3, #20]
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	02db      	lsls	r3, r3, #11
 80005a4:	4013      	ands	r3, r2
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005aa:	4b4b      	ldr	r3, [pc, #300]	; (80006d8 <MX_GPIO_Init+0x198>)
 80005ac:	695a      	ldr	r2, [r3, #20]
 80005ae:	4b4a      	ldr	r3, [pc, #296]	; (80006d8 <MX_GPIO_Init+0x198>)
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	0349      	lsls	r1, r1, #13
 80005b4:	430a      	orrs	r2, r1
 80005b6:	615a      	str	r2, [r3, #20]
 80005b8:	4b47      	ldr	r3, [pc, #284]	; (80006d8 <MX_GPIO_Init+0x198>)
 80005ba:	695a      	ldr	r2, [r3, #20]
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	035b      	lsls	r3, r3, #13
 80005c0:	4013      	ands	r3, r2
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80005c6:	4945      	ldr	r1, [pc, #276]	; (80006dc <MX_GPIO_Init+0x19c>)
 80005c8:	4b45      	ldr	r3, [pc, #276]	; (80006e0 <MX_GPIO_Init+0x1a0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 f807 	bl	80015e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005d2:	4944      	ldr	r1, [pc, #272]	; (80006e4 <MX_GPIO_Init+0x1a4>)
 80005d4:	2390      	movs	r3, #144	; 0x90
 80005d6:	05db      	lsls	r3, r3, #23
 80005d8:	2200      	movs	r2, #0
 80005da:	0018      	movs	r0, r3
 80005dc:	f001 f800 	bl	80015e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80005e0:	4941      	ldr	r1, [pc, #260]	; (80006e8 <MX_GPIO_Init+0x1a8>)
 80005e2:	4b42      	ldr	r3, [pc, #264]	; (80006ec <MX_GPIO_Init+0x1ac>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	0018      	movs	r0, r3
 80005e8:	f000 fffa 	bl	80015e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80005ec:	4b40      	ldr	r3, [pc, #256]	; (80006f0 <MX_GPIO_Init+0x1b0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	2104      	movs	r1, #4
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 fff4 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	4a38      	ldr	r2, [pc, #224]	; (80006dc <MX_GPIO_Init+0x19c>)
 80005fc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	2201      	movs	r2, #1
 8000602:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	193b      	adds	r3, r7, r4
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	193b      	adds	r3, r7, r4
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000610:	193b      	adds	r3, r7, r4
 8000612:	4a33      	ldr	r2, [pc, #204]	; (80006e0 <MX_GPIO_Init+0x1a0>)
 8000614:	0019      	movs	r1, r3
 8000616:	0010      	movs	r0, r2
 8000618:	f000 fe6a 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800061c:	193b      	adds	r3, r7, r4
 800061e:	4a31      	ldr	r2, [pc, #196]	; (80006e4 <MX_GPIO_Init+0x1a4>)
 8000620:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	193b      	adds	r3, r7, r4
 8000624:	2201      	movs	r2, #1
 8000626:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	193b      	adds	r3, r7, r4
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	193b      	adds	r3, r7, r4
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	193a      	adds	r2, r7, r4
 8000636:	2390      	movs	r3, #144	; 0x90
 8000638:	05db      	lsls	r3, r3, #23
 800063a:	0011      	movs	r1, r2
 800063c:	0018      	movs	r0, r3
 800063e:	f000 fe57 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000642:	193b      	adds	r3, r7, r4
 8000644:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <MX_GPIO_Init+0x1a8>)
 8000646:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	193b      	adds	r3, r7, r4
 800064a:	2201      	movs	r2, #1
 800064c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	193b      	adds	r3, r7, r4
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	193b      	adds	r3, r7, r4
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065a:	193b      	adds	r3, r7, r4
 800065c:	4a23      	ldr	r2, [pc, #140]	; (80006ec <MX_GPIO_Init+0x1ac>)
 800065e:	0019      	movs	r1, r3
 8000660:	0010      	movs	r0, r2
 8000662:	f000 fe45 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000666:	0021      	movs	r1, r4
 8000668:	187b      	adds	r3, r7, r1
 800066a:	22f0      	movs	r2, #240	; 0xf0
 800066c:	0212      	lsls	r2, r2, #8
 800066e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000670:	000c      	movs	r4, r1
 8000672:	193b      	adds	r3, r7, r4
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	193b      	adds	r3, r7, r4
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067e:	193b      	adds	r3, r7, r4
 8000680:	4a1a      	ldr	r2, [pc, #104]	; (80006ec <MX_GPIO_Init+0x1ac>)
 8000682:	0019      	movs	r1, r3
 8000684:	0010      	movs	r0, r2
 8000686:	f000 fe33 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	22c0      	movs	r2, #192	; 0xc0
 800068e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2200      	movs	r2, #0
 8000694:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069c:	193b      	adds	r3, r7, r4
 800069e:	4a10      	ldr	r2, [pc, #64]	; (80006e0 <MX_GPIO_Init+0x1a0>)
 80006a0:	0019      	movs	r1, r3
 80006a2:	0010      	movs	r0, r2
 80006a4:	f000 fe24 	bl	80012f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006a8:	0021      	movs	r1, r4
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2204      	movs	r2, #4
 80006ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2201      	movs	r2, #1
 80006b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <MX_GPIO_Init+0x1b0>)
 80006c6:	0019      	movs	r1, r3
 80006c8:	0010      	movs	r0, r2
 80006ca:	f000 fe11 	bl	80012f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b00b      	add	sp, #44	; 0x2c
 80006d4:	bd90      	pop	{r4, r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	40021000 	.word	0x40021000
 80006dc:	0000fc3f 	.word	0x0000fc3f
 80006e0:	48000800 	.word	0x48000800
 80006e4:	000080ff 	.word	0x000080ff
 80006e8:	00000fff 	.word	0x00000fff
 80006ec:	48000400 	.word	0x48000400
 80006f0:	48000c00 	.word	0x48000c00

080006f4 <automate>:

/* USER CODE BEGIN 4 */
void automate() {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
	timer_ms = DELAY;
 80006fa:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <automate+0xbc>)
 80006fc:	4a2d      	ldr	r2, [pc, #180]	; (80007b4 <automate+0xc0>)
 80006fe:	601a      	str	r2, [r3, #0]
	switch(state) {
 8000700:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <automate+0xc4>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b04      	cmp	r3, #4
 8000706:	d84f      	bhi.n	80007a8 <automate+0xb4>
 8000708:	009a      	lsls	r2, r3, #2
 800070a:	4b2c      	ldr	r3, [pc, #176]	; (80007bc <automate+0xc8>)
 800070c:	18d3      	adds	r3, r2, r3
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	469f      	mov	pc, r3
		case START:
			setStepperSens(DOWN);
 8000712:	2001      	movs	r0, #1
 8000714:	f000 fa24 	bl	8000b60 <setStepperSens>
			state = BEGIN_MOVEMENT;
 8000718:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <automate+0xc4>)
 800071a:	2201      	movs	r2, #1
 800071c:	701a      	strb	r2, [r3, #0]
			break;
 800071e:	e043      	b.n	80007a8 <automate+0xb4>
		case TRANSITION:
			HAL_TIM_Base_Start_IT(&htim2);
 8000720:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <automate+0xcc>)
 8000722:	0018      	movs	r0, r3
 8000724:	f001 fdba 	bl	800229c <HAL_TIM_Base_Start_IT>
			int timer2 = __HAL_TIM_GetCounter(&htim3);
 8000728:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <automate+0xd0>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800072e:	607b      	str	r3, [r7, #4]
			if(timer2 >= timer1) {
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <automate+0xd4>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	429a      	cmp	r2, r3
 8000738:	d30b      	bcc.n	8000752 <automate+0x5e>
				if(timer2-timer1 >= timer_ms) state = IDLE;
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <automate+0xd4>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	1ad2      	subs	r2, r2, r3
 8000742:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <automate+0xbc>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	429a      	cmp	r2, r3
 8000748:	d32d      	bcc.n	80007a6 <automate+0xb2>
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <automate+0xc4>)
 800074c:	2202      	movs	r2, #2
 800074e:	701a      	strb	r2, [r3, #0]
			} else {
				if(65535-timer2 + timer1 >= timer_ms) state = IDLE;
			}
			break;
 8000750:	e029      	b.n	80007a6 <automate+0xb2>
				if(65535-timer2 + timer1 >= timer_ms) state = IDLE;
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <automate+0xd4>)
 8000754:	681a      	ldr	r2, [r3, #0]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <automate+0xd8>)
 800075c:	189a      	adds	r2, r3, r2
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <automate+0xbc>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	429a      	cmp	r2, r3
 8000764:	d31f      	bcc.n	80007a6 <automate+0xb2>
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <automate+0xc4>)
 8000768:	2202      	movs	r2, #2
 800076a:	701a      	strb	r2, [r3, #0]
			break;
 800076c:	e01b      	b.n	80007a6 <automate+0xb2>
		case BEGIN_MOVEMENT:
			setStepperOnOff(ON);
 800076e:	2000      	movs	r0, #0
 8000770:	f000 fa12 	bl	8000b98 <setStepperOnOff>
			__HAL_TIM_SetCounter(&htim3, 0);
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <automate+0xd0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2200      	movs	r2, #0
 800077a:	625a      	str	r2, [r3, #36]	; 0x24
			timer1 = __HAL_TIM_GetCounter(&htim3);
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <automate+0xd0>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <automate+0xd4>)
 8000784:	601a      	str	r2, [r3, #0]
			state = TRANSITION;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <automate+0xc4>)
 8000788:	2204      	movs	r2, #4
 800078a:	701a      	strb	r2, [r3, #0]
			break;
 800078c:	e00c      	b.n	80007a8 <automate+0xb4>
		case IDLE:
			HAL_TIM_Base_Stop_IT(&htim2);
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <automate+0xcc>)
 8000790:	0018      	movs	r0, r3
 8000792:	f001 fdd5 	bl	8002340 <HAL_TIM_Base_Stop_IT>
			setStepperOnOff(OFF);
 8000796:	2001      	movs	r0, #1
 8000798:	f000 f9fe 	bl	8000b98 <setStepperOnOff>
			break;
 800079c:	e004      	b.n	80007a8 <automate+0xb4>
		case COMM:
			state = IDLE;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <automate+0xc4>)
 80007a0:	2202      	movs	r2, #2
 80007a2:	701a      	strb	r2, [r3, #0]
			break;
 80007a4:	e000      	b.n	80007a8 <automate+0xb4>
			break;
 80007a6:	46c0      	nop			; (mov r8, r8)
	}
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b002      	add	sp, #8
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000026c 	.word	0x2000026c
 80007b4:	0000c350 	.word	0x0000c350
 80007b8:	20000270 	.word	0x20000270
 80007bc:	0800333c 	.word	0x0800333c
 80007c0:	20000150 	.word	0x20000150
 80007c4:	20000198 	.word	0x20000198
 80007c8:	20000268 	.word	0x20000268
 80007cc:	0000ffff 	.word	0x0000ffff

080007d0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	05db      	lsls	r3, r3, #23
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d101      	bne.n	80007e8 <HAL_TIM_PeriodElapsedCallback+0x18>
		Motor_Handling();
 80007e4:	f000 f92a 	bl	8000a3c <Motor_Handling>
	}
}
 80007e8:	46c0      	nop			; (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b002      	add	sp, #8
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <rotate>:

void rotate(int step, int nb_motor) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
	// full drive
	switch(step) {
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b03      	cmp	r3, #3
 80007fe:	d100      	bne.n	8000802 <rotate+0x12>
 8000800:	e0d5      	b.n	80009ae <rotate+0x1be>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2b03      	cmp	r3, #3
 8000806:	dd00      	ble.n	800080a <rotate+0x1a>
 8000808:	e112      	b.n	8000a30 <rotate+0x240>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b02      	cmp	r3, #2
 800080e:	d100      	bne.n	8000812 <rotate+0x22>
 8000810:	e08c      	b.n	800092c <rotate+0x13c>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b02      	cmp	r3, #2
 8000816:	dd00      	ble.n	800081a <rotate+0x2a>
 8000818:	e10a      	b.n	8000a30 <rotate+0x240>
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d003      	beq.n	8000828 <rotate+0x38>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d041      	beq.n	80008aa <rotate+0xba>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[1], stepper[nb_motor].pin_nb[1], GPIO_PIN_RESET);   // IN2
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[2], stepper[nb_motor].pin_nb[2], GPIO_PIN_SET);   // IN3
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[3], stepper[nb_motor].pin_nb[3], GPIO_PIN_RESET);   // IN4
		break;
	}
}
 8000826:	e103      	b.n	8000a30 <rotate+0x240>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[0], stepper[nb_motor].pin_nb[0], GPIO_PIN_RESET);   // IN1
 8000828:	4a83      	ldr	r2, [pc, #524]	; (8000a38 <rotate+0x248>)
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	015b      	lsls	r3, r3, #5
 800082e:	18d3      	adds	r3, r2, r3
 8000830:	3308      	adds	r3, #8
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	4a80      	ldr	r2, [pc, #512]	; (8000a38 <rotate+0x248>)
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	015b      	lsls	r3, r3, #5
 800083a:	18d3      	adds	r3, r2, r3
 800083c:	3318      	adds	r3, #24
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	2200      	movs	r2, #0
 8000842:	0019      	movs	r1, r3
 8000844:	f000 fecc 	bl	80015e0 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[1], stepper[nb_motor].pin_nb[1], GPIO_PIN_SET);   // IN2
 8000848:	4a7b      	ldr	r2, [pc, #492]	; (8000a38 <rotate+0x248>)
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	015b      	lsls	r3, r3, #5
 800084e:	18d3      	adds	r3, r2, r3
 8000850:	330c      	adds	r3, #12
 8000852:	6818      	ldr	r0, [r3, #0]
 8000854:	4a78      	ldr	r2, [pc, #480]	; (8000a38 <rotate+0x248>)
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	015b      	lsls	r3, r3, #5
 800085a:	18d3      	adds	r3, r2, r3
 800085c:	331a      	adds	r3, #26
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	2201      	movs	r2, #1
 8000862:	0019      	movs	r1, r3
 8000864:	f000 febc 	bl	80015e0 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[2], stepper[nb_motor].pin_nb[2], GPIO_PIN_SET);   // IN3
 8000868:	4a73      	ldr	r2, [pc, #460]	; (8000a38 <rotate+0x248>)
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	015b      	lsls	r3, r3, #5
 800086e:	18d3      	adds	r3, r2, r3
 8000870:	3310      	adds	r3, #16
 8000872:	6818      	ldr	r0, [r3, #0]
 8000874:	4a70      	ldr	r2, [pc, #448]	; (8000a38 <rotate+0x248>)
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	015b      	lsls	r3, r3, #5
 800087a:	18d3      	adds	r3, r2, r3
 800087c:	331c      	adds	r3, #28
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	2201      	movs	r2, #1
 8000882:	0019      	movs	r1, r3
 8000884:	f000 feac 	bl	80015e0 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[3], stepper[nb_motor].pin_nb[3], GPIO_PIN_RESET);   // IN4
 8000888:	4a6b      	ldr	r2, [pc, #428]	; (8000a38 <rotate+0x248>)
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	015b      	lsls	r3, r3, #5
 800088e:	18d3      	adds	r3, r2, r3
 8000890:	3314      	adds	r3, #20
 8000892:	6818      	ldr	r0, [r3, #0]
 8000894:	4a68      	ldr	r2, [pc, #416]	; (8000a38 <rotate+0x248>)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	015b      	lsls	r3, r3, #5
 800089a:	18d3      	adds	r3, r2, r3
 800089c:	331e      	adds	r3, #30
 800089e:	881b      	ldrh	r3, [r3, #0]
 80008a0:	2200      	movs	r2, #0
 80008a2:	0019      	movs	r1, r3
 80008a4:	f000 fe9c 	bl	80015e0 <HAL_GPIO_WritePin>
		break;
 80008a8:	e0c2      	b.n	8000a30 <rotate+0x240>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[0], stepper[nb_motor].pin_nb[0], GPIO_PIN_RESET);   // IN1
 80008aa:	4a63      	ldr	r2, [pc, #396]	; (8000a38 <rotate+0x248>)
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	015b      	lsls	r3, r3, #5
 80008b0:	18d3      	adds	r3, r2, r3
 80008b2:	3308      	adds	r3, #8
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	4a60      	ldr	r2, [pc, #384]	; (8000a38 <rotate+0x248>)
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	015b      	lsls	r3, r3, #5
 80008bc:	18d3      	adds	r3, r2, r3
 80008be:	3318      	adds	r3, #24
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	2200      	movs	r2, #0
 80008c4:	0019      	movs	r1, r3
 80008c6:	f000 fe8b 	bl	80015e0 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[1], stepper[nb_motor].pin_nb[1], GPIO_PIN_SET);   // IN2
 80008ca:	4a5b      	ldr	r2, [pc, #364]	; (8000a38 <rotate+0x248>)
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	015b      	lsls	r3, r3, #5
 80008d0:	18d3      	adds	r3, r2, r3
 80008d2:	330c      	adds	r3, #12
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	4a58      	ldr	r2, [pc, #352]	; (8000a38 <rotate+0x248>)
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	015b      	lsls	r3, r3, #5
 80008dc:	18d3      	adds	r3, r2, r3
 80008de:	331a      	adds	r3, #26
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	2201      	movs	r2, #1
 80008e4:	0019      	movs	r1, r3
 80008e6:	f000 fe7b 	bl	80015e0 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[2], stepper[nb_motor].pin_nb[2], GPIO_PIN_RESET);   // IN3
 80008ea:	4a53      	ldr	r2, [pc, #332]	; (8000a38 <rotate+0x248>)
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	015b      	lsls	r3, r3, #5
 80008f0:	18d3      	adds	r3, r2, r3
 80008f2:	3310      	adds	r3, #16
 80008f4:	6818      	ldr	r0, [r3, #0]
 80008f6:	4a50      	ldr	r2, [pc, #320]	; (8000a38 <rotate+0x248>)
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	015b      	lsls	r3, r3, #5
 80008fc:	18d3      	adds	r3, r2, r3
 80008fe:	331c      	adds	r3, #28
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	2200      	movs	r2, #0
 8000904:	0019      	movs	r1, r3
 8000906:	f000 fe6b 	bl	80015e0 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[3], stepper[nb_motor].pin_nb[3], GPIO_PIN_SET);   // IN4
 800090a:	4a4b      	ldr	r2, [pc, #300]	; (8000a38 <rotate+0x248>)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	015b      	lsls	r3, r3, #5
 8000910:	18d3      	adds	r3, r2, r3
 8000912:	3314      	adds	r3, #20
 8000914:	6818      	ldr	r0, [r3, #0]
 8000916:	4a48      	ldr	r2, [pc, #288]	; (8000a38 <rotate+0x248>)
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	015b      	lsls	r3, r3, #5
 800091c:	18d3      	adds	r3, r2, r3
 800091e:	331e      	adds	r3, #30
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	2201      	movs	r2, #1
 8000924:	0019      	movs	r1, r3
 8000926:	f000 fe5b 	bl	80015e0 <HAL_GPIO_WritePin>
		break;
 800092a:	e081      	b.n	8000a30 <rotate+0x240>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[0], stepper[nb_motor].pin_nb[0], GPIO_PIN_SET);   // IN1
 800092c:	4a42      	ldr	r2, [pc, #264]	; (8000a38 <rotate+0x248>)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	015b      	lsls	r3, r3, #5
 8000932:	18d3      	adds	r3, r2, r3
 8000934:	3308      	adds	r3, #8
 8000936:	6818      	ldr	r0, [r3, #0]
 8000938:	4a3f      	ldr	r2, [pc, #252]	; (8000a38 <rotate+0x248>)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	015b      	lsls	r3, r3, #5
 800093e:	18d3      	adds	r3, r2, r3
 8000940:	3318      	adds	r3, #24
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	2201      	movs	r2, #1
 8000946:	0019      	movs	r1, r3
 8000948:	f000 fe4a 	bl	80015e0 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[1], stepper[nb_motor].pin_nb[1], GPIO_PIN_RESET);   // IN2
 800094c:	4a3a      	ldr	r2, [pc, #232]	; (8000a38 <rotate+0x248>)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	015b      	lsls	r3, r3, #5
 8000952:	18d3      	adds	r3, r2, r3
 8000954:	330c      	adds	r3, #12
 8000956:	6818      	ldr	r0, [r3, #0]
 8000958:	4a37      	ldr	r2, [pc, #220]	; (8000a38 <rotate+0x248>)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	015b      	lsls	r3, r3, #5
 800095e:	18d3      	adds	r3, r2, r3
 8000960:	331a      	adds	r3, #26
 8000962:	881b      	ldrh	r3, [r3, #0]
 8000964:	2200      	movs	r2, #0
 8000966:	0019      	movs	r1, r3
 8000968:	f000 fe3a 	bl	80015e0 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[2], stepper[nb_motor].pin_nb[2], GPIO_PIN_RESET);   // IN3
 800096c:	4a32      	ldr	r2, [pc, #200]	; (8000a38 <rotate+0x248>)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	015b      	lsls	r3, r3, #5
 8000972:	18d3      	adds	r3, r2, r3
 8000974:	3310      	adds	r3, #16
 8000976:	6818      	ldr	r0, [r3, #0]
 8000978:	4a2f      	ldr	r2, [pc, #188]	; (8000a38 <rotate+0x248>)
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	015b      	lsls	r3, r3, #5
 800097e:	18d3      	adds	r3, r2, r3
 8000980:	331c      	adds	r3, #28
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	2200      	movs	r2, #0
 8000986:	0019      	movs	r1, r3
 8000988:	f000 fe2a 	bl	80015e0 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[3], stepper[nb_motor].pin_nb[3], GPIO_PIN_SET);   // IN4
 800098c:	4a2a      	ldr	r2, [pc, #168]	; (8000a38 <rotate+0x248>)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	015b      	lsls	r3, r3, #5
 8000992:	18d3      	adds	r3, r2, r3
 8000994:	3314      	adds	r3, #20
 8000996:	6818      	ldr	r0, [r3, #0]
 8000998:	4a27      	ldr	r2, [pc, #156]	; (8000a38 <rotate+0x248>)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	015b      	lsls	r3, r3, #5
 800099e:	18d3      	adds	r3, r2, r3
 80009a0:	331e      	adds	r3, #30
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	2201      	movs	r2, #1
 80009a6:	0019      	movs	r1, r3
 80009a8:	f000 fe1a 	bl	80015e0 <HAL_GPIO_WritePin>
		break;
 80009ac:	e040      	b.n	8000a30 <rotate+0x240>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[0], stepper[nb_motor].pin_nb[0], GPIO_PIN_SET);   // IN1
 80009ae:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <rotate+0x248>)
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	015b      	lsls	r3, r3, #5
 80009b4:	18d3      	adds	r3, r2, r3
 80009b6:	3308      	adds	r3, #8
 80009b8:	6818      	ldr	r0, [r3, #0]
 80009ba:	4a1f      	ldr	r2, [pc, #124]	; (8000a38 <rotate+0x248>)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	015b      	lsls	r3, r3, #5
 80009c0:	18d3      	adds	r3, r2, r3
 80009c2:	3318      	adds	r3, #24
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	2201      	movs	r2, #1
 80009c8:	0019      	movs	r1, r3
 80009ca:	f000 fe09 	bl	80015e0 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[1], stepper[nb_motor].pin_nb[1], GPIO_PIN_RESET);   // IN2
 80009ce:	4a1a      	ldr	r2, [pc, #104]	; (8000a38 <rotate+0x248>)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	015b      	lsls	r3, r3, #5
 80009d4:	18d3      	adds	r3, r2, r3
 80009d6:	330c      	adds	r3, #12
 80009d8:	6818      	ldr	r0, [r3, #0]
 80009da:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <rotate+0x248>)
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	015b      	lsls	r3, r3, #5
 80009e0:	18d3      	adds	r3, r2, r3
 80009e2:	331a      	adds	r3, #26
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	2200      	movs	r2, #0
 80009e8:	0019      	movs	r1, r3
 80009ea:	f000 fdf9 	bl	80015e0 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[2], stepper[nb_motor].pin_nb[2], GPIO_PIN_SET);   // IN3
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <rotate+0x248>)
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	015b      	lsls	r3, r3, #5
 80009f4:	18d3      	adds	r3, r2, r3
 80009f6:	3310      	adds	r3, #16
 80009f8:	6818      	ldr	r0, [r3, #0]
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <rotate+0x248>)
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	015b      	lsls	r3, r3, #5
 8000a00:	18d3      	adds	r3, r2, r3
 8000a02:	331c      	adds	r3, #28
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	2201      	movs	r2, #1
 8000a08:	0019      	movs	r1, r3
 8000a0a:	f000 fde9 	bl	80015e0 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[3], stepper[nb_motor].pin_nb[3], GPIO_PIN_RESET);   // IN4
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <rotate+0x248>)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	015b      	lsls	r3, r3, #5
 8000a14:	18d3      	adds	r3, r2, r3
 8000a16:	3314      	adds	r3, #20
 8000a18:	6818      	ldr	r0, [r3, #0]
 8000a1a:	4a07      	ldr	r2, [pc, #28]	; (8000a38 <rotate+0x248>)
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	015b      	lsls	r3, r3, #5
 8000a20:	18d3      	adds	r3, r2, r3
 8000a22:	331e      	adds	r3, #30
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	2200      	movs	r2, #0
 8000a28:	0019      	movs	r1, r3
 8000a2a:	f000 fdd9 	bl	80015e0 <HAL_GPIO_WritePin>
		break;
 8000a2e:	46c0      	nop			; (mov r8, r8)
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b002      	add	sp, #8
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000000 	.word	0x20000000

08000a3c <Motor_Handling>:

void Motor_Handling() {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	static int nb_motor=0;

	if(stepper[nb_motor].state == OFF) { //skip step if nb_motor is OFF
 8000a40:	4b45      	ldr	r3, [pc, #276]	; (8000b58 <Motor_Handling+0x11c>)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	4b45      	ldr	r3, [pc, #276]	; (8000b5c <Motor_Handling+0x120>)
 8000a46:	0152      	lsls	r2, r2, #5
 8000a48:	5cd3      	ldrb	r3, [r2, r3]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d105      	bne.n	8000a5a <Motor_Handling+0x1e>
		nb_motor++;
 8000a4e:	4b42      	ldr	r3, [pc, #264]	; (8000b58 <Motor_Handling+0x11c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	4b40      	ldr	r3, [pc, #256]	; (8000b58 <Motor_Handling+0x11c>)
 8000a56:	601a      	str	r2, [r3, #0]
		return;
 8000a58:	e07c      	b.n	8000b54 <Motor_Handling+0x118>
	}

	if(stepper[nb_motor].way == DOWN) { //change order of steps to correspond to wanted direction
 8000a5a:	4b3f      	ldr	r3, [pc, #252]	; (8000b58 <Motor_Handling+0x11c>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a3f      	ldr	r2, [pc, #252]	; (8000b5c <Motor_Handling+0x120>)
 8000a60:	015b      	lsls	r3, r3, #5
 8000a62:	18d3      	adds	r3, r2, r3
 8000a64:	3301      	adds	r3, #1
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d12f      	bne.n	8000acc <Motor_Handling+0x90>
		rotate(stepper[nb_motor].step, nb_motor);
 8000a6c:	4b3a      	ldr	r3, [pc, #232]	; (8000b58 <Motor_Handling+0x11c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a3a      	ldr	r2, [pc, #232]	; (8000b5c <Motor_Handling+0x120>)
 8000a72:	015b      	lsls	r3, r3, #5
 8000a74:	18d3      	adds	r3, r2, r3
 8000a76:	3302      	adds	r3, #2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	001a      	movs	r2, r3
 8000a7c:	4b36      	ldr	r3, [pc, #216]	; (8000b58 <Motor_Handling+0x11c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	0019      	movs	r1, r3
 8000a82:	0010      	movs	r0, r2
 8000a84:	f7ff feb4 	bl	80007f0 <rotate>
		if(stepper[nb_motor].step>=3) stepper[nb_motor].step = 0;
 8000a88:	4b33      	ldr	r3, [pc, #204]	; (8000b58 <Motor_Handling+0x11c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a33      	ldr	r2, [pc, #204]	; (8000b5c <Motor_Handling+0x120>)
 8000a8e:	015b      	lsls	r3, r3, #5
 8000a90:	18d3      	adds	r3, r2, r3
 8000a92:	3302      	adds	r3, #2
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b02      	cmp	r3, #2
 8000a98:	d908      	bls.n	8000aac <Motor_Handling+0x70>
 8000a9a:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <Motor_Handling+0x11c>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a2f      	ldr	r2, [pc, #188]	; (8000b5c <Motor_Handling+0x120>)
 8000aa0:	015b      	lsls	r3, r3, #5
 8000aa2:	18d3      	adds	r3, r2, r3
 8000aa4:	3302      	adds	r3, #2
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	e047      	b.n	8000b3c <Motor_Handling+0x100>
		else stepper[nb_motor].step++;
 8000aac:	4b2a      	ldr	r3, [pc, #168]	; (8000b58 <Motor_Handling+0x11c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	492a      	ldr	r1, [pc, #168]	; (8000b5c <Motor_Handling+0x120>)
 8000ab2:	015a      	lsls	r2, r3, #5
 8000ab4:	188a      	adds	r2, r1, r2
 8000ab6:	3202      	adds	r2, #2
 8000ab8:	7812      	ldrb	r2, [r2, #0]
 8000aba:	3201      	adds	r2, #1
 8000abc:	b2d1      	uxtb	r1, r2
 8000abe:	4a27      	ldr	r2, [pc, #156]	; (8000b5c <Motor_Handling+0x120>)
 8000ac0:	015b      	lsls	r3, r3, #5
 8000ac2:	18d3      	adds	r3, r2, r3
 8000ac4:	3302      	adds	r3, #2
 8000ac6:	1c0a      	adds	r2, r1, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	e037      	b.n	8000b3c <Motor_Handling+0x100>
	} else if(stepper[nb_motor].way == UP){
 8000acc:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <Motor_Handling+0x11c>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a22      	ldr	r2, [pc, #136]	; (8000b5c <Motor_Handling+0x120>)
 8000ad2:	015b      	lsls	r3, r3, #5
 8000ad4:	18d3      	adds	r3, r2, r3
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d12e      	bne.n	8000b3c <Motor_Handling+0x100>
		rotate(stepper[nb_motor].step, nb_motor);
 8000ade:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <Motor_Handling+0x11c>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a1e      	ldr	r2, [pc, #120]	; (8000b5c <Motor_Handling+0x120>)
 8000ae4:	015b      	lsls	r3, r3, #5
 8000ae6:	18d3      	adds	r3, r2, r3
 8000ae8:	3302      	adds	r3, #2
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	001a      	movs	r2, r3
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <Motor_Handling+0x11c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	0019      	movs	r1, r3
 8000af4:	0010      	movs	r0, r2
 8000af6:	f7ff fe7b 	bl	80007f0 <rotate>
		if(stepper[nb_motor].step<=0) stepper[nb_motor].step = 3;
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <Motor_Handling+0x11c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a17      	ldr	r2, [pc, #92]	; (8000b5c <Motor_Handling+0x120>)
 8000b00:	015b      	lsls	r3, r3, #5
 8000b02:	18d3      	adds	r3, r2, r3
 8000b04:	3302      	adds	r3, #2
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d108      	bne.n	8000b1e <Motor_Handling+0xe2>
 8000b0c:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <Motor_Handling+0x11c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <Motor_Handling+0x120>)
 8000b12:	015b      	lsls	r3, r3, #5
 8000b14:	18d3      	adds	r3, r2, r3
 8000b16:	3302      	adds	r3, #2
 8000b18:	2203      	movs	r2, #3
 8000b1a:	701a      	strb	r2, [r3, #0]
 8000b1c:	e00e      	b.n	8000b3c <Motor_Handling+0x100>
		else stepper[nb_motor].step--;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <Motor_Handling+0x11c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	490e      	ldr	r1, [pc, #56]	; (8000b5c <Motor_Handling+0x120>)
 8000b24:	015a      	lsls	r2, r3, #5
 8000b26:	188a      	adds	r2, r1, r2
 8000b28:	3202      	adds	r2, #2
 8000b2a:	7812      	ldrb	r2, [r2, #0]
 8000b2c:	3a01      	subs	r2, #1
 8000b2e:	b2d1      	uxtb	r1, r2
 8000b30:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <Motor_Handling+0x120>)
 8000b32:	015b      	lsls	r3, r3, #5
 8000b34:	18d3      	adds	r3, r2, r3
 8000b36:	3302      	adds	r3, #2
 8000b38:	1c0a      	adds	r2, r1, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
	}

	nb_motor++;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <Motor_Handling+0x11c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	1c5a      	adds	r2, r3, #1
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <Motor_Handling+0x11c>)
 8000b44:	601a      	str	r2, [r3, #0]
	if(nb_motor >=8) nb_motor=0;
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <Motor_Handling+0x11c>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b07      	cmp	r3, #7
 8000b4c:	dd02      	ble.n	8000b54 <Motor_Handling+0x118>
 8000b4e:	4b02      	ldr	r3, [pc, #8]	; (8000b58 <Motor_Handling+0x11c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
}
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000274 	.word	0x20000274
 8000b5c:	20000000 	.word	0x20000000

08000b60 <setStepperSens>:

void setStepperSens(enum SENS s) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	0002      	movs	r2, r0
 8000b68:	1dfb      	adds	r3, r7, #7
 8000b6a:	701a      	strb	r2, [r3, #0]
	for(int j; j<8; j++) {
 8000b6c:	e00a      	b.n	8000b84 <setStepperSens+0x24>
		stepper[j].way = s;
 8000b6e:	4a09      	ldr	r2, [pc, #36]	; (8000b94 <setStepperSens+0x34>)
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	015b      	lsls	r3, r3, #5
 8000b74:	18d3      	adds	r3, r2, r3
 8000b76:	3301      	adds	r3, #1
 8000b78:	1dfa      	adds	r2, r7, #7
 8000b7a:	7812      	ldrb	r2, [r2, #0]
 8000b7c:	701a      	strb	r2, [r3, #0]
	for(int j; j<8; j++) {
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	3301      	adds	r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2b07      	cmp	r3, #7
 8000b88:	ddf1      	ble.n	8000b6e <setStepperSens+0xe>
	}
}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b004      	add	sp, #16
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000000 	.word	0x20000000

08000b98 <setStepperOnOff>:

void setStepperOnOff(enum ONOFF o) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	0002      	movs	r2, r0
 8000ba0:	1dfb      	adds	r3, r7, #7
 8000ba2:	701a      	strb	r2, [r3, #0]
	for(int j; j<8; j++) {
 8000ba4:	e008      	b.n	8000bb8 <setStepperOnOff+0x20>
		stepper[j].state = o;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <setStepperOnOff+0x30>)
 8000ba8:	68fa      	ldr	r2, [r7, #12]
 8000baa:	0152      	lsls	r2, r2, #5
 8000bac:	1df9      	adds	r1, r7, #7
 8000bae:	7809      	ldrb	r1, [r1, #0]
 8000bb0:	54d1      	strb	r1, [r2, r3]
	for(int j; j<8; j++) {
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b07      	cmp	r3, #7
 8000bbc:	ddf3      	ble.n	8000ba6 <setStepperOnOff+0xe>
	}
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46c0      	nop			; (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b004      	add	sp, #16
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000000 	.word	0x20000000

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <Error_Handler+0x8>
	...

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <HAL_MspInit+0x44>)
 8000be0:	699a      	ldr	r2, [r3, #24]
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_MspInit+0x44>)
 8000be4:	2101      	movs	r1, #1
 8000be6:	430a      	orrs	r2, r1
 8000be8:	619a      	str	r2, [r3, #24]
 8000bea:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_MspInit+0x44>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_MspInit+0x44>)
 8000bf8:	69da      	ldr	r2, [r3, #28]
 8000bfa:	4b08      	ldr	r3, [pc, #32]	; (8000c1c <HAL_MspInit+0x44>)
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	0549      	lsls	r1, r1, #21
 8000c00:	430a      	orrs	r2, r1
 8000c02:	61da      	str	r2, [r3, #28]
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <HAL_MspInit+0x44>)
 8000c06:	69da      	ldr	r2, [r3, #28]
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	055b      	lsls	r3, r3, #21
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b002      	add	sp, #8
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	40021000 	.word	0x40021000

08000c20 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b08b      	sub	sp, #44	; 0x2c
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	2414      	movs	r4, #20
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	2314      	movs	r3, #20
 8000c30:	001a      	movs	r2, r3
 8000c32:	2100      	movs	r1, #0
 8000c34:	f002 fb4a 	bl	80032cc <memset>
  if(hcan->Instance==CAN)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a1d      	ldr	r2, [pc, #116]	; (8000cb4 <HAL_CAN_MspInit+0x94>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d133      	bne.n	8000caa <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c42:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <HAL_CAN_MspInit+0x98>)
 8000c44:	69da      	ldr	r2, [r3, #28]
 8000c46:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <HAL_CAN_MspInit+0x98>)
 8000c48:	2180      	movs	r1, #128	; 0x80
 8000c4a:	0489      	lsls	r1, r1, #18
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	61da      	str	r2, [r3, #28]
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <HAL_CAN_MspInit+0x98>)
 8000c52:	69da      	ldr	r2, [r3, #28]
 8000c54:	2380      	movs	r3, #128	; 0x80
 8000c56:	049b      	lsls	r3, r3, #18
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5e:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <HAL_CAN_MspInit+0x98>)
 8000c60:	695a      	ldr	r2, [r3, #20]
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_CAN_MspInit+0x98>)
 8000c64:	2180      	movs	r1, #128	; 0x80
 8000c66:	0289      	lsls	r1, r1, #10
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	615a      	str	r2, [r3, #20]
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_CAN_MspInit+0x98>)
 8000c6e:	695a      	ldr	r2, [r3, #20]
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	029b      	lsls	r3, r3, #10
 8000c74:	4013      	ands	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	22c0      	movs	r2, #192	; 0xc0
 8000c7e:	0152      	lsls	r2, r2, #5
 8000c80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	0021      	movs	r1, r4
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2202      	movs	r2, #2
 8000c88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2203      	movs	r2, #3
 8000c94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	2204      	movs	r2, #4
 8000c9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	187a      	adds	r2, r7, r1
 8000c9e:	2390      	movs	r3, #144	; 0x90
 8000ca0:	05db      	lsls	r3, r3, #23
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f000 fb23 	bl	80012f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b00b      	add	sp, #44	; 0x2c
 8000cb0:	bd90      	pop	{r4, r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	40006400 	.word	0x40006400
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	05db      	lsls	r3, r3, #23
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d114      	bne.n	8000cfa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <HAL_TIM_Base_MspInit+0x68>)
 8000cd2:	69da      	ldr	r2, [r3, #28]
 8000cd4:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <HAL_TIM_Base_MspInit+0x68>)
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	61da      	str	r2, [r3, #28]
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <HAL_TIM_Base_MspInit+0x68>)
 8000cde:	69db      	ldr	r3, [r3, #28]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	200f      	movs	r0, #15
 8000cee:	f000 facd 	bl	800128c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cf2:	200f      	movs	r0, #15
 8000cf4:	f000 fadf 	bl	80012b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cf8:	e010      	b.n	8000d1c <HAL_TIM_Base_MspInit+0x60>
  else if(htim_base->Instance==TIM3)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <HAL_TIM_Base_MspInit+0x6c>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d10b      	bne.n	8000d1c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <HAL_TIM_Base_MspInit+0x68>)
 8000d06:	69da      	ldr	r2, [r3, #28]
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_TIM_Base_MspInit+0x68>)
 8000d0a:	2102      	movs	r1, #2
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	61da      	str	r2, [r3, #28]
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <HAL_TIM_Base_MspInit+0x68>)
 8000d12:	69db      	ldr	r3, [r3, #28]
 8000d14:	2202      	movs	r2, #2
 8000d16:	4013      	ands	r3, r2
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b004      	add	sp, #16
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40021000 	.word	0x40021000
 8000d28:	40000400 	.word	0x40000400

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b590      	push	{r4, r7, lr}
 8000d2e:	b08b      	sub	sp, #44	; 0x2c
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	2414      	movs	r4, #20
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	0018      	movs	r0, r3
 8000d3a:	2314      	movs	r3, #20
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f002 fac4 	bl	80032cc <memset>
  if(huart->Instance==USART1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a1d      	ldr	r2, [pc, #116]	; (8000dc0 <HAL_UART_MspInit+0x94>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d133      	bne.n	8000db6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d50:	699a      	ldr	r2, [r3, #24]
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d54:	2180      	movs	r1, #128	; 0x80
 8000d56:	01c9      	lsls	r1, r1, #7
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	619a      	str	r2, [r3, #24]
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d5e:	699a      	ldr	r2, [r3, #24]
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	01db      	lsls	r3, r3, #7
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6a:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d6c:	695a      	ldr	r2, [r3, #20]
 8000d6e:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	0289      	lsls	r1, r1, #10
 8000d74:	430a      	orrs	r2, r1
 8000d76:	615a      	str	r2, [r3, #20]
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <HAL_UART_MspInit+0x98>)
 8000d7a:	695a      	ldr	r2, [r3, #20]
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	029b      	lsls	r3, r3, #10
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d86:	193b      	adds	r3, r7, r4
 8000d88:	22c0      	movs	r2, #192	; 0xc0
 8000d8a:	00d2      	lsls	r2, r2, #3
 8000d8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	0021      	movs	r1, r4
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2202      	movs	r2, #2
 8000d94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2203      	movs	r2, #3
 8000da0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	2201      	movs	r2, #1
 8000da6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	187a      	adds	r2, r7, r1
 8000daa:	2390      	movs	r3, #144	; 0x90
 8000dac:	05db      	lsls	r3, r3, #23
 8000dae:	0011      	movs	r1, r2
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 fa9d 	bl	80012f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b00b      	add	sp, #44	; 0x2c
 8000dbc:	bd90      	pop	{r4, r7, pc}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	40013800 	.word	0x40013800
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dec:	f000 f888 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df0:	46c0      	nop			; (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <TIM2_IRQHandler+0x14>)
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f001 facc 	bl	800239c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	20000150 	.word	0x20000150

08000e10 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e1e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e20:	f7ff fff6 	bl	8000e10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	; (8000e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <LoopForever+0xe>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	; (8000e68 <LoopForever+0x16>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e4a:	f002 fa47 	bl	80032dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e4e:	f7ff f9e7 	bl	8000220 <main>

08000e52 <LoopForever>:

LoopForever:
    b LoopForever
 8000e52:	e7fe      	b.n	8000e52 <LoopForever>
  ldr   r0, =_estack
 8000e54:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000e60:	08003390 	.word	0x08003390
  ldr r2, =_sbss
 8000e64:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000e68:	2000027c 	.word	0x2000027c

08000e6c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC1_COMP_IRQHandler>
	...

08000e70 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <HAL_Init+0x24>)
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_Init+0x24>)
 8000e7a:	2110      	movs	r1, #16
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f809 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e86:	f7ff fea7 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	40022000 	.word	0x40022000

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_InitTick+0x5c>)
 8000ea2:	681c      	ldr	r4, [r3, #0]
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <HAL_InitTick+0x60>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	0019      	movs	r1, r3
 8000eaa:	23fa      	movs	r3, #250	; 0xfa
 8000eac:	0098      	lsls	r0, r3, #2
 8000eae:	f7ff f92b 	bl	8000108 <__udivsi3>
 8000eb2:	0003      	movs	r3, r0
 8000eb4:	0019      	movs	r1, r3
 8000eb6:	0020      	movs	r0, r4
 8000eb8:	f7ff f926 	bl	8000108 <__udivsi3>
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f000 fa09 	bl	80012d6 <HAL_SYSTICK_Config>
 8000ec4:	1e03      	subs	r3, r0, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e00f      	b.n	8000eec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b03      	cmp	r3, #3
 8000ed0:	d80b      	bhi.n	8000eea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed2:	6879      	ldr	r1, [r7, #4]
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	425b      	negs	r3, r3
 8000ed8:	2200      	movs	r2, #0
 8000eda:	0018      	movs	r0, r3
 8000edc:	f000 f9d6 	bl	800128c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_InitTick+0x64>)
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e000      	b.n	8000eec <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	0018      	movs	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b003      	add	sp, #12
 8000ef2:	bd90      	pop	{r4, r7, pc}
 8000ef4:	20000100 	.word	0x20000100
 8000ef8:	20000108 	.word	0x20000108
 8000efc:	20000104 	.word	0x20000104

08000f00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_IncTick+0x1c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	001a      	movs	r2, r3
 8000f0a:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <HAL_IncTick+0x20>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	18d2      	adds	r2, r2, r3
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <HAL_IncTick+0x20>)
 8000f12:	601a      	str	r2, [r3, #0]
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	20000108 	.word	0x20000108
 8000f20:	20000278 	.word	0x20000278

08000f24 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b02      	ldr	r3, [pc, #8]	; (8000f34 <HAL_GetTick+0x10>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	20000278 	.word	0x20000278

08000f38 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e0f0      	b.n	800112c <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2220      	movs	r2, #32
 8000f4e:	5c9b      	ldrb	r3, [r3, r2]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d103      	bne.n	8000f5e <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f7ff fe61 	bl	8000c20 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2101      	movs	r1, #1
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f6e:	f7ff ffd9 	bl	8000f24 <HAL_GetTick>
 8000f72:	0003      	movs	r3, r0
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f76:	e013      	b.n	8000fa0 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f78:	f7ff ffd4 	bl	8000f24 <HAL_GetTick>
 8000f7c:	0002      	movs	r2, r0
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b0a      	cmp	r3, #10
 8000f84:	d90c      	bls.n	8000fa0 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	2280      	movs	r2, #128	; 0x80
 8000f8c:	0292      	lsls	r2, r2, #10
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2220      	movs	r2, #32
 8000f98:	2105      	movs	r1, #5
 8000f9a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e0c5      	b.n	800112c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d0e5      	beq.n	8000f78 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	438a      	bics	r2, r1
 8000fba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fbc:	f7ff ffb2 	bl	8000f24 <HAL_GetTick>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fc4:	e013      	b.n	8000fee <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fc6:	f7ff ffad 	bl	8000f24 <HAL_GetTick>
 8000fca:	0002      	movs	r2, r0
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b0a      	cmp	r3, #10
 8000fd2:	d90c      	bls.n	8000fee <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	2280      	movs	r2, #128	; 0x80
 8000fda:	0292      	lsls	r2, r2, #10
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	2105      	movs	r1, #5
 8000fe8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e09e      	b.n	800112c <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2202      	movs	r2, #2
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d1e5      	bne.n	8000fc6 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7e1b      	ldrb	r3, [r3, #24]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d108      	bne.n	8001014 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2180      	movs	r1, #128	; 0x80
 800100e:	430a      	orrs	r2, r1
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	e007      	b.n	8001024 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	438a      	bics	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	7e5b      	ldrb	r3, [r3, #25]
 8001028:	2b01      	cmp	r3, #1
 800102a:	d108      	bne.n	800103e <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2140      	movs	r1, #64	; 0x40
 8001038:	430a      	orrs	r2, r1
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	e007      	b.n	800104e <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2140      	movs	r1, #64	; 0x40
 800104a:	438a      	bics	r2, r1
 800104c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	7e9b      	ldrb	r3, [r3, #26]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d108      	bne.n	8001068 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2120      	movs	r1, #32
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e007      	b.n	8001078 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2120      	movs	r1, #32
 8001074:	438a      	bics	r2, r1
 8001076:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7edb      	ldrb	r3, [r3, #27]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d108      	bne.n	8001092 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2110      	movs	r1, #16
 800108c:	438a      	bics	r2, r1
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	e007      	b.n	80010a2 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2110      	movs	r1, #16
 800109e:	430a      	orrs	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	7f1b      	ldrb	r3, [r3, #28]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d108      	bne.n	80010bc <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2108      	movs	r1, #8
 80010b6:	430a      	orrs	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	e007      	b.n	80010cc <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2108      	movs	r1, #8
 80010c8:	438a      	bics	r2, r1
 80010ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	7f5b      	ldrb	r3, [r3, #29]
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d108      	bne.n	80010e6 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2104      	movs	r1, #4
 80010e0:	430a      	orrs	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	e007      	b.n	80010f6 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2104      	movs	r1, #4
 80010f2:	438a      	bics	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	431a      	orrs	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	691b      	ldr	r3, [r3, #16]
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	431a      	orrs	r2, r3
 800110c:	0011      	movs	r1, r2
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	1e5a      	subs	r2, r3, #1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	430a      	orrs	r2, r1
 800111a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2220      	movs	r2, #32
 8001126:	2101      	movs	r1, #1
 8001128:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	b004      	add	sp, #16
 8001132:	bd80      	pop	{r7, pc}

08001134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	0002      	movs	r2, r0
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001140:	1dfb      	adds	r3, r7, #7
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b7f      	cmp	r3, #127	; 0x7f
 8001146:	d809      	bhi.n	800115c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001148:	1dfb      	adds	r3, r7, #7
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	001a      	movs	r2, r3
 800114e:	231f      	movs	r3, #31
 8001150:	401a      	ands	r2, r3
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <__NVIC_EnableIRQ+0x30>)
 8001154:	2101      	movs	r1, #1
 8001156:	4091      	lsls	r1, r2
 8001158:	000a      	movs	r2, r1
 800115a:	601a      	str	r2, [r3, #0]
  }
}
 800115c:	46c0      	nop			; (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	b002      	add	sp, #8
 8001162:	bd80      	pop	{r7, pc}
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	0002      	movs	r2, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b7f      	cmp	r3, #127	; 0x7f
 800117c:	d828      	bhi.n	80011d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800117e:	4a2f      	ldr	r2, [pc, #188]	; (800123c <__NVIC_SetPriority+0xd4>)
 8001180:	1dfb      	adds	r3, r7, #7
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b25b      	sxtb	r3, r3
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	33c0      	adds	r3, #192	; 0xc0
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	589b      	ldr	r3, [r3, r2]
 800118e:	1dfa      	adds	r2, r7, #7
 8001190:	7812      	ldrb	r2, [r2, #0]
 8001192:	0011      	movs	r1, r2
 8001194:	2203      	movs	r2, #3
 8001196:	400a      	ands	r2, r1
 8001198:	00d2      	lsls	r2, r2, #3
 800119a:	21ff      	movs	r1, #255	; 0xff
 800119c:	4091      	lsls	r1, r2
 800119e:	000a      	movs	r2, r1
 80011a0:	43d2      	mvns	r2, r2
 80011a2:	401a      	ands	r2, r3
 80011a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	019b      	lsls	r3, r3, #6
 80011aa:	22ff      	movs	r2, #255	; 0xff
 80011ac:	401a      	ands	r2, r3
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	0018      	movs	r0, r3
 80011b4:	2303      	movs	r3, #3
 80011b6:	4003      	ands	r3, r0
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011bc:	481f      	ldr	r0, [pc, #124]	; (800123c <__NVIC_SetPriority+0xd4>)
 80011be:	1dfb      	adds	r3, r7, #7
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b25b      	sxtb	r3, r3
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	430a      	orrs	r2, r1
 80011c8:	33c0      	adds	r3, #192	; 0xc0
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011ce:	e031      	b.n	8001234 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d0:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <__NVIC_SetPriority+0xd8>)
 80011d2:	1dfb      	adds	r3, r7, #7
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	0019      	movs	r1, r3
 80011d8:	230f      	movs	r3, #15
 80011da:	400b      	ands	r3, r1
 80011dc:	3b08      	subs	r3, #8
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	3306      	adds	r3, #6
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	18d3      	adds	r3, r2, r3
 80011e6:	3304      	adds	r3, #4
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	1dfa      	adds	r2, r7, #7
 80011ec:	7812      	ldrb	r2, [r2, #0]
 80011ee:	0011      	movs	r1, r2
 80011f0:	2203      	movs	r2, #3
 80011f2:	400a      	ands	r2, r1
 80011f4:	00d2      	lsls	r2, r2, #3
 80011f6:	21ff      	movs	r1, #255	; 0xff
 80011f8:	4091      	lsls	r1, r2
 80011fa:	000a      	movs	r2, r1
 80011fc:	43d2      	mvns	r2, r2
 80011fe:	401a      	ands	r2, r3
 8001200:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	019b      	lsls	r3, r3, #6
 8001206:	22ff      	movs	r2, #255	; 0xff
 8001208:	401a      	ands	r2, r3
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	0018      	movs	r0, r3
 8001210:	2303      	movs	r3, #3
 8001212:	4003      	ands	r3, r0
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001218:	4809      	ldr	r0, [pc, #36]	; (8001240 <__NVIC_SetPriority+0xd8>)
 800121a:	1dfb      	adds	r3, r7, #7
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	001c      	movs	r4, r3
 8001220:	230f      	movs	r3, #15
 8001222:	4023      	ands	r3, r4
 8001224:	3b08      	subs	r3, #8
 8001226:	089b      	lsrs	r3, r3, #2
 8001228:	430a      	orrs	r2, r1
 800122a:	3306      	adds	r3, #6
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	18c3      	adds	r3, r0, r3
 8001230:	3304      	adds	r3, #4
 8001232:	601a      	str	r2, [r3, #0]
}
 8001234:	46c0      	nop			; (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	b003      	add	sp, #12
 800123a:	bd90      	pop	{r4, r7, pc}
 800123c:	e000e100 	.word	0xe000e100
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	1e5a      	subs	r2, r3, #1
 8001250:	2380      	movs	r3, #128	; 0x80
 8001252:	045b      	lsls	r3, r3, #17
 8001254:	429a      	cmp	r2, r3
 8001256:	d301      	bcc.n	800125c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001258:	2301      	movs	r3, #1
 800125a:	e010      	b.n	800127e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <SysTick_Config+0x44>)
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	3a01      	subs	r2, #1
 8001262:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001264:	2301      	movs	r3, #1
 8001266:	425b      	negs	r3, r3
 8001268:	2103      	movs	r1, #3
 800126a:	0018      	movs	r0, r3
 800126c:	f7ff ff7c 	bl	8001168 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <SysTick_Config+0x44>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <SysTick_Config+0x44>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	0018      	movs	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	b002      	add	sp, #8
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	210f      	movs	r1, #15
 8001298:	187b      	adds	r3, r7, r1
 800129a:	1c02      	adds	r2, r0, #0
 800129c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800129e:	68ba      	ldr	r2, [r7, #8]
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	b25b      	sxtb	r3, r3
 80012a6:	0011      	movs	r1, r2
 80012a8:	0018      	movs	r0, r3
 80012aa:	f7ff ff5d 	bl	8001168 <__NVIC_SetPriority>
}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b004      	add	sp, #16
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	0002      	movs	r2, r0
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b25b      	sxtb	r3, r3
 80012c8:	0018      	movs	r0, r3
 80012ca:	f7ff ff33 	bl	8001134 <__NVIC_EnableIRQ>
}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b002      	add	sp, #8
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff ffaf 	bl	8001244 <SysTick_Config>
 80012e6:	0003      	movs	r3, r0
}
 80012e8:	0018      	movs	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b002      	add	sp, #8
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012fe:	e155      	b.n	80015ac <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2101      	movs	r1, #1
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	4091      	lsls	r1, r2
 800130a:	000a      	movs	r2, r1
 800130c:	4013      	ands	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d100      	bne.n	8001318 <HAL_GPIO_Init+0x28>
 8001316:	e146      	b.n	80015a6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2203      	movs	r2, #3
 800131e:	4013      	ands	r3, r2
 8001320:	2b01      	cmp	r3, #1
 8001322:	d005      	beq.n	8001330 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2203      	movs	r2, #3
 800132a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800132c:	2b02      	cmp	r3, #2
 800132e:	d130      	bne.n	8001392 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	409a      	lsls	r2, r3
 800133e:	0013      	movs	r3, r2
 8001340:	43da      	mvns	r2, r3
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	68da      	ldr	r2, [r3, #12]
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	409a      	lsls	r2, r3
 8001352:	0013      	movs	r3, r2
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4313      	orrs	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001366:	2201      	movs	r2, #1
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
 800136c:	0013      	movs	r3, r2
 800136e:	43da      	mvns	r2, r3
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	2201      	movs	r2, #1
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
 8001384:	0013      	movs	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2203      	movs	r2, #3
 8001398:	4013      	ands	r3, r2
 800139a:	2b03      	cmp	r3, #3
 800139c:	d017      	beq.n	80013ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	2203      	movs	r2, #3
 80013aa:	409a      	lsls	r2, r3
 80013ac:	0013      	movs	r3, r2
 80013ae:	43da      	mvns	r2, r3
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	409a      	lsls	r2, r3
 80013c0:	0013      	movs	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2203      	movs	r2, #3
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d123      	bne.n	8001422 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	08da      	lsrs	r2, r3, #3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3208      	adds	r2, #8
 80013e2:	0092      	lsls	r2, r2, #2
 80013e4:	58d3      	ldr	r3, [r2, r3]
 80013e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	2207      	movs	r2, #7
 80013ec:	4013      	ands	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	220f      	movs	r2, #15
 80013f2:	409a      	lsls	r2, r3
 80013f4:	0013      	movs	r3, r2
 80013f6:	43da      	mvns	r2, r3
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	691a      	ldr	r2, [r3, #16]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	2107      	movs	r1, #7
 8001406:	400b      	ands	r3, r1
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	409a      	lsls	r2, r3
 800140c:	0013      	movs	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	08da      	lsrs	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3208      	adds	r2, #8
 800141c:	0092      	lsls	r2, r2, #2
 800141e:	6939      	ldr	r1, [r7, #16]
 8001420:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	2203      	movs	r2, #3
 800142e:	409a      	lsls	r2, r3
 8001430:	0013      	movs	r3, r2
 8001432:	43da      	mvns	r2, r3
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2203      	movs	r2, #3
 8001440:	401a      	ands	r2, r3
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	409a      	lsls	r2, r3
 8001448:	0013      	movs	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	23c0      	movs	r3, #192	; 0xc0
 800145c:	029b      	lsls	r3, r3, #10
 800145e:	4013      	ands	r3, r2
 8001460:	d100      	bne.n	8001464 <HAL_GPIO_Init+0x174>
 8001462:	e0a0      	b.n	80015a6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001464:	4b57      	ldr	r3, [pc, #348]	; (80015c4 <HAL_GPIO_Init+0x2d4>)
 8001466:	699a      	ldr	r2, [r3, #24]
 8001468:	4b56      	ldr	r3, [pc, #344]	; (80015c4 <HAL_GPIO_Init+0x2d4>)
 800146a:	2101      	movs	r1, #1
 800146c:	430a      	orrs	r2, r1
 800146e:	619a      	str	r2, [r3, #24]
 8001470:	4b54      	ldr	r3, [pc, #336]	; (80015c4 <HAL_GPIO_Init+0x2d4>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	2201      	movs	r2, #1
 8001476:	4013      	ands	r3, r2
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800147c:	4a52      	ldr	r2, [pc, #328]	; (80015c8 <HAL_GPIO_Init+0x2d8>)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	3302      	adds	r3, #2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	589b      	ldr	r3, [r3, r2]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	2203      	movs	r2, #3
 800148e:	4013      	ands	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	220f      	movs	r2, #15
 8001494:	409a      	lsls	r2, r3
 8001496:	0013      	movs	r3, r2
 8001498:	43da      	mvns	r2, r3
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	2390      	movs	r3, #144	; 0x90
 80014a4:	05db      	lsls	r3, r3, #23
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d019      	beq.n	80014de <HAL_GPIO_Init+0x1ee>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a47      	ldr	r2, [pc, #284]	; (80015cc <HAL_GPIO_Init+0x2dc>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d013      	beq.n	80014da <HAL_GPIO_Init+0x1ea>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a46      	ldr	r2, [pc, #280]	; (80015d0 <HAL_GPIO_Init+0x2e0>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d00d      	beq.n	80014d6 <HAL_GPIO_Init+0x1e6>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a45      	ldr	r2, [pc, #276]	; (80015d4 <HAL_GPIO_Init+0x2e4>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d007      	beq.n	80014d2 <HAL_GPIO_Init+0x1e2>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a44      	ldr	r2, [pc, #272]	; (80015d8 <HAL_GPIO_Init+0x2e8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d101      	bne.n	80014ce <HAL_GPIO_Init+0x1de>
 80014ca:	2304      	movs	r3, #4
 80014cc:	e008      	b.n	80014e0 <HAL_GPIO_Init+0x1f0>
 80014ce:	2305      	movs	r3, #5
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x1f0>
 80014d2:	2303      	movs	r3, #3
 80014d4:	e004      	b.n	80014e0 <HAL_GPIO_Init+0x1f0>
 80014d6:	2302      	movs	r3, #2
 80014d8:	e002      	b.n	80014e0 <HAL_GPIO_Init+0x1f0>
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <HAL_GPIO_Init+0x1f0>
 80014de:	2300      	movs	r3, #0
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	2103      	movs	r1, #3
 80014e4:	400a      	ands	r2, r1
 80014e6:	0092      	lsls	r2, r2, #2
 80014e8:	4093      	lsls	r3, r2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014f0:	4935      	ldr	r1, [pc, #212]	; (80015c8 <HAL_GPIO_Init+0x2d8>)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	3302      	adds	r3, #2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014fe:	4b37      	ldr	r3, [pc, #220]	; (80015dc <HAL_GPIO_Init+0x2ec>)
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	43da      	mvns	r2, r3
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	035b      	lsls	r3, r3, #13
 8001516:	4013      	ands	r3, r2
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001522:	4b2e      	ldr	r3, [pc, #184]	; (80015dc <HAL_GPIO_Init+0x2ec>)
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001528:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <HAL_GPIO_Init+0x2ec>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	43da      	mvns	r2, r3
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	039b      	lsls	r3, r3, #14
 8001540:	4013      	ands	r3, r2
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800154c:	4b23      	ldr	r3, [pc, #140]	; (80015dc <HAL_GPIO_Init+0x2ec>)
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <HAL_GPIO_Init+0x2ec>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	43da      	mvns	r2, r3
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	029b      	lsls	r3, r3, #10
 800156a:	4013      	ands	r3, r2
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <HAL_GPIO_Init+0x2ec>)
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800157c:	4b17      	ldr	r3, [pc, #92]	; (80015dc <HAL_GPIO_Init+0x2ec>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	43da      	mvns	r2, r3
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	025b      	lsls	r3, r3, #9
 8001594:	4013      	ands	r3, r2
 8001596:	d003      	beq.n	80015a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	4313      	orrs	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <HAL_GPIO_Init+0x2ec>)
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	40da      	lsrs	r2, r3
 80015b4:	1e13      	subs	r3, r2, #0
 80015b6:	d000      	beq.n	80015ba <HAL_GPIO_Init+0x2ca>
 80015b8:	e6a2      	b.n	8001300 <HAL_GPIO_Init+0x10>
  } 
}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	46c0      	nop			; (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	b006      	add	sp, #24
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40010000 	.word	0x40010000
 80015cc:	48000400 	.word	0x48000400
 80015d0:	48000800 	.word	0x48000800
 80015d4:	48000c00 	.word	0x48000c00
 80015d8:	48001000 	.word	0x48001000
 80015dc:	40010400 	.word	0x40010400

080015e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	0008      	movs	r0, r1
 80015ea:	0011      	movs	r1, r2
 80015ec:	1cbb      	adds	r3, r7, #2
 80015ee:	1c02      	adds	r2, r0, #0
 80015f0:	801a      	strh	r2, [r3, #0]
 80015f2:	1c7b      	adds	r3, r7, #1
 80015f4:	1c0a      	adds	r2, r1, #0
 80015f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015f8:	1c7b      	adds	r3, r7, #1
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d004      	beq.n	800160a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001600:	1cbb      	adds	r3, r7, #2
 8001602:	881a      	ldrh	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001608:	e003      	b.n	8001612 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800160a:	1cbb      	adds	r3, r7, #2
 800160c:	881a      	ldrh	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	b002      	add	sp, #8
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d102      	bne.n	8001630 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	f000 fb76 	bl	8001d1c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2201      	movs	r2, #1
 8001636:	4013      	ands	r3, r2
 8001638:	d100      	bne.n	800163c <HAL_RCC_OscConfig+0x20>
 800163a:	e08e      	b.n	800175a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800163c:	4bc5      	ldr	r3, [pc, #788]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	220c      	movs	r2, #12
 8001642:	4013      	ands	r3, r2
 8001644:	2b04      	cmp	r3, #4
 8001646:	d00e      	beq.n	8001666 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001648:	4bc2      	ldr	r3, [pc, #776]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	220c      	movs	r2, #12
 800164e:	4013      	ands	r3, r2
 8001650:	2b08      	cmp	r3, #8
 8001652:	d117      	bne.n	8001684 <HAL_RCC_OscConfig+0x68>
 8001654:	4bbf      	ldr	r3, [pc, #764]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	23c0      	movs	r3, #192	; 0xc0
 800165a:	025b      	lsls	r3, r3, #9
 800165c:	401a      	ands	r2, r3
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	025b      	lsls	r3, r3, #9
 8001662:	429a      	cmp	r2, r3
 8001664:	d10e      	bne.n	8001684 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001666:	4bbb      	ldr	r3, [pc, #748]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	2380      	movs	r3, #128	; 0x80
 800166c:	029b      	lsls	r3, r3, #10
 800166e:	4013      	ands	r3, r2
 8001670:	d100      	bne.n	8001674 <HAL_RCC_OscConfig+0x58>
 8001672:	e071      	b.n	8001758 <HAL_RCC_OscConfig+0x13c>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d000      	beq.n	800167e <HAL_RCC_OscConfig+0x62>
 800167c:	e06c      	b.n	8001758 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	f000 fb4c 	bl	8001d1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d107      	bne.n	800169c <HAL_RCC_OscConfig+0x80>
 800168c:	4bb1      	ldr	r3, [pc, #708]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4bb0      	ldr	r3, [pc, #704]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	0249      	lsls	r1, r1, #9
 8001696:	430a      	orrs	r2, r1
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e02f      	b.n	80016fc <HAL_RCC_OscConfig+0xe0>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10c      	bne.n	80016be <HAL_RCC_OscConfig+0xa2>
 80016a4:	4bab      	ldr	r3, [pc, #684]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4baa      	ldr	r3, [pc, #680]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80016aa:	49ab      	ldr	r1, [pc, #684]	; (8001958 <HAL_RCC_OscConfig+0x33c>)
 80016ac:	400a      	ands	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	4ba8      	ldr	r3, [pc, #672]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4ba7      	ldr	r3, [pc, #668]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80016b6:	49a9      	ldr	r1, [pc, #676]	; (800195c <HAL_RCC_OscConfig+0x340>)
 80016b8:	400a      	ands	r2, r1
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	e01e      	b.n	80016fc <HAL_RCC_OscConfig+0xe0>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b05      	cmp	r3, #5
 80016c4:	d10e      	bne.n	80016e4 <HAL_RCC_OscConfig+0xc8>
 80016c6:	4ba3      	ldr	r3, [pc, #652]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4ba2      	ldr	r3, [pc, #648]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80016cc:	2180      	movs	r1, #128	; 0x80
 80016ce:	02c9      	lsls	r1, r1, #11
 80016d0:	430a      	orrs	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	4b9f      	ldr	r3, [pc, #636]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b9e      	ldr	r3, [pc, #632]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80016da:	2180      	movs	r1, #128	; 0x80
 80016dc:	0249      	lsls	r1, r1, #9
 80016de:	430a      	orrs	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	e00b      	b.n	80016fc <HAL_RCC_OscConfig+0xe0>
 80016e4:	4b9b      	ldr	r3, [pc, #620]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b9a      	ldr	r3, [pc, #616]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80016ea:	499b      	ldr	r1, [pc, #620]	; (8001958 <HAL_RCC_OscConfig+0x33c>)
 80016ec:	400a      	ands	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	4b98      	ldr	r3, [pc, #608]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b97      	ldr	r3, [pc, #604]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80016f6:	4999      	ldr	r1, [pc, #612]	; (800195c <HAL_RCC_OscConfig+0x340>)
 80016f8:	400a      	ands	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d014      	beq.n	800172e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fc0e 	bl	8000f24 <HAL_GetTick>
 8001708:	0003      	movs	r3, r0
 800170a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800170e:	f7ff fc09 	bl	8000f24 <HAL_GetTick>
 8001712:	0002      	movs	r2, r0
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b64      	cmp	r3, #100	; 0x64
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e2fd      	b.n	8001d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001720:	4b8c      	ldr	r3, [pc, #560]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	029b      	lsls	r3, r3, #10
 8001728:	4013      	ands	r3, r2
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0xf2>
 800172c:	e015      	b.n	800175a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172e:	f7ff fbf9 	bl	8000f24 <HAL_GetTick>
 8001732:	0003      	movs	r3, r0
 8001734:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001738:	f7ff fbf4 	bl	8000f24 <HAL_GetTick>
 800173c:	0002      	movs	r2, r0
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b64      	cmp	r3, #100	; 0x64
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e2e8      	b.n	8001d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174a:	4b82      	ldr	r3, [pc, #520]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	2380      	movs	r3, #128	; 0x80
 8001750:	029b      	lsls	r3, r3, #10
 8001752:	4013      	ands	r3, r2
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x11c>
 8001756:	e000      	b.n	800175a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001758:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2202      	movs	r2, #2
 8001760:	4013      	ands	r3, r2
 8001762:	d100      	bne.n	8001766 <HAL_RCC_OscConfig+0x14a>
 8001764:	e06c      	b.n	8001840 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001766:	4b7b      	ldr	r3, [pc, #492]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	220c      	movs	r2, #12
 800176c:	4013      	ands	r3, r2
 800176e:	d00e      	beq.n	800178e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001770:	4b78      	ldr	r3, [pc, #480]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	220c      	movs	r2, #12
 8001776:	4013      	ands	r3, r2
 8001778:	2b08      	cmp	r3, #8
 800177a:	d11f      	bne.n	80017bc <HAL_RCC_OscConfig+0x1a0>
 800177c:	4b75      	ldr	r3, [pc, #468]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	23c0      	movs	r3, #192	; 0xc0
 8001782:	025b      	lsls	r3, r3, #9
 8001784:	401a      	ands	r2, r3
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	429a      	cmp	r2, r3
 800178c:	d116      	bne.n	80017bc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178e:	4b71      	ldr	r3, [pc, #452]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2202      	movs	r2, #2
 8001794:	4013      	ands	r3, r2
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_OscConfig+0x188>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d001      	beq.n	80017a4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e2bb      	b.n	8001d1c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a4:	4b6b      	ldr	r3, [pc, #428]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	22f8      	movs	r2, #248	; 0xf8
 80017aa:	4393      	bics	r3, r2
 80017ac:	0019      	movs	r1, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	00da      	lsls	r2, r3, #3
 80017b4:	4b67      	ldr	r3, [pc, #412]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80017b6:	430a      	orrs	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ba:	e041      	b.n	8001840 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d024      	beq.n	800180e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c4:	4b63      	ldr	r3, [pc, #396]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4b62      	ldr	r3, [pc, #392]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80017ca:	2101      	movs	r1, #1
 80017cc:	430a      	orrs	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fba8 	bl	8000f24 <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017da:	f7ff fba3 	bl	8000f24 <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e297      	b.n	8001d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ec:	4b59      	ldr	r3, [pc, #356]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2202      	movs	r2, #2
 80017f2:	4013      	ands	r3, r2
 80017f4:	d0f1      	beq.n	80017da <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f6:	4b57      	ldr	r3, [pc, #348]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	22f8      	movs	r2, #248	; 0xf8
 80017fc:	4393      	bics	r3, r2
 80017fe:	0019      	movs	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	00da      	lsls	r2, r3, #3
 8001806:	4b53      	ldr	r3, [pc, #332]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 8001808:	430a      	orrs	r2, r1
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	e018      	b.n	8001840 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800180e:	4b51      	ldr	r3, [pc, #324]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4b50      	ldr	r3, [pc, #320]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 8001814:	2101      	movs	r1, #1
 8001816:	438a      	bics	r2, r1
 8001818:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7ff fb83 	bl	8000f24 <HAL_GetTick>
 800181e:	0003      	movs	r3, r0
 8001820:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001824:	f7ff fb7e 	bl	8000f24 <HAL_GetTick>
 8001828:	0002      	movs	r2, r0
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e272      	b.n	8001d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001836:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2202      	movs	r2, #2
 800183c:	4013      	ands	r3, r2
 800183e:	d1f1      	bne.n	8001824 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2208      	movs	r2, #8
 8001846:	4013      	ands	r3, r2
 8001848:	d036      	beq.n	80018b8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d019      	beq.n	8001886 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001852:	4b40      	ldr	r3, [pc, #256]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 8001854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001856:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 8001858:	2101      	movs	r1, #1
 800185a:	430a      	orrs	r2, r1
 800185c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185e:	f7ff fb61 	bl	8000f24 <HAL_GetTick>
 8001862:	0003      	movs	r3, r0
 8001864:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001868:	f7ff fb5c 	bl	8000f24 <HAL_GetTick>
 800186c:	0002      	movs	r2, r0
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e250      	b.n	8001d1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187a:	4b36      	ldr	r3, [pc, #216]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	2202      	movs	r2, #2
 8001880:	4013      	ands	r3, r2
 8001882:	d0f1      	beq.n	8001868 <HAL_RCC_OscConfig+0x24c>
 8001884:	e018      	b.n	80018b8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001886:	4b33      	ldr	r3, [pc, #204]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 8001888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188a:	4b32      	ldr	r3, [pc, #200]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 800188c:	2101      	movs	r1, #1
 800188e:	438a      	bics	r2, r1
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001892:	f7ff fb47 	bl	8000f24 <HAL_GetTick>
 8001896:	0003      	movs	r3, r0
 8001898:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800189c:	f7ff fb42 	bl	8000f24 <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e236      	b.n	8001d1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ae:	4b29      	ldr	r3, [pc, #164]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	2202      	movs	r2, #2
 80018b4:	4013      	ands	r3, r2
 80018b6:	d1f1      	bne.n	800189c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2204      	movs	r2, #4
 80018be:	4013      	ands	r3, r2
 80018c0:	d100      	bne.n	80018c4 <HAL_RCC_OscConfig+0x2a8>
 80018c2:	e0b5      	b.n	8001a30 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018c4:	201f      	movs	r0, #31
 80018c6:	183b      	adds	r3, r7, r0
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018cc:	4b21      	ldr	r3, [pc, #132]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80018ce:	69da      	ldr	r2, [r3, #28]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	055b      	lsls	r3, r3, #21
 80018d4:	4013      	ands	r3, r2
 80018d6:	d110      	bne.n	80018fa <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80018da:	69da      	ldr	r2, [r3, #28]
 80018dc:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80018de:	2180      	movs	r1, #128	; 0x80
 80018e0:	0549      	lsls	r1, r1, #21
 80018e2:	430a      	orrs	r2, r1
 80018e4:	61da      	str	r2, [r3, #28]
 80018e6:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 80018e8:	69da      	ldr	r2, [r3, #28]
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	055b      	lsls	r3, r3, #21
 80018ee:	4013      	ands	r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018f4:	183b      	adds	r3, r7, r0
 80018f6:	2201      	movs	r2, #1
 80018f8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fa:	4b19      	ldr	r3, [pc, #100]	; (8001960 <HAL_RCC_OscConfig+0x344>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	2380      	movs	r3, #128	; 0x80
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4013      	ands	r3, r2
 8001904:	d11a      	bne.n	800193c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001906:	4b16      	ldr	r3, [pc, #88]	; (8001960 <HAL_RCC_OscConfig+0x344>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_RCC_OscConfig+0x344>)
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	0049      	lsls	r1, r1, #1
 8001910:	430a      	orrs	r2, r1
 8001912:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001914:	f7ff fb06 	bl	8000f24 <HAL_GetTick>
 8001918:	0003      	movs	r3, r0
 800191a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800191e:	f7ff fb01 	bl	8000f24 <HAL_GetTick>
 8001922:	0002      	movs	r2, r0
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b64      	cmp	r3, #100	; 0x64
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e1f5      	b.n	8001d1c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001930:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_RCC_OscConfig+0x344>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4013      	ands	r3, r2
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d10f      	bne.n	8001964 <HAL_RCC_OscConfig+0x348>
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 8001946:	6a1a      	ldr	r2, [r3, #32]
 8001948:	4b02      	ldr	r3, [pc, #8]	; (8001954 <HAL_RCC_OscConfig+0x338>)
 800194a:	2101      	movs	r1, #1
 800194c:	430a      	orrs	r2, r1
 800194e:	621a      	str	r2, [r3, #32]
 8001950:	e036      	b.n	80019c0 <HAL_RCC_OscConfig+0x3a4>
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	40021000 	.word	0x40021000
 8001958:	fffeffff 	.word	0xfffeffff
 800195c:	fffbffff 	.word	0xfffbffff
 8001960:	40007000 	.word	0x40007000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10c      	bne.n	8001986 <HAL_RCC_OscConfig+0x36a>
 800196c:	4bca      	ldr	r3, [pc, #808]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 800196e:	6a1a      	ldr	r2, [r3, #32]
 8001970:	4bc9      	ldr	r3, [pc, #804]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001972:	2101      	movs	r1, #1
 8001974:	438a      	bics	r2, r1
 8001976:	621a      	str	r2, [r3, #32]
 8001978:	4bc7      	ldr	r3, [pc, #796]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 800197a:	6a1a      	ldr	r2, [r3, #32]
 800197c:	4bc6      	ldr	r3, [pc, #792]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 800197e:	2104      	movs	r1, #4
 8001980:	438a      	bics	r2, r1
 8001982:	621a      	str	r2, [r3, #32]
 8001984:	e01c      	b.n	80019c0 <HAL_RCC_OscConfig+0x3a4>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b05      	cmp	r3, #5
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x38c>
 800198e:	4bc2      	ldr	r3, [pc, #776]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001990:	6a1a      	ldr	r2, [r3, #32]
 8001992:	4bc1      	ldr	r3, [pc, #772]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001994:	2104      	movs	r1, #4
 8001996:	430a      	orrs	r2, r1
 8001998:	621a      	str	r2, [r3, #32]
 800199a:	4bbf      	ldr	r3, [pc, #764]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 800199c:	6a1a      	ldr	r2, [r3, #32]
 800199e:	4bbe      	ldr	r3, [pc, #760]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 80019a0:	2101      	movs	r1, #1
 80019a2:	430a      	orrs	r2, r1
 80019a4:	621a      	str	r2, [r3, #32]
 80019a6:	e00b      	b.n	80019c0 <HAL_RCC_OscConfig+0x3a4>
 80019a8:	4bbb      	ldr	r3, [pc, #748]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 80019aa:	6a1a      	ldr	r2, [r3, #32]
 80019ac:	4bba      	ldr	r3, [pc, #744]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 80019ae:	2101      	movs	r1, #1
 80019b0:	438a      	bics	r2, r1
 80019b2:	621a      	str	r2, [r3, #32]
 80019b4:	4bb8      	ldr	r3, [pc, #736]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 80019b6:	6a1a      	ldr	r2, [r3, #32]
 80019b8:	4bb7      	ldr	r3, [pc, #732]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 80019ba:	2104      	movs	r1, #4
 80019bc:	438a      	bics	r2, r1
 80019be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d014      	beq.n	80019f2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c8:	f7ff faac 	bl	8000f24 <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d0:	e009      	b.n	80019e6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d2:	f7ff faa7 	bl	8000f24 <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	4aaf      	ldr	r2, [pc, #700]	; (8001c9c <HAL_RCC_OscConfig+0x680>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e19a      	b.n	8001d1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e6:	4bac      	ldr	r3, [pc, #688]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	2202      	movs	r2, #2
 80019ec:	4013      	ands	r3, r2
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0x3b6>
 80019f0:	e013      	b.n	8001a1a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f2:	f7ff fa97 	bl	8000f24 <HAL_GetTick>
 80019f6:	0003      	movs	r3, r0
 80019f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fa:	e009      	b.n	8001a10 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019fc:	f7ff fa92 	bl	8000f24 <HAL_GetTick>
 8001a00:	0002      	movs	r2, r0
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	4aa5      	ldr	r2, [pc, #660]	; (8001c9c <HAL_RCC_OscConfig+0x680>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e185      	b.n	8001d1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a10:	4ba1      	ldr	r3, [pc, #644]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	2202      	movs	r2, #2
 8001a16:	4013      	ands	r3, r2
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a1a:	231f      	movs	r3, #31
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d105      	bne.n	8001a30 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a24:	4b9c      	ldr	r3, [pc, #624]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001a26:	69da      	ldr	r2, [r3, #28]
 8001a28:	4b9b      	ldr	r3, [pc, #620]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001a2a:	499d      	ldr	r1, [pc, #628]	; (8001ca0 <HAL_RCC_OscConfig+0x684>)
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2210      	movs	r2, #16
 8001a36:	4013      	ands	r3, r2
 8001a38:	d063      	beq.n	8001b02 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d12a      	bne.n	8001a98 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a42:	4b95      	ldr	r3, [pc, #596]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a46:	4b94      	ldr	r3, [pc, #592]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001a48:	2104      	movs	r1, #4
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a4e:	4b92      	ldr	r3, [pc, #584]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a52:	4b91      	ldr	r3, [pc, #580]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001a54:	2101      	movs	r1, #1
 8001a56:	430a      	orrs	r2, r1
 8001a58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fa63 	bl	8000f24 <HAL_GetTick>
 8001a5e:	0003      	movs	r3, r0
 8001a60:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a64:	f7ff fa5e 	bl	8000f24 <HAL_GetTick>
 8001a68:	0002      	movs	r2, r0
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e152      	b.n	8001d1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a76:	4b88      	ldr	r3, [pc, #544]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d0f1      	beq.n	8001a64 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a80:	4b85      	ldr	r3, [pc, #532]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a84:	22f8      	movs	r2, #248	; 0xf8
 8001a86:	4393      	bics	r3, r2
 8001a88:	0019      	movs	r1, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	00da      	lsls	r2, r3, #3
 8001a90:	4b81      	ldr	r3, [pc, #516]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001a92:	430a      	orrs	r2, r1
 8001a94:	635a      	str	r2, [r3, #52]	; 0x34
 8001a96:	e034      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	3305      	adds	r3, #5
 8001a9e:	d111      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001aa0:	4b7d      	ldr	r3, [pc, #500]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aa4:	4b7c      	ldr	r3, [pc, #496]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	438a      	bics	r2, r1
 8001aaa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001aac:	4b7a      	ldr	r3, [pc, #488]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab0:	22f8      	movs	r2, #248	; 0xf8
 8001ab2:	4393      	bics	r3, r2
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	00da      	lsls	r2, r3, #3
 8001abc:	4b76      	ldr	r3, [pc, #472]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ac2:	e01e      	b.n	8001b02 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ac4:	4b74      	ldr	r3, [pc, #464]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ac8:	4b73      	ldr	r3, [pc, #460]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001aca:	2104      	movs	r1, #4
 8001acc:	430a      	orrs	r2, r1
 8001ace:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001ad0:	4b71      	ldr	r3, [pc, #452]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ad4:	4b70      	ldr	r3, [pc, #448]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	438a      	bics	r2, r1
 8001ada:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001adc:	f7ff fa22 	bl	8000f24 <HAL_GetTick>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ae6:	f7ff fa1d 	bl	8000f24 <HAL_GetTick>
 8001aea:	0002      	movs	r2, r0
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e111      	b.n	8001d1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001af8:	4b67      	ldr	r3, [pc, #412]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afc:	2202      	movs	r2, #2
 8001afe:	4013      	ands	r3, r2
 8001b00:	d1f1      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2220      	movs	r2, #32
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d05c      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001b0c:	4b62      	ldr	r3, [pc, #392]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	220c      	movs	r2, #12
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b0c      	cmp	r3, #12
 8001b16:	d00e      	beq.n	8001b36 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001b18:	4b5f      	ldr	r3, [pc, #380]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	220c      	movs	r2, #12
 8001b1e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d114      	bne.n	8001b4e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001b24:	4b5c      	ldr	r3, [pc, #368]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	23c0      	movs	r3, #192	; 0xc0
 8001b2a:	025b      	lsls	r3, r3, #9
 8001b2c:	401a      	ands	r2, r3
 8001b2e:	23c0      	movs	r3, #192	; 0xc0
 8001b30:	025b      	lsls	r3, r3, #9
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d10b      	bne.n	8001b4e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001b36:	4b58      	ldr	r3, [pc, #352]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	029b      	lsls	r3, r3, #10
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d040      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x5a8>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d03c      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e0e6      	b.n	8001d1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d01b      	beq.n	8001b8e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001b56:	4b50      	ldr	r3, [pc, #320]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b5a:	4b4f      	ldr	r3, [pc, #316]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001b5c:	2180      	movs	r1, #128	; 0x80
 8001b5e:	0249      	lsls	r1, r1, #9
 8001b60:	430a      	orrs	r2, r1
 8001b62:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff f9de 	bl	8000f24 <HAL_GetTick>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b6e:	f7ff f9d9 	bl	8000f24 <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e0cd      	b.n	8001d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001b80:	4b45      	ldr	r3, [pc, #276]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001b82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	029b      	lsls	r3, r3, #10
 8001b88:	4013      	ands	r3, r2
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x552>
 8001b8c:	e01b      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001b8e:	4b42      	ldr	r3, [pc, #264]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b92:	4b41      	ldr	r3, [pc, #260]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001b94:	4943      	ldr	r1, [pc, #268]	; (8001ca4 <HAL_RCC_OscConfig+0x688>)
 8001b96:	400a      	ands	r2, r1
 8001b98:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9a:	f7ff f9c3 	bl	8000f24 <HAL_GetTick>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ba4:	f7ff f9be 	bl	8000f24 <HAL_GetTick>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e0b2      	b.n	8001d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001bb6:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	029b      	lsls	r3, r3, #10
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x588>
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001bc4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d100      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x5b4>
 8001bce:	e0a4      	b.n	8001d1a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd0:	4b31      	ldr	r3, [pc, #196]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	220c      	movs	r2, #12
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d100      	bne.n	8001bde <HAL_RCC_OscConfig+0x5c2>
 8001bdc:	e078      	b.n	8001cd0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d14c      	bne.n	8001c80 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be6:	4b2c      	ldr	r3, [pc, #176]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001bec:	492e      	ldr	r1, [pc, #184]	; (8001ca8 <HAL_RCC_OscConfig+0x68c>)
 8001bee:	400a      	ands	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7ff f997 	bl	8000f24 <HAL_GetTick>
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7ff f992 	bl	8000f24 <HAL_GetTick>
 8001c00:	0002      	movs	r2, r0
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e086      	b.n	8001d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0e:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	049b      	lsls	r3, r3, #18
 8001c16:	4013      	ands	r3, r2
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	220f      	movs	r2, #15
 8001c20:	4393      	bics	r3, r2
 8001c22:	0019      	movs	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4a1e      	ldr	r2, [pc, #120]	; (8001cac <HAL_RCC_OscConfig+0x690>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	0019      	movs	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	431a      	orrs	r2, r3
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001c44:	430a      	orrs	r2, r1
 8001c46:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	0449      	lsls	r1, r1, #17
 8001c52:	430a      	orrs	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7ff f965 	bl	8000f24 <HAL_GetTick>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c60:	f7ff f960 	bl	8000f24 <HAL_GetTick>
 8001c64:	0002      	movs	r2, r0
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e054      	b.n	8001d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	049b      	lsls	r3, r3, #18
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0x644>
 8001c7e:	e04c      	b.n	8001d1a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b04      	ldr	r3, [pc, #16]	; (8001c98 <HAL_RCC_OscConfig+0x67c>)
 8001c86:	4908      	ldr	r1, [pc, #32]	; (8001ca8 <HAL_RCC_OscConfig+0x68c>)
 8001c88:	400a      	ands	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f94a 	bl	8000f24 <HAL_GetTick>
 8001c90:	0003      	movs	r3, r0
 8001c92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c94:	e015      	b.n	8001cc2 <HAL_RCC_OscConfig+0x6a6>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	00001388 	.word	0x00001388
 8001ca0:	efffffff 	.word	0xefffffff
 8001ca4:	fffeffff 	.word	0xfffeffff
 8001ca8:	feffffff 	.word	0xfeffffff
 8001cac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb0:	f7ff f938 	bl	8000f24 <HAL_GetTick>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e02c      	b.n	8001d1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_RCC_OscConfig+0x708>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	049b      	lsls	r3, r3, #18
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x694>
 8001cce:	e024      	b.n	8001d1a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e01f      	b.n	8001d1c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <HAL_RCC_OscConfig+0x708>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_RCC_OscConfig+0x708>)
 8001ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	23c0      	movs	r3, #192	; 0xc0
 8001cec:	025b      	lsls	r3, r3, #9
 8001cee:	401a      	ands	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d10e      	bne.n	8001d16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	220f      	movs	r2, #15
 8001cfc:	401a      	ands	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d107      	bne.n	8001d16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	23f0      	movs	r3, #240	; 0xf0
 8001d0a:	039b      	lsls	r3, r3, #14
 8001d0c:	401a      	ands	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d001      	beq.n	8001d1a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b008      	add	sp, #32
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021000 	.word	0x40021000

08001d28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d101      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0bf      	b.n	8001ebc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b61      	ldr	r3, [pc, #388]	; (8001ec4 <HAL_RCC_ClockConfig+0x19c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2201      	movs	r2, #1
 8001d42:	4013      	ands	r3, r2
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d911      	bls.n	8001d6e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b5e      	ldr	r3, [pc, #376]	; (8001ec4 <HAL_RCC_ClockConfig+0x19c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4393      	bics	r3, r2
 8001d52:	0019      	movs	r1, r3
 8001d54:	4b5b      	ldr	r3, [pc, #364]	; (8001ec4 <HAL_RCC_ClockConfig+0x19c>)
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5c:	4b59      	ldr	r3, [pc, #356]	; (8001ec4 <HAL_RCC_ClockConfig+0x19c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2201      	movs	r2, #1
 8001d62:	4013      	ands	r3, r2
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e0a6      	b.n	8001ebc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2202      	movs	r2, #2
 8001d74:	4013      	ands	r3, r2
 8001d76:	d015      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d006      	beq.n	8001d90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d82:	4b51      	ldr	r3, [pc, #324]	; (8001ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	4b50      	ldr	r3, [pc, #320]	; (8001ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8001d88:	21e0      	movs	r1, #224	; 0xe0
 8001d8a:	00c9      	lsls	r1, r1, #3
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d90:	4b4d      	ldr	r3, [pc, #308]	; (8001ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	22f0      	movs	r2, #240	; 0xf0
 8001d96:	4393      	bics	r3, r2
 8001d98:	0019      	movs	r1, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	4b4a      	ldr	r3, [pc, #296]	; (8001ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8001da0:	430a      	orrs	r2, r1
 8001da2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2201      	movs	r2, #1
 8001daa:	4013      	ands	r3, r2
 8001dac:	d04c      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	2380      	movs	r3, #128	; 0x80
 8001dbc:	029b      	lsls	r3, r3, #10
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d120      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e07a      	b.n	8001ebc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dce:	4b3e      	ldr	r3, [pc, #248]	; (8001ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	2380      	movs	r3, #128	; 0x80
 8001dd4:	049b      	lsls	r3, r3, #18
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d114      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e06e      	b.n	8001ebc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001de6:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8001de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	029b      	lsls	r3, r3, #10
 8001dee:	4013      	ands	r3, r2
 8001df0:	d108      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e062      	b.n	8001ebc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df6:	4b34      	ldr	r3, [pc, #208]	; (8001ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e05b      	b.n	8001ebc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e04:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2203      	movs	r2, #3
 8001e0a:	4393      	bics	r3, r2
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8001e14:	430a      	orrs	r2, r1
 8001e16:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e18:	f7ff f884 	bl	8000f24 <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e20:	e009      	b.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e22:	f7ff f87f 	bl	8000f24 <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	4a27      	ldr	r2, [pc, #156]	; (8001ecc <HAL_RCC_ClockConfig+0x1a4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e042      	b.n	8001ebc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1ec      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <HAL_RCC_ClockConfig+0x19c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	4013      	ands	r3, r2
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d211      	bcs.n	8001e7a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_ClockConfig+0x19c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	4393      	bics	r3, r2
 8001e5e:	0019      	movs	r1, r3
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_ClockConfig+0x19c>)
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e68:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <HAL_RCC_ClockConfig+0x19c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4013      	ands	r3, r2
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d001      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e020      	b.n	8001ebc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2204      	movs	r2, #4
 8001e80:	4013      	ands	r3, r2
 8001e82:	d009      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	4a11      	ldr	r2, [pc, #68]	; (8001ed0 <HAL_RCC_ClockConfig+0x1a8>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8001e94:	430a      	orrs	r2, r1
 8001e96:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e98:	f000 f820 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001e9c:	0001      	movs	r1, r0
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_RCC_ClockConfig+0x1a0>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <HAL_RCC_ClockConfig+0x1ac>)
 8001eaa:	5cd3      	ldrb	r3, [r2, r3]
 8001eac:	000a      	movs	r2, r1
 8001eae:	40da      	lsrs	r2, r3
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_RCC_ClockConfig+0x1b0>)
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f7fe ffef 	bl	8000e98 <HAL_InitTick>
  
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b004      	add	sp, #16
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40022000 	.word	0x40022000
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	00001388 	.word	0x00001388
 8001ed0:	fffff8ff 	.word	0xfffff8ff
 8001ed4:	08003350 	.word	0x08003350
 8001ed8:	20000100 	.word	0x20000100

08001edc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001ef6:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	220c      	movs	r2, #12
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b0c      	cmp	r3, #12
 8001f04:	d046      	beq.n	8001f94 <HAL_RCC_GetSysClockFreq+0xb8>
 8001f06:	d848      	bhi.n	8001f9a <HAL_RCC_GetSysClockFreq+0xbe>
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d002      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x36>
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d003      	beq.n	8001f18 <HAL_RCC_GetSysClockFreq+0x3c>
 8001f10:	e043      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f12:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f14:	613b      	str	r3, [r7, #16]
      break;
 8001f16:	e043      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	0c9b      	lsrs	r3, r3, #18
 8001f1c:	220f      	movs	r2, #15
 8001f1e:	4013      	ands	r3, r2
 8001f20:	4a24      	ldr	r2, [pc, #144]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001f22:	5cd3      	ldrb	r3, [r2, r3]
 8001f24:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f26:	4b21      	ldr	r3, [pc, #132]	; (8001fac <HAL_RCC_GetSysClockFreq+0xd0>)
 8001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	4a22      	ldr	r2, [pc, #136]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001f30:	5cd3      	ldrb	r3, [r2, r3]
 8001f32:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	23c0      	movs	r3, #192	; 0xc0
 8001f38:	025b      	lsls	r3, r3, #9
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	025b      	lsls	r3, r3, #9
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d109      	bne.n	8001f58 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	481a      	ldr	r0, [pc, #104]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f48:	f7fe f8de 	bl	8000108 <__udivsi3>
 8001f4c:	0003      	movs	r3, r0
 8001f4e:	001a      	movs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4353      	muls	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	e01a      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	23c0      	movs	r3, #192	; 0xc0
 8001f5c:	025b      	lsls	r3, r3, #9
 8001f5e:	401a      	ands	r2, r3
 8001f60:	23c0      	movs	r3, #192	; 0xc0
 8001f62:	025b      	lsls	r3, r3, #9
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d109      	bne.n	8001f7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	4814      	ldr	r0, [pc, #80]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xe0>)
 8001f6c:	f7fe f8cc 	bl	8000108 <__udivsi3>
 8001f70:	0003      	movs	r3, r0
 8001f72:	001a      	movs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4353      	muls	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	480c      	ldr	r0, [pc, #48]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f80:	f7fe f8c2 	bl	8000108 <__udivsi3>
 8001f84:	0003      	movs	r3, r0
 8001f86:	001a      	movs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4353      	muls	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	613b      	str	r3, [r7, #16]
      break;
 8001f92:	e005      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xe0>)
 8001f96:	613b      	str	r3, [r7, #16]
      break;
 8001f98:	e002      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001f9c:	613b      	str	r3, [r7, #16]
      break;
 8001f9e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001fa0:	693b      	ldr	r3, [r7, #16]
}
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	b006      	add	sp, #24
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	007a1200 	.word	0x007a1200
 8001fb4:	08003368 	.word	0x08003368
 8001fb8:	08003378 	.word	0x08003378
 8001fbc:	02dc6c00 	.word	0x02dc6c00

08001fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc4:	4b02      	ldr	r3, [pc, #8]	; (8001fd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	0018      	movs	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	20000100 	.word	0x20000100

08001fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001fd8:	f7ff fff2 	bl	8001fc0 <HAL_RCC_GetHCLKFreq>
 8001fdc:	0001      	movs	r1, r0
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	0a1b      	lsrs	r3, r3, #8
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fea:	5cd3      	ldrb	r3, [r2, r3]
 8001fec:	40d9      	lsrs	r1, r3
 8001fee:	000b      	movs	r3, r1
}    
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	08003360 	.word	0x08003360

08002000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	025b      	lsls	r3, r3, #9
 8002018:	4013      	ands	r3, r2
 800201a:	d100      	bne.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800201c:	e08e      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800201e:	2017      	movs	r0, #23
 8002020:	183b      	adds	r3, r7, r0
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002026:	4b6e      	ldr	r3, [pc, #440]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002028:	69da      	ldr	r2, [r3, #28]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	055b      	lsls	r3, r3, #21
 800202e:	4013      	ands	r3, r2
 8002030:	d110      	bne.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	4b6b      	ldr	r3, [pc, #428]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002034:	69da      	ldr	r2, [r3, #28]
 8002036:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002038:	2180      	movs	r1, #128	; 0x80
 800203a:	0549      	lsls	r1, r1, #21
 800203c:	430a      	orrs	r2, r1
 800203e:	61da      	str	r2, [r3, #28]
 8002040:	4b67      	ldr	r3, [pc, #412]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002042:	69da      	ldr	r2, [r3, #28]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	055b      	lsls	r3, r3, #21
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800204e:	183b      	adds	r3, r7, r0
 8002050:	2201      	movs	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002054:	4b63      	ldr	r3, [pc, #396]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	4013      	ands	r3, r2
 800205e:	d11a      	bne.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002060:	4b60      	ldr	r3, [pc, #384]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b5f      	ldr	r3, [pc, #380]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002066:	2180      	movs	r1, #128	; 0x80
 8002068:	0049      	lsls	r1, r1, #1
 800206a:	430a      	orrs	r2, r1
 800206c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206e:	f7fe ff59 	bl	8000f24 <HAL_GetTick>
 8002072:	0003      	movs	r3, r0
 8002074:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002076:	e008      	b.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002078:	f7fe ff54 	bl	8000f24 <HAL_GetTick>
 800207c:	0002      	movs	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e0a6      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208a:	4b56      	ldr	r3, [pc, #344]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	2380      	movs	r3, #128	; 0x80
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4013      	ands	r3, r2
 8002094:	d0f0      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002096:	4b52      	ldr	r3, [pc, #328]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002098:	6a1a      	ldr	r2, [r3, #32]
 800209a:	23c0      	movs	r3, #192	; 0xc0
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4013      	ands	r3, r2
 80020a0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d034      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	23c0      	movs	r3, #192	; 0xc0
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4013      	ands	r3, r2
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d02c      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020b8:	4b49      	ldr	r3, [pc, #292]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	4a4a      	ldr	r2, [pc, #296]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80020be:	4013      	ands	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020c2:	4b47      	ldr	r3, [pc, #284]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020c4:	6a1a      	ldr	r2, [r3, #32]
 80020c6:	4b46      	ldr	r3, [pc, #280]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020c8:	2180      	movs	r1, #128	; 0x80
 80020ca:	0249      	lsls	r1, r1, #9
 80020cc:	430a      	orrs	r2, r1
 80020ce:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020d2:	6a1a      	ldr	r2, [r3, #32]
 80020d4:	4b42      	ldr	r3, [pc, #264]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020d6:	4945      	ldr	r1, [pc, #276]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80020d8:	400a      	ands	r2, r1
 80020da:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020dc:	4b40      	ldr	r3, [pc, #256]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2201      	movs	r2, #1
 80020e6:	4013      	ands	r3, r2
 80020e8:	d013      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7fe ff1b 	bl	8000f24 <HAL_GetTick>
 80020ee:	0003      	movs	r3, r0
 80020f0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f2:	e009      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f4:	f7fe ff16 	bl	8000f24 <HAL_GetTick>
 80020f8:	0002      	movs	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	4a3c      	ldr	r2, [pc, #240]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e067      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002108:	4b35      	ldr	r3, [pc, #212]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	2202      	movs	r2, #2
 800210e:	4013      	ands	r3, r2
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4a34      	ldr	r2, [pc, #208]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002118:	4013      	ands	r3, r2
 800211a:	0019      	movs	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	4b2f      	ldr	r3, [pc, #188]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002122:	430a      	orrs	r2, r1
 8002124:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002126:	2317      	movs	r3, #23
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002130:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002132:	69da      	ldr	r2, [r3, #28]
 8002134:	4b2a      	ldr	r3, [pc, #168]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002136:	492f      	ldr	r1, [pc, #188]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002138:	400a      	ands	r2, r1
 800213a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2201      	movs	r2, #1
 8002142:	4013      	ands	r3, r2
 8002144:	d009      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	2203      	movs	r2, #3
 800214c:	4393      	bics	r3, r2
 800214e:	0019      	movs	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	4b22      	ldr	r3, [pc, #136]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002156:	430a      	orrs	r2, r1
 8002158:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2202      	movs	r2, #2
 8002160:	4013      	ands	r3, r2
 8002162:	d009      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002164:	4b1e      	ldr	r3, [pc, #120]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	4a23      	ldr	r2, [pc, #140]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800216a:	4013      	ands	r3, r2
 800216c:	0019      	movs	r1, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002174:	430a      	orrs	r2, r1
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2220      	movs	r2, #32
 800217e:	4013      	ands	r3, r2
 8002180:	d009      	beq.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	2210      	movs	r2, #16
 8002188:	4393      	bics	r3, r2
 800218a:	0019      	movs	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002192:	430a      	orrs	r2, r1
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	029b      	lsls	r3, r3, #10
 800219e:	4013      	ands	r3, r2
 80021a0:	d009      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021a2:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	2280      	movs	r2, #128	; 0x80
 80021a8:	4393      	bics	r3, r2
 80021aa:	0019      	movs	r1, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	699a      	ldr	r2, [r3, #24]
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021b2:	430a      	orrs	r2, r1
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4013      	ands	r3, r2
 80021c0:	d009      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021c2:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	2240      	movs	r2, #64	; 0x40
 80021c8:	4393      	bics	r3, r2
 80021ca:	0019      	movs	r1, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	695a      	ldr	r2, [r3, #20]
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021d2:	430a      	orrs	r2, r1
 80021d4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	0018      	movs	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	b006      	add	sp, #24
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40007000 	.word	0x40007000
 80021e8:	fffffcff 	.word	0xfffffcff
 80021ec:	fffeffff 	.word	0xfffeffff
 80021f0:	00001388 	.word	0x00001388
 80021f4:	efffffff 	.word	0xefffffff
 80021f8:	fffcffff 	.word	0xfffcffff

080021fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e042      	b.n	8002294 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	223d      	movs	r2, #61	; 0x3d
 8002212:	5c9b      	ldrb	r3, [r3, r2]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d107      	bne.n	800222a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	223c      	movs	r2, #60	; 0x3c
 800221e:	2100      	movs	r1, #0
 8002220:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	0018      	movs	r0, r3
 8002226:	f7fe fd49 	bl	8000cbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	223d      	movs	r2, #61	; 0x3d
 800222e:	2102      	movs	r1, #2
 8002230:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3304      	adds	r3, #4
 800223a:	0019      	movs	r1, r3
 800223c:	0010      	movs	r0, r2
 800223e:	f000 fab7 	bl	80027b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2246      	movs	r2, #70	; 0x46
 8002246:	2101      	movs	r1, #1
 8002248:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	223e      	movs	r2, #62	; 0x3e
 800224e:	2101      	movs	r1, #1
 8002250:	5499      	strb	r1, [r3, r2]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	223f      	movs	r2, #63	; 0x3f
 8002256:	2101      	movs	r1, #1
 8002258:	5499      	strb	r1, [r3, r2]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2240      	movs	r2, #64	; 0x40
 800225e:	2101      	movs	r1, #1
 8002260:	5499      	strb	r1, [r3, r2]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2241      	movs	r2, #65	; 0x41
 8002266:	2101      	movs	r1, #1
 8002268:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2242      	movs	r2, #66	; 0x42
 800226e:	2101      	movs	r1, #1
 8002270:	5499      	strb	r1, [r3, r2]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2243      	movs	r2, #67	; 0x43
 8002276:	2101      	movs	r1, #1
 8002278:	5499      	strb	r1, [r3, r2]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2244      	movs	r2, #68	; 0x44
 800227e:	2101      	movs	r1, #1
 8002280:	5499      	strb	r1, [r3, r2]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2245      	movs	r2, #69	; 0x45
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	223d      	movs	r2, #61	; 0x3d
 800228e:	2101      	movs	r1, #1
 8002290:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	b002      	add	sp, #8
 800229a:	bd80      	pop	{r7, pc}

0800229c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	223d      	movs	r2, #61	; 0x3d
 80022a8:	5c9b      	ldrb	r3, [r3, r2]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d001      	beq.n	80022b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e03b      	b.n	800232c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	223d      	movs	r2, #61	; 0x3d
 80022b8:	2102      	movs	r1, #2
 80022ba:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2101      	movs	r1, #1
 80022c8:	430a      	orrs	r2, r1
 80022ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a18      	ldr	r2, [pc, #96]	; (8002334 <HAL_TIM_Base_Start_IT+0x98>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00f      	beq.n	80022f6 <HAL_TIM_Base_Start_IT+0x5a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	05db      	lsls	r3, r3, #23
 80022de:	429a      	cmp	r2, r3
 80022e0:	d009      	beq.n	80022f6 <HAL_TIM_Base_Start_IT+0x5a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a14      	ldr	r2, [pc, #80]	; (8002338 <HAL_TIM_Base_Start_IT+0x9c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d004      	beq.n	80022f6 <HAL_TIM_Base_Start_IT+0x5a>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a12      	ldr	r2, [pc, #72]	; (800233c <HAL_TIM_Base_Start_IT+0xa0>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d111      	bne.n	800231a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2207      	movs	r2, #7
 80022fe:	4013      	ands	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b06      	cmp	r3, #6
 8002306:	d010      	beq.n	800232a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2101      	movs	r1, #1
 8002314:	430a      	orrs	r2, r1
 8002316:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002318:	e007      	b.n	800232a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2101      	movs	r1, #1
 8002326:	430a      	orrs	r2, r1
 8002328:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	b004      	add	sp, #16
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40012c00 	.word	0x40012c00
 8002338:	40000400 	.word	0x40000400
 800233c:	40014000 	.word	0x40014000

08002340 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2101      	movs	r1, #1
 8002354:	438a      	bics	r2, r1
 8002356:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	4a0d      	ldr	r2, [pc, #52]	; (8002394 <HAL_TIM_Base_Stop_IT+0x54>)
 8002360:	4013      	ands	r3, r2
 8002362:	d10d      	bne.n	8002380 <HAL_TIM_Base_Stop_IT+0x40>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <HAL_TIM_Base_Stop_IT+0x58>)
 800236c:	4013      	ands	r3, r2
 800236e:	d107      	bne.n	8002380 <HAL_TIM_Base_Stop_IT+0x40>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2101      	movs	r1, #1
 800237c:	438a      	bics	r2, r1
 800237e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	223d      	movs	r2, #61	; 0x3d
 8002384:	2101      	movs	r1, #1
 8002386:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	0018      	movs	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	b002      	add	sp, #8
 8002390:	bd80      	pop	{r7, pc}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	00001111 	.word	0x00001111
 8002398:	00000444 	.word	0x00000444

0800239c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2202      	movs	r2, #2
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d124      	bne.n	80023fc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2202      	movs	r2, #2
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d11d      	bne.n	80023fc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2203      	movs	r2, #3
 80023c6:	4252      	negs	r2, r2
 80023c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2203      	movs	r2, #3
 80023d8:	4013      	ands	r3, r2
 80023da:	d004      	beq.n	80023e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	0018      	movs	r0, r3
 80023e0:	f000 f9ce 	bl	8002780 <HAL_TIM_IC_CaptureCallback>
 80023e4:	e007      	b.n	80023f6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	0018      	movs	r0, r3
 80023ea:	f000 f9c1 	bl	8002770 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	0018      	movs	r0, r3
 80023f2:	f000 f9cd 	bl	8002790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2204      	movs	r2, #4
 8002404:	4013      	ands	r3, r2
 8002406:	2b04      	cmp	r3, #4
 8002408:	d125      	bne.n	8002456 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	2204      	movs	r2, #4
 8002412:	4013      	ands	r3, r2
 8002414:	2b04      	cmp	r3, #4
 8002416:	d11e      	bne.n	8002456 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2205      	movs	r2, #5
 800241e:	4252      	negs	r2, r2
 8002420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2202      	movs	r2, #2
 8002426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699a      	ldr	r2, [r3, #24]
 800242e:	23c0      	movs	r3, #192	; 0xc0
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4013      	ands	r3, r2
 8002434:	d004      	beq.n	8002440 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	0018      	movs	r0, r3
 800243a:	f000 f9a1 	bl	8002780 <HAL_TIM_IC_CaptureCallback>
 800243e:	e007      	b.n	8002450 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	0018      	movs	r0, r3
 8002444:	f000 f994 	bl	8002770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	0018      	movs	r0, r3
 800244c:	f000 f9a0 	bl	8002790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2208      	movs	r2, #8
 800245e:	4013      	ands	r3, r2
 8002460:	2b08      	cmp	r3, #8
 8002462:	d124      	bne.n	80024ae <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2208      	movs	r2, #8
 800246c:	4013      	ands	r3, r2
 800246e:	2b08      	cmp	r3, #8
 8002470:	d11d      	bne.n	80024ae <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2209      	movs	r2, #9
 8002478:	4252      	negs	r2, r2
 800247a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2204      	movs	r2, #4
 8002480:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	2203      	movs	r2, #3
 800248a:	4013      	ands	r3, r2
 800248c:	d004      	beq.n	8002498 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	0018      	movs	r0, r3
 8002492:	f000 f975 	bl	8002780 <HAL_TIM_IC_CaptureCallback>
 8002496:	e007      	b.n	80024a8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	0018      	movs	r0, r3
 800249c:	f000 f968 	bl	8002770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 f974 	bl	8002790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	2210      	movs	r2, #16
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b10      	cmp	r3, #16
 80024ba:	d125      	bne.n	8002508 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	2210      	movs	r2, #16
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	d11e      	bne.n	8002508 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2211      	movs	r2, #17
 80024d0:	4252      	negs	r2, r2
 80024d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2208      	movs	r2, #8
 80024d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69da      	ldr	r2, [r3, #28]
 80024e0:	23c0      	movs	r3, #192	; 0xc0
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4013      	ands	r3, r2
 80024e6:	d004      	beq.n	80024f2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	0018      	movs	r0, r3
 80024ec:	f000 f948 	bl	8002780 <HAL_TIM_IC_CaptureCallback>
 80024f0:	e007      	b.n	8002502 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	0018      	movs	r0, r3
 80024f6:	f000 f93b 	bl	8002770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	0018      	movs	r0, r3
 80024fe:	f000 f947 	bl	8002790 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	2201      	movs	r2, #1
 8002510:	4013      	ands	r3, r2
 8002512:	2b01      	cmp	r3, #1
 8002514:	d10f      	bne.n	8002536 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	4013      	ands	r3, r2
 8002520:	2b01      	cmp	r3, #1
 8002522:	d108      	bne.n	8002536 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2202      	movs	r2, #2
 800252a:	4252      	negs	r2, r2
 800252c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f7fe f94d 	bl	80007d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	2280      	movs	r2, #128	; 0x80
 800253e:	4013      	ands	r3, r2
 8002540:	2b80      	cmp	r3, #128	; 0x80
 8002542:	d10f      	bne.n	8002564 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2280      	movs	r2, #128	; 0x80
 800254c:	4013      	ands	r3, r2
 800254e:	2b80      	cmp	r3, #128	; 0x80
 8002550:	d108      	bne.n	8002564 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2281      	movs	r2, #129	; 0x81
 8002558:	4252      	negs	r2, r2
 800255a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	0018      	movs	r0, r3
 8002560:	f000 faa6 	bl	8002ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2240      	movs	r2, #64	; 0x40
 800256c:	4013      	ands	r3, r2
 800256e:	2b40      	cmp	r3, #64	; 0x40
 8002570:	d10f      	bne.n	8002592 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2240      	movs	r2, #64	; 0x40
 800257a:	4013      	ands	r3, r2
 800257c:	2b40      	cmp	r3, #64	; 0x40
 800257e:	d108      	bne.n	8002592 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2241      	movs	r2, #65	; 0x41
 8002586:	4252      	negs	r2, r2
 8002588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	0018      	movs	r0, r3
 800258e:	f000 f907 	bl	80027a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	2220      	movs	r2, #32
 800259a:	4013      	ands	r3, r2
 800259c:	2b20      	cmp	r3, #32
 800259e:	d10f      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2220      	movs	r2, #32
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b20      	cmp	r3, #32
 80025ac:	d108      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2221      	movs	r2, #33	; 0x21
 80025b4:	4252      	negs	r2, r2
 80025b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	0018      	movs	r0, r3
 80025bc:	f000 fa70 	bl	8002aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b002      	add	sp, #8
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025d2:	230f      	movs	r3, #15
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	223c      	movs	r2, #60	; 0x3c
 80025de:	5c9b      	ldrb	r3, [r3, r2]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d101      	bne.n	80025e8 <HAL_TIM_ConfigClockSource+0x20>
 80025e4:	2302      	movs	r3, #2
 80025e6:	e0bc      	b.n	8002762 <HAL_TIM_ConfigClockSource+0x19a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	223c      	movs	r2, #60	; 0x3c
 80025ec:	2101      	movs	r1, #1
 80025ee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	223d      	movs	r2, #61	; 0x3d
 80025f4:	2102      	movs	r1, #2
 80025f6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2277      	movs	r2, #119	; 0x77
 8002604:	4393      	bics	r3, r2
 8002606:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	4a58      	ldr	r2, [pc, #352]	; (800276c <HAL_TIM_ConfigClockSource+0x1a4>)
 800260c:	4013      	ands	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2280      	movs	r2, #128	; 0x80
 800261e:	0192      	lsls	r2, r2, #6
 8002620:	4293      	cmp	r3, r2
 8002622:	d040      	beq.n	80026a6 <HAL_TIM_ConfigClockSource+0xde>
 8002624:	2280      	movs	r2, #128	; 0x80
 8002626:	0192      	lsls	r2, r2, #6
 8002628:	4293      	cmp	r3, r2
 800262a:	d900      	bls.n	800262e <HAL_TIM_ConfigClockSource+0x66>
 800262c:	e088      	b.n	8002740 <HAL_TIM_ConfigClockSource+0x178>
 800262e:	2280      	movs	r2, #128	; 0x80
 8002630:	0152      	lsls	r2, r2, #5
 8002632:	4293      	cmp	r3, r2
 8002634:	d100      	bne.n	8002638 <HAL_TIM_ConfigClockSource+0x70>
 8002636:	e088      	b.n	800274a <HAL_TIM_ConfigClockSource+0x182>
 8002638:	2280      	movs	r2, #128	; 0x80
 800263a:	0152      	lsls	r2, r2, #5
 800263c:	4293      	cmp	r3, r2
 800263e:	d900      	bls.n	8002642 <HAL_TIM_ConfigClockSource+0x7a>
 8002640:	e07e      	b.n	8002740 <HAL_TIM_ConfigClockSource+0x178>
 8002642:	2b70      	cmp	r3, #112	; 0x70
 8002644:	d018      	beq.n	8002678 <HAL_TIM_ConfigClockSource+0xb0>
 8002646:	d900      	bls.n	800264a <HAL_TIM_ConfigClockSource+0x82>
 8002648:	e07a      	b.n	8002740 <HAL_TIM_ConfigClockSource+0x178>
 800264a:	2b60      	cmp	r3, #96	; 0x60
 800264c:	d04f      	beq.n	80026ee <HAL_TIM_ConfigClockSource+0x126>
 800264e:	d900      	bls.n	8002652 <HAL_TIM_ConfigClockSource+0x8a>
 8002650:	e076      	b.n	8002740 <HAL_TIM_ConfigClockSource+0x178>
 8002652:	2b50      	cmp	r3, #80	; 0x50
 8002654:	d03b      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0x106>
 8002656:	d900      	bls.n	800265a <HAL_TIM_ConfigClockSource+0x92>
 8002658:	e072      	b.n	8002740 <HAL_TIM_ConfigClockSource+0x178>
 800265a:	2b40      	cmp	r3, #64	; 0x40
 800265c:	d057      	beq.n	800270e <HAL_TIM_ConfigClockSource+0x146>
 800265e:	d900      	bls.n	8002662 <HAL_TIM_ConfigClockSource+0x9a>
 8002660:	e06e      	b.n	8002740 <HAL_TIM_ConfigClockSource+0x178>
 8002662:	2b30      	cmp	r3, #48	; 0x30
 8002664:	d063      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x166>
 8002666:	d86b      	bhi.n	8002740 <HAL_TIM_ConfigClockSource+0x178>
 8002668:	2b20      	cmp	r3, #32
 800266a:	d060      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x166>
 800266c:	d868      	bhi.n	8002740 <HAL_TIM_ConfigClockSource+0x178>
 800266e:	2b00      	cmp	r3, #0
 8002670:	d05d      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x166>
 8002672:	2b10      	cmp	r3, #16
 8002674:	d05b      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x166>
 8002676:	e063      	b.n	8002740 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002688:	f000 f98c 	bl	80029a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2277      	movs	r2, #119	; 0x77
 8002698:	4313      	orrs	r3, r2
 800269a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	609a      	str	r2, [r3, #8]
      break;
 80026a4:	e052      	b.n	800274c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026b6:	f000 f975 	bl	80029a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2180      	movs	r1, #128	; 0x80
 80026c6:	01c9      	lsls	r1, r1, #7
 80026c8:	430a      	orrs	r2, r1
 80026ca:	609a      	str	r2, [r3, #8]
      break;
 80026cc:	e03e      	b.n	800274c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026da:	001a      	movs	r2, r3
 80026dc:	f000 f8e8 	bl	80028b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2150      	movs	r1, #80	; 0x50
 80026e6:	0018      	movs	r0, r3
 80026e8:	f000 f942 	bl	8002970 <TIM_ITRx_SetConfig>
      break;
 80026ec:	e02e      	b.n	800274c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026fa:	001a      	movs	r2, r3
 80026fc:	f000 f906 	bl	800290c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2160      	movs	r1, #96	; 0x60
 8002706:	0018      	movs	r0, r3
 8002708:	f000 f932 	bl	8002970 <TIM_ITRx_SetConfig>
      break;
 800270c:	e01e      	b.n	800274c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800271a:	001a      	movs	r2, r3
 800271c:	f000 f8c8 	bl	80028b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2140      	movs	r1, #64	; 0x40
 8002726:	0018      	movs	r0, r3
 8002728:	f000 f922 	bl	8002970 <TIM_ITRx_SetConfig>
      break;
 800272c:	e00e      	b.n	800274c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	0019      	movs	r1, r3
 8002738:	0010      	movs	r0, r2
 800273a:	f000 f919 	bl	8002970 <TIM_ITRx_SetConfig>
      break;
 800273e:	e005      	b.n	800274c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002740:	230f      	movs	r3, #15
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	2201      	movs	r2, #1
 8002746:	701a      	strb	r2, [r3, #0]
      break;
 8002748:	e000      	b.n	800274c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800274a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	223d      	movs	r2, #61	; 0x3d
 8002750:	2101      	movs	r1, #1
 8002752:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	223c      	movs	r2, #60	; 0x3c
 8002758:	2100      	movs	r1, #0
 800275a:	5499      	strb	r1, [r3, r2]

  return status;
 800275c:	230f      	movs	r3, #15
 800275e:	18fb      	adds	r3, r7, r3
 8002760:	781b      	ldrb	r3, [r3, #0]
}
 8002762:	0018      	movs	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	b004      	add	sp, #16
 8002768:	bd80      	pop	{r7, pc}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	ffff00ff 	.word	0xffff00ff

08002770 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b002      	add	sp, #8
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002788:	46c0      	nop			; (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	b002      	add	sp, #8
 800278e:	bd80      	pop	{r7, pc}

08002790 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002798:	46c0      	nop			; (mov r8, r8)
 800279a:	46bd      	mov	sp, r7
 800279c:	b002      	add	sp, #8
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b002      	add	sp, #8
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a34      	ldr	r2, [pc, #208]	; (8002894 <TIM_Base_SetConfig+0xe4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d008      	beq.n	80027da <TIM_Base_SetConfig+0x2a>
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	05db      	lsls	r3, r3, #23
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d003      	beq.n	80027da <TIM_Base_SetConfig+0x2a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a30      	ldr	r2, [pc, #192]	; (8002898 <TIM_Base_SetConfig+0xe8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d108      	bne.n	80027ec <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2270      	movs	r2, #112	; 0x70
 80027de:	4393      	bics	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a29      	ldr	r2, [pc, #164]	; (8002894 <TIM_Base_SetConfig+0xe4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d018      	beq.n	8002826 <TIM_Base_SetConfig+0x76>
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	05db      	lsls	r3, r3, #23
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d013      	beq.n	8002826 <TIM_Base_SetConfig+0x76>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a25      	ldr	r2, [pc, #148]	; (8002898 <TIM_Base_SetConfig+0xe8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d00f      	beq.n	8002826 <TIM_Base_SetConfig+0x76>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a24      	ldr	r2, [pc, #144]	; (800289c <TIM_Base_SetConfig+0xec>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d00b      	beq.n	8002826 <TIM_Base_SetConfig+0x76>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a23      	ldr	r2, [pc, #140]	; (80028a0 <TIM_Base_SetConfig+0xf0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d007      	beq.n	8002826 <TIM_Base_SetConfig+0x76>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a22      	ldr	r2, [pc, #136]	; (80028a4 <TIM_Base_SetConfig+0xf4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d003      	beq.n	8002826 <TIM_Base_SetConfig+0x76>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a21      	ldr	r2, [pc, #132]	; (80028a8 <TIM_Base_SetConfig+0xf8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d108      	bne.n	8002838 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4a20      	ldr	r2, [pc, #128]	; (80028ac <TIM_Base_SetConfig+0xfc>)
 800282a:	4013      	ands	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2280      	movs	r2, #128	; 0x80
 800283c:	4393      	bics	r3, r2
 800283e:	001a      	movs	r2, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a0c      	ldr	r2, [pc, #48]	; (8002894 <TIM_Base_SetConfig+0xe4>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00b      	beq.n	800287e <TIM_Base_SetConfig+0xce>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a0d      	ldr	r2, [pc, #52]	; (80028a0 <TIM_Base_SetConfig+0xf0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <TIM_Base_SetConfig+0xce>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a0c      	ldr	r2, [pc, #48]	; (80028a4 <TIM_Base_SetConfig+0xf4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d003      	beq.n	800287e <TIM_Base_SetConfig+0xce>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a0b      	ldr	r2, [pc, #44]	; (80028a8 <TIM_Base_SetConfig+0xf8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d103      	bne.n	8002886 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	615a      	str	r2, [r3, #20]
}
 800288c:	46c0      	nop			; (mov r8, r8)
 800288e:	46bd      	mov	sp, r7
 8002890:	b004      	add	sp, #16
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40012c00 	.word	0x40012c00
 8002898:	40000400 	.word	0x40000400
 800289c:	40002000 	.word	0x40002000
 80028a0:	40014000 	.word	0x40014000
 80028a4:	40014400 	.word	0x40014400
 80028a8:	40014800 	.word	0x40014800
 80028ac:	fffffcff 	.word	0xfffffcff

080028b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	2201      	movs	r2, #1
 80028c8:	4393      	bics	r3, r2
 80028ca:	001a      	movs	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	22f0      	movs	r2, #240	; 0xf0
 80028da:	4393      	bics	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	220a      	movs	r2, #10
 80028ec:	4393      	bics	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	621a      	str	r2, [r3, #32]
}
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	b006      	add	sp, #24
 800290a:	bd80      	pop	{r7, pc}

0800290c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	2210      	movs	r2, #16
 800291e:	4393      	bics	r3, r2
 8002920:	001a      	movs	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	4a0d      	ldr	r2, [pc, #52]	; (800296c <TIM_TI2_ConfigInputStage+0x60>)
 8002936:	4013      	ands	r3, r2
 8002938:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	031b      	lsls	r3, r3, #12
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	22a0      	movs	r2, #160	; 0xa0
 8002948:	4393      	bics	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	621a      	str	r2, [r3, #32]
}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	b006      	add	sp, #24
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	ffff0fff 	.word	0xffff0fff

08002970 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2270      	movs	r2, #112	; 0x70
 8002984:	4393      	bics	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	2207      	movs	r2, #7
 8002990:	4313      	orrs	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	609a      	str	r2, [r3, #8]
}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	46bd      	mov	sp, r7
 800299e:	b004      	add	sp, #16
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <TIM_ETR_SetConfig+0x3c>)
 80029bc:	4013      	ands	r3, r2
 80029be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	021a      	lsls	r2, r3, #8
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	431a      	orrs	r2, r3
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	609a      	str	r2, [r3, #8]
}
 80029d8:	46c0      	nop			; (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	b006      	add	sp, #24
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	ffff00ff 	.word	0xffff00ff

080029e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	223c      	movs	r2, #60	; 0x3c
 80029f2:	5c9b      	ldrb	r3, [r3, r2]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e047      	b.n	8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	223c      	movs	r2, #60	; 0x3c
 8002a00:	2101      	movs	r1, #1
 8002a02:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	223d      	movs	r2, #61	; 0x3d
 8002a08:	2102      	movs	r1, #2
 8002a0a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2270      	movs	r2, #112	; 0x70
 8002a20:	4393      	bics	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a16      	ldr	r2, [pc, #88]	; (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00f      	beq.n	8002a60 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	05db      	lsls	r3, r3, #23
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d009      	beq.n	8002a60 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a11      	ldr	r2, [pc, #68]	; (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d004      	beq.n	8002a60 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a10      	ldr	r2, [pc, #64]	; (8002a9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d10c      	bne.n	8002a7a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2280      	movs	r2, #128	; 0x80
 8002a64:	4393      	bics	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	223d      	movs	r2, #61	; 0x3d
 8002a7e:	2101      	movs	r1, #1
 8002a80:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	223c      	movs	r2, #60	; 0x3c
 8002a86:	2100      	movs	r1, #0
 8002a88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b004      	add	sp, #16
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	40000400 	.word	0x40000400
 8002a9c:	40014000 	.word	0x40014000

08002aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002aa8:	46c0      	nop			; (mov r8, r8)
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b002      	add	sp, #8
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b002      	add	sp, #8
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e044      	b.n	8002b5c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d107      	bne.n	8002aea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2278      	movs	r2, #120	; 0x78
 8002ade:	2100      	movs	r1, #0
 8002ae0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f7fe f921 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2224      	movs	r2, #36	; 0x24
 8002aee:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2101      	movs	r1, #1
 8002afc:	438a      	bics	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	0018      	movs	r0, r3
 8002b04:	f000 f830 	bl	8002b68 <UART_SetConfig>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e024      	b.n	8002b5c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f000 f9ab 	bl	8002e78 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	490d      	ldr	r1, [pc, #52]	; (8002b64 <HAL_UART_Init+0xa4>)
 8002b2e:	400a      	ands	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	212a      	movs	r1, #42	; 0x2a
 8002b3e:	438a      	bics	r2, r1
 8002b40:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	0018      	movs	r0, r3
 8002b56:	f000 fa43 	bl	8002fe0 <UART_CheckIdleState>
 8002b5a:	0003      	movs	r3, r0
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	b002      	add	sp, #8
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	ffffb7ff 	.word	0xffffb7ff

08002b68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b70:	231e      	movs	r3, #30
 8002b72:	18fb      	adds	r3, r7, r3
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4aaf      	ldr	r2, [pc, #700]	; (8002e54 <UART_SetConfig+0x2ec>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4aaa      	ldr	r2, [pc, #680]	; (8002e58 <UART_SetConfig+0x2f0>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4aa1      	ldr	r2, [pc, #644]	; (8002e5c <UART_SetConfig+0x2f4>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a9d      	ldr	r2, [pc, #628]	; (8002e60 <UART_SetConfig+0x2f8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d127      	bne.n	8002c3e <UART_SetConfig+0xd6>
 8002bee:	4b9d      	ldr	r3, [pc, #628]	; (8002e64 <UART_SetConfig+0x2fc>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	2203      	movs	r2, #3
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d00d      	beq.n	8002c16 <UART_SetConfig+0xae>
 8002bfa:	d81b      	bhi.n	8002c34 <UART_SetConfig+0xcc>
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d014      	beq.n	8002c2a <UART_SetConfig+0xc2>
 8002c00:	d818      	bhi.n	8002c34 <UART_SetConfig+0xcc>
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <UART_SetConfig+0xa4>
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d00a      	beq.n	8002c20 <UART_SetConfig+0xb8>
 8002c0a:	e013      	b.n	8002c34 <UART_SetConfig+0xcc>
 8002c0c:	231f      	movs	r3, #31
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	e065      	b.n	8002ce2 <UART_SetConfig+0x17a>
 8002c16:	231f      	movs	r3, #31
 8002c18:	18fb      	adds	r3, r7, r3
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	701a      	strb	r2, [r3, #0]
 8002c1e:	e060      	b.n	8002ce2 <UART_SetConfig+0x17a>
 8002c20:	231f      	movs	r3, #31
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	2204      	movs	r2, #4
 8002c26:	701a      	strb	r2, [r3, #0]
 8002c28:	e05b      	b.n	8002ce2 <UART_SetConfig+0x17a>
 8002c2a:	231f      	movs	r3, #31
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	2208      	movs	r2, #8
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	e056      	b.n	8002ce2 <UART_SetConfig+0x17a>
 8002c34:	231f      	movs	r3, #31
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	2210      	movs	r2, #16
 8002c3a:	701a      	strb	r2, [r3, #0]
 8002c3c:	e051      	b.n	8002ce2 <UART_SetConfig+0x17a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a89      	ldr	r2, [pc, #548]	; (8002e68 <UART_SetConfig+0x300>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d134      	bne.n	8002cb2 <UART_SetConfig+0x14a>
 8002c48:	4b86      	ldr	r3, [pc, #536]	; (8002e64 <UART_SetConfig+0x2fc>)
 8002c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c4c:	23c0      	movs	r3, #192	; 0xc0
 8002c4e:	029b      	lsls	r3, r3, #10
 8002c50:	4013      	ands	r3, r2
 8002c52:	22c0      	movs	r2, #192	; 0xc0
 8002c54:	0292      	lsls	r2, r2, #10
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d017      	beq.n	8002c8a <UART_SetConfig+0x122>
 8002c5a:	22c0      	movs	r2, #192	; 0xc0
 8002c5c:	0292      	lsls	r2, r2, #10
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d822      	bhi.n	8002ca8 <UART_SetConfig+0x140>
 8002c62:	2280      	movs	r2, #128	; 0x80
 8002c64:	0292      	lsls	r2, r2, #10
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d019      	beq.n	8002c9e <UART_SetConfig+0x136>
 8002c6a:	2280      	movs	r2, #128	; 0x80
 8002c6c:	0292      	lsls	r2, r2, #10
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d81a      	bhi.n	8002ca8 <UART_SetConfig+0x140>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d004      	beq.n	8002c80 <UART_SetConfig+0x118>
 8002c76:	2280      	movs	r2, #128	; 0x80
 8002c78:	0252      	lsls	r2, r2, #9
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00a      	beq.n	8002c94 <UART_SetConfig+0x12c>
 8002c7e:	e013      	b.n	8002ca8 <UART_SetConfig+0x140>
 8002c80:	231f      	movs	r3, #31
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	e02b      	b.n	8002ce2 <UART_SetConfig+0x17a>
 8002c8a:	231f      	movs	r3, #31
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	2202      	movs	r2, #2
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	e026      	b.n	8002ce2 <UART_SetConfig+0x17a>
 8002c94:	231f      	movs	r3, #31
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	2204      	movs	r2, #4
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	e021      	b.n	8002ce2 <UART_SetConfig+0x17a>
 8002c9e:	231f      	movs	r3, #31
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	2208      	movs	r2, #8
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e01c      	b.n	8002ce2 <UART_SetConfig+0x17a>
 8002ca8:	231f      	movs	r3, #31
 8002caa:	18fb      	adds	r3, r7, r3
 8002cac:	2210      	movs	r2, #16
 8002cae:	701a      	strb	r2, [r3, #0]
 8002cb0:	e017      	b.n	8002ce2 <UART_SetConfig+0x17a>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a6d      	ldr	r2, [pc, #436]	; (8002e6c <UART_SetConfig+0x304>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d104      	bne.n	8002cc6 <UART_SetConfig+0x15e>
 8002cbc:	231f      	movs	r3, #31
 8002cbe:	18fb      	adds	r3, r7, r3
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
 8002cc4:	e00d      	b.n	8002ce2 <UART_SetConfig+0x17a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a69      	ldr	r2, [pc, #420]	; (8002e70 <UART_SetConfig+0x308>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d104      	bne.n	8002cda <UART_SetConfig+0x172>
 8002cd0:	231f      	movs	r3, #31
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
 8002cd8:	e003      	b.n	8002ce2 <UART_SetConfig+0x17a>
 8002cda:	231f      	movs	r3, #31
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	2210      	movs	r2, #16
 8002ce0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69da      	ldr	r2, [r3, #28]
 8002ce6:	2380      	movs	r3, #128	; 0x80
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d15c      	bne.n	8002da8 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8002cee:	231f      	movs	r3, #31
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d015      	beq.n	8002d24 <UART_SetConfig+0x1bc>
 8002cf8:	dc18      	bgt.n	8002d2c <UART_SetConfig+0x1c4>
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d00d      	beq.n	8002d1a <UART_SetConfig+0x1b2>
 8002cfe:	dc15      	bgt.n	8002d2c <UART_SetConfig+0x1c4>
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d002      	beq.n	8002d0a <UART_SetConfig+0x1a2>
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d005      	beq.n	8002d14 <UART_SetConfig+0x1ac>
 8002d08:	e010      	b.n	8002d2c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d0a:	f7ff f963 	bl	8001fd4 <HAL_RCC_GetPCLK1Freq>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	61bb      	str	r3, [r7, #24]
        break;
 8002d12:	e012      	b.n	8002d3a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d14:	4b57      	ldr	r3, [pc, #348]	; (8002e74 <UART_SetConfig+0x30c>)
 8002d16:	61bb      	str	r3, [r7, #24]
        break;
 8002d18:	e00f      	b.n	8002d3a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d1a:	f7ff f8df 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8002d1e:	0003      	movs	r3, r0
 8002d20:	61bb      	str	r3, [r7, #24]
        break;
 8002d22:	e00a      	b.n	8002d3a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d24:	2380      	movs	r3, #128	; 0x80
 8002d26:	021b      	lsls	r3, r3, #8
 8002d28:	61bb      	str	r3, [r7, #24]
        break;
 8002d2a:	e006      	b.n	8002d3a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d30:	231e      	movs	r3, #30
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
        break;
 8002d38:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d100      	bne.n	8002d42 <UART_SetConfig+0x1da>
 8002d40:	e07a      	b.n	8002e38 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	005a      	lsls	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	18d2      	adds	r2, r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	0019      	movs	r1, r3
 8002d54:	0010      	movs	r0, r2
 8002d56:	f7fd f9d7 	bl	8000108 <__udivsi3>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b0f      	cmp	r3, #15
 8002d62:	d91c      	bls.n	8002d9e <UART_SetConfig+0x236>
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	025b      	lsls	r3, r3, #9
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d217      	bcs.n	8002d9e <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	200e      	movs	r0, #14
 8002d74:	183b      	adds	r3, r7, r0
 8002d76:	210f      	movs	r1, #15
 8002d78:	438a      	bics	r2, r1
 8002d7a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2207      	movs	r2, #7
 8002d84:	4013      	ands	r3, r2
 8002d86:	b299      	uxth	r1, r3
 8002d88:	183b      	adds	r3, r7, r0
 8002d8a:	183a      	adds	r2, r7, r0
 8002d8c:	8812      	ldrh	r2, [r2, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	183a      	adds	r2, r7, r0
 8002d98:	8812      	ldrh	r2, [r2, #0]
 8002d9a:	60da      	str	r2, [r3, #12]
 8002d9c:	e04c      	b.n	8002e38 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8002d9e:	231e      	movs	r3, #30
 8002da0:	18fb      	adds	r3, r7, r3
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
 8002da6:	e047      	b.n	8002e38 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002da8:	231f      	movs	r3, #31
 8002daa:	18fb      	adds	r3, r7, r3
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d015      	beq.n	8002dde <UART_SetConfig+0x276>
 8002db2:	dc18      	bgt.n	8002de6 <UART_SetConfig+0x27e>
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d00d      	beq.n	8002dd4 <UART_SetConfig+0x26c>
 8002db8:	dc15      	bgt.n	8002de6 <UART_SetConfig+0x27e>
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <UART_SetConfig+0x25c>
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d005      	beq.n	8002dce <UART_SetConfig+0x266>
 8002dc2:	e010      	b.n	8002de6 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dc4:	f7ff f906 	bl	8001fd4 <HAL_RCC_GetPCLK1Freq>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	61bb      	str	r3, [r7, #24]
        break;
 8002dcc:	e012      	b.n	8002df4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dce:	4b29      	ldr	r3, [pc, #164]	; (8002e74 <UART_SetConfig+0x30c>)
 8002dd0:	61bb      	str	r3, [r7, #24]
        break;
 8002dd2:	e00f      	b.n	8002df4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dd4:	f7ff f882 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	61bb      	str	r3, [r7, #24]
        break;
 8002ddc:	e00a      	b.n	8002df4 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	61bb      	str	r3, [r7, #24]
        break;
 8002de4:	e006      	b.n	8002df4 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002dea:	231e      	movs	r3, #30
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	2201      	movs	r2, #1
 8002df0:	701a      	strb	r2, [r3, #0]
        break;
 8002df2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d01e      	beq.n	8002e38 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	085a      	lsrs	r2, r3, #1
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	18d2      	adds	r2, r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	0019      	movs	r1, r3
 8002e0a:	0010      	movs	r0, r2
 8002e0c:	f7fd f97c 	bl	8000108 <__udivsi3>
 8002e10:	0003      	movs	r3, r0
 8002e12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	2b0f      	cmp	r3, #15
 8002e18:	d90a      	bls.n	8002e30 <UART_SetConfig+0x2c8>
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	025b      	lsls	r3, r3, #9
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d205      	bcs.n	8002e30 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	e003      	b.n	8002e38 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8002e30:	231e      	movs	r3, #30
 8002e32:	18fb      	adds	r3, r7, r3
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002e44:	231e      	movs	r3, #30
 8002e46:	18fb      	adds	r3, r7, r3
 8002e48:	781b      	ldrb	r3, [r3, #0]
}
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	b008      	add	sp, #32
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	efff69f3 	.word	0xefff69f3
 8002e58:	ffffcfff 	.word	0xffffcfff
 8002e5c:	fffff4ff 	.word	0xfffff4ff
 8002e60:	40013800 	.word	0x40013800
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40004400 	.word	0x40004400
 8002e6c:	40004800 	.word	0x40004800
 8002e70:	40004c00 	.word	0x40004c00
 8002e74:	007a1200 	.word	0x007a1200

08002e78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	2201      	movs	r2, #1
 8002e86:	4013      	ands	r3, r2
 8002e88:	d00b      	beq.n	8002ea2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a4a      	ldr	r2, [pc, #296]	; (8002fbc <UART_AdvFeatureConfig+0x144>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	0019      	movs	r1, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d00b      	beq.n	8002ec4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4a43      	ldr	r2, [pc, #268]	; (8002fc0 <UART_AdvFeatureConfig+0x148>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	2204      	movs	r2, #4
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d00b      	beq.n	8002ee6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	4a3b      	ldr	r2, [pc, #236]	; (8002fc4 <UART_AdvFeatureConfig+0x14c>)
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	0019      	movs	r1, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	2208      	movs	r2, #8
 8002eec:	4013      	ands	r3, r2
 8002eee:	d00b      	beq.n	8002f08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4a34      	ldr	r2, [pc, #208]	; (8002fc8 <UART_AdvFeatureConfig+0x150>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	0019      	movs	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d00b      	beq.n	8002f2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	4a2c      	ldr	r2, [pc, #176]	; (8002fcc <UART_AdvFeatureConfig+0x154>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	0019      	movs	r1, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	2220      	movs	r2, #32
 8002f30:	4013      	ands	r3, r2
 8002f32:	d00b      	beq.n	8002f4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	4a25      	ldr	r2, [pc, #148]	; (8002fd0 <UART_AdvFeatureConfig+0x158>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	0019      	movs	r1, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	2240      	movs	r2, #64	; 0x40
 8002f52:	4013      	ands	r3, r2
 8002f54:	d01d      	beq.n	8002f92 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4a1d      	ldr	r2, [pc, #116]	; (8002fd4 <UART_AdvFeatureConfig+0x15c>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	0019      	movs	r1, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	035b      	lsls	r3, r3, #13
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d10b      	bne.n	8002f92 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4a15      	ldr	r2, [pc, #84]	; (8002fd8 <UART_AdvFeatureConfig+0x160>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	0019      	movs	r1, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	2280      	movs	r2, #128	; 0x80
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d00b      	beq.n	8002fb4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4a0e      	ldr	r2, [pc, #56]	; (8002fdc <UART_AdvFeatureConfig+0x164>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	605a      	str	r2, [r3, #4]
  }
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b002      	add	sp, #8
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	fffdffff 	.word	0xfffdffff
 8002fc0:	fffeffff 	.word	0xfffeffff
 8002fc4:	fffbffff 	.word	0xfffbffff
 8002fc8:	ffff7fff 	.word	0xffff7fff
 8002fcc:	ffffefff 	.word	0xffffefff
 8002fd0:	ffffdfff 	.word	0xffffdfff
 8002fd4:	ffefffff 	.word	0xffefffff
 8002fd8:	ff9fffff 	.word	0xff9fffff
 8002fdc:	fff7ffff 	.word	0xfff7ffff

08002fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b092      	sub	sp, #72	; 0x48
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2284      	movs	r2, #132	; 0x84
 8002fec:	2100      	movs	r1, #0
 8002fee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ff0:	f7fd ff98 	bl	8000f24 <HAL_GetTick>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2208      	movs	r2, #8
 8003000:	4013      	ands	r3, r2
 8003002:	2b08      	cmp	r3, #8
 8003004:	d12c      	bne.n	8003060 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003008:	2280      	movs	r2, #128	; 0x80
 800300a:	0391      	lsls	r1, r2, #14
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	4a46      	ldr	r2, [pc, #280]	; (8003128 <UART_CheckIdleState+0x148>)
 8003010:	9200      	str	r2, [sp, #0]
 8003012:	2200      	movs	r2, #0
 8003014:	f000 f88c 	bl	8003130 <UART_WaitOnFlagUntilTimeout>
 8003018:	1e03      	subs	r3, r0, #0
 800301a:	d021      	beq.n	8003060 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800301c:	f3ef 8310 	mrs	r3, PRIMASK
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003024:	63bb      	str	r3, [r7, #56]	; 0x38
 8003026:	2301      	movs	r3, #1
 8003028:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302c:	f383 8810 	msr	PRIMASK, r3
}
 8003030:	46c0      	nop			; (mov r8, r8)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2180      	movs	r1, #128	; 0x80
 800303e:	438a      	bics	r2, r1
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003044:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003048:	f383 8810 	msr	PRIMASK, r3
}
 800304c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2278      	movs	r2, #120	; 0x78
 8003058:	2100      	movs	r1, #0
 800305a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e05f      	b.n	8003120 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2204      	movs	r2, #4
 8003068:	4013      	ands	r3, r2
 800306a:	2b04      	cmp	r3, #4
 800306c:	d146      	bne.n	80030fc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800306e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003070:	2280      	movs	r2, #128	; 0x80
 8003072:	03d1      	lsls	r1, r2, #15
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	4a2c      	ldr	r2, [pc, #176]	; (8003128 <UART_CheckIdleState+0x148>)
 8003078:	9200      	str	r2, [sp, #0]
 800307a:	2200      	movs	r2, #0
 800307c:	f000 f858 	bl	8003130 <UART_WaitOnFlagUntilTimeout>
 8003080:	1e03      	subs	r3, r0, #0
 8003082:	d03b      	beq.n	80030fc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003084:	f3ef 8310 	mrs	r3, PRIMASK
 8003088:	60fb      	str	r3, [r7, #12]
  return(result);
 800308a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800308c:	637b      	str	r3, [r7, #52]	; 0x34
 800308e:	2301      	movs	r3, #1
 8003090:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f383 8810 	msr	PRIMASK, r3
}
 8003098:	46c0      	nop			; (mov r8, r8)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4921      	ldr	r1, [pc, #132]	; (800312c <UART_CheckIdleState+0x14c>)
 80030a6:	400a      	ands	r2, r1
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f383 8810 	msr	PRIMASK, r3
}
 80030b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b6:	f3ef 8310 	mrs	r3, PRIMASK
 80030ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80030bc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030be:	633b      	str	r3, [r7, #48]	; 0x30
 80030c0:	2301      	movs	r3, #1
 80030c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f383 8810 	msr	PRIMASK, r3
}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2101      	movs	r1, #1
 80030d8:	438a      	bics	r2, r1
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	f383 8810 	msr	PRIMASK, r3
}
 80030e6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2280      	movs	r2, #128	; 0x80
 80030ec:	2120      	movs	r1, #32
 80030ee:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2278      	movs	r2, #120	; 0x78
 80030f4:	2100      	movs	r1, #0
 80030f6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e011      	b.n	8003120 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2280      	movs	r2, #128	; 0x80
 8003106:	2120      	movs	r1, #32
 8003108:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2278      	movs	r2, #120	; 0x78
 800311a:	2100      	movs	r1, #0
 800311c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	0018      	movs	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	b010      	add	sp, #64	; 0x40
 8003126:	bd80      	pop	{r7, pc}
 8003128:	01ffffff 	.word	0x01ffffff
 800312c:	fffffedf 	.word	0xfffffedf

08003130 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	1dfb      	adds	r3, r7, #7
 800313e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003140:	e04b      	b.n	80031da <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	3301      	adds	r3, #1
 8003146:	d048      	beq.n	80031da <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003148:	f7fd feec 	bl	8000f24 <HAL_GetTick>
 800314c:	0002      	movs	r2, r0
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	429a      	cmp	r2, r3
 8003156:	d302      	bcc.n	800315e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e04b      	b.n	80031fa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2204      	movs	r2, #4
 800316a:	4013      	ands	r3, r2
 800316c:	d035      	beq.n	80031da <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	2208      	movs	r2, #8
 8003176:	4013      	ands	r3, r2
 8003178:	2b08      	cmp	r3, #8
 800317a:	d111      	bne.n	80031a0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2208      	movs	r2, #8
 8003182:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	0018      	movs	r0, r3
 8003188:	f000 f83c 	bl	8003204 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2284      	movs	r2, #132	; 0x84
 8003190:	2108      	movs	r1, #8
 8003192:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2278      	movs	r2, #120	; 0x78
 8003198:	2100      	movs	r1, #0
 800319a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e02c      	b.n	80031fa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69da      	ldr	r2, [r3, #28]
 80031a6:	2380      	movs	r3, #128	; 0x80
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	401a      	ands	r2, r3
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d112      	bne.n	80031da <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2280      	movs	r2, #128	; 0x80
 80031ba:	0112      	lsls	r2, r2, #4
 80031bc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	0018      	movs	r0, r3
 80031c2:	f000 f81f 	bl	8003204 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2284      	movs	r2, #132	; 0x84
 80031ca:	2120      	movs	r1, #32
 80031cc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2278      	movs	r2, #120	; 0x78
 80031d2:	2100      	movs	r1, #0
 80031d4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e00f      	b.n	80031fa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	4013      	ands	r3, r2
 80031e4:	68ba      	ldr	r2, [r7, #8]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	425a      	negs	r2, r3
 80031ea:	4153      	adcs	r3, r2
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	001a      	movs	r2, r3
 80031f0:	1dfb      	adds	r3, r7, #7
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d0a4      	beq.n	8003142 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	0018      	movs	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b004      	add	sp, #16
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08e      	sub	sp, #56	; 0x38
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800320c:	f3ef 8310 	mrs	r3, PRIMASK
 8003210:	617b      	str	r3, [r7, #20]
  return(result);
 8003212:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003214:	637b      	str	r3, [r7, #52]	; 0x34
 8003216:	2301      	movs	r3, #1
 8003218:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	f383 8810 	msr	PRIMASK, r3
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4926      	ldr	r1, [pc, #152]	; (80032c8 <UART_EndRxTransfer+0xc4>)
 800322e:	400a      	ands	r2, r1
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003234:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	f383 8810 	msr	PRIMASK, r3
}
 800323c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800323e:	f3ef 8310 	mrs	r3, PRIMASK
 8003242:	623b      	str	r3, [r7, #32]
  return(result);
 8003244:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003246:	633b      	str	r3, [r7, #48]	; 0x30
 8003248:	2301      	movs	r3, #1
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	f383 8810 	msr	PRIMASK, r3
}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2101      	movs	r1, #1
 8003260:	438a      	bics	r2, r1
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	f383 8810 	msr	PRIMASK, r3
}
 800326e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003274:	2b01      	cmp	r3, #1
 8003276:	d118      	bne.n	80032aa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003278:	f3ef 8310 	mrs	r3, PRIMASK
 800327c:	60bb      	str	r3, [r7, #8]
  return(result);
 800327e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003280:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003282:	2301      	movs	r3, #1
 8003284:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f383 8810 	msr	PRIMASK, r3
}
 800328c:	46c0      	nop			; (mov r8, r8)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2110      	movs	r1, #16
 800329a:	438a      	bics	r2, r1
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f383 8810 	msr	PRIMASK, r3
}
 80032a8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2280      	movs	r2, #128	; 0x80
 80032ae:	2120      	movs	r1, #32
 80032b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b00e      	add	sp, #56	; 0x38
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	fffffedf 	.word	0xfffffedf

080032cc <memset>:
 80032cc:	0003      	movs	r3, r0
 80032ce:	1882      	adds	r2, r0, r2
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d100      	bne.n	80032d6 <memset+0xa>
 80032d4:	4770      	bx	lr
 80032d6:	7019      	strb	r1, [r3, #0]
 80032d8:	3301      	adds	r3, #1
 80032da:	e7f9      	b.n	80032d0 <memset+0x4>

080032dc <__libc_init_array>:
 80032dc:	b570      	push	{r4, r5, r6, lr}
 80032de:	2600      	movs	r6, #0
 80032e0:	4c0c      	ldr	r4, [pc, #48]	; (8003314 <__libc_init_array+0x38>)
 80032e2:	4d0d      	ldr	r5, [pc, #52]	; (8003318 <__libc_init_array+0x3c>)
 80032e4:	1b64      	subs	r4, r4, r5
 80032e6:	10a4      	asrs	r4, r4, #2
 80032e8:	42a6      	cmp	r6, r4
 80032ea:	d109      	bne.n	8003300 <__libc_init_array+0x24>
 80032ec:	2600      	movs	r6, #0
 80032ee:	f000 f819 	bl	8003324 <_init>
 80032f2:	4c0a      	ldr	r4, [pc, #40]	; (800331c <__libc_init_array+0x40>)
 80032f4:	4d0a      	ldr	r5, [pc, #40]	; (8003320 <__libc_init_array+0x44>)
 80032f6:	1b64      	subs	r4, r4, r5
 80032f8:	10a4      	asrs	r4, r4, #2
 80032fa:	42a6      	cmp	r6, r4
 80032fc:	d105      	bne.n	800330a <__libc_init_array+0x2e>
 80032fe:	bd70      	pop	{r4, r5, r6, pc}
 8003300:	00b3      	lsls	r3, r6, #2
 8003302:	58eb      	ldr	r3, [r5, r3]
 8003304:	4798      	blx	r3
 8003306:	3601      	adds	r6, #1
 8003308:	e7ee      	b.n	80032e8 <__libc_init_array+0xc>
 800330a:	00b3      	lsls	r3, r6, #2
 800330c:	58eb      	ldr	r3, [r5, r3]
 800330e:	4798      	blx	r3
 8003310:	3601      	adds	r6, #1
 8003312:	e7f2      	b.n	80032fa <__libc_init_array+0x1e>
 8003314:	08003388 	.word	0x08003388
 8003318:	08003388 	.word	0x08003388
 800331c:	0800338c 	.word	0x0800338c
 8003320:	08003388 	.word	0x08003388

08003324 <_init>:
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332a:	bc08      	pop	{r3}
 800332c:	469e      	mov	lr, r3
 800332e:	4770      	bx	lr

08003330 <_fini>:
 8003330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003336:	bc08      	pop	{r3}
 8003338:	469e      	mov	lr, r3
 800333a:	4770      	bx	lr
