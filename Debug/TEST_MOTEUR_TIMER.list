
TEST_MOTEUR_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003704  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080037c4  080037c4  000137c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003810  08003810  0002010c  2**0
                  CONTENTS
  4 .ARM          00000000  08003810  08003810  0002010c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003810  08003810  0002010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003810  08003810  00013810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003814  08003814  00013814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000010c  20000000  08003818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  2000010c  08003924  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08003924  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de3e  00000000  00000000  00020177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d0d  00000000  00000000  0002dfb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cf0  00000000  00000000  0002fcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a34  00000000  00000000  000309b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019535  00000000  00000000  000313ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ef5c  00000000  00000000  0004a921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097556  00000000  00000000  0005987d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ee4  00000000  00000000  000f0dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f3cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000010c 	.word	0x2000010c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080037ac 	.word	0x080037ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000110 	.word	0x20000110
 8000104:	080037ac 	.word	0x080037ac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fe22 	bl	8000e6c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f816 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f988 	bl	8000540 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000230:	f000 f8aa 	bl	8000388 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000234:	f000 f8fc 	bl	8000430 <MX_TIM3_Init>
  MX_CAN_Init();
 8000238:	f000 f870 	bl	800031c <MX_CAN_Init>
  MX_USART1_UART_Init();
 800023c:	f000 f950 	bl	80004e0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  SystemClock_Config();
 8000240:	f000 f80a 	bl	8000258 <SystemClock_Config>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000244:	4b03      	ldr	r3, [pc, #12]	; (8000254 <main+0x34>)
 8000246:	2102      	movs	r1, #2
 8000248:	0018      	movs	r0, r3
 800024a:	f000 ff71 	bl	8001130 <HAL_CAN_ActivateNotification>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  automate();
 800024e:	f000 fa51 	bl	80006f4 <automate>
 8000252:	e7fc      	b.n	800024e <main+0x2e>
 8000254:	20000128 	.word	0x20000128

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b590      	push	{r4, r7, lr}
 800025a:	b099      	sub	sp, #100	; 0x64
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	242c      	movs	r4, #44	; 0x2c
 8000260:	193b      	adds	r3, r7, r4
 8000262:	0018      	movs	r0, r3
 8000264:	2334      	movs	r3, #52	; 0x34
 8000266:	001a      	movs	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f003 fa73 	bl	8003754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026e:	231c      	movs	r3, #28
 8000270:	18fb      	adds	r3, r7, r3
 8000272:	0018      	movs	r0, r3
 8000274:	2310      	movs	r3, #16
 8000276:	001a      	movs	r2, r3
 8000278:	2100      	movs	r1, #0
 800027a:	f003 fa6b 	bl	8003754 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027e:	003b      	movs	r3, r7
 8000280:	0018      	movs	r0, r3
 8000282:	231c      	movs	r3, #28
 8000284:	001a      	movs	r2, r3
 8000286:	2100      	movs	r1, #0
 8000288:	f003 fa64 	bl	8003754 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800028c:	0021      	movs	r1, r4
 800028e:	187b      	adds	r3, r7, r1
 8000290:	2202      	movs	r2, #2
 8000292:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000294:	187b      	adds	r3, r7, r1
 8000296:	2201      	movs	r2, #1
 8000298:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2210      	movs	r2, #16
 800029e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2202      	movs	r2, #2
 80002a4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2280      	movs	r2, #128	; 0x80
 80002aa:	0212      	lsls	r2, r2, #8
 80002ac:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2280      	movs	r2, #128	; 0x80
 80002b2:	0352      	lsls	r2, r2, #13
 80002b4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2200      	movs	r2, #0
 80002ba:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	0018      	movs	r0, r3
 80002c0:	f001 fbf0 	bl	8001aa4 <HAL_RCC_OscConfig>
 80002c4:	1e03      	subs	r3, r0, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80002c8:	f000 fc6a 	bl	8000ba0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002cc:	211c      	movs	r1, #28
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2207      	movs	r2, #7
 80002d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2202      	movs	r2, #2
 80002d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2101      	movs	r1, #1
 80002ea:	0018      	movs	r0, r3
 80002ec:	f001 ff60 	bl	80021b0 <HAL_RCC_ClockConfig>
 80002f0:	1e03      	subs	r3, r0, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80002f4:	f000 fc54 	bl	8000ba0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002f8:	003b      	movs	r3, r7
 80002fa:	2201      	movs	r2, #1
 80002fc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002fe:	003b      	movs	r3, r7
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000304:	003b      	movs	r3, r7
 8000306:	0018      	movs	r0, r3
 8000308:	f002 f8be 	bl	8002488 <HAL_RCCEx_PeriphCLKConfig>
 800030c:	1e03      	subs	r3, r0, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000310:	f000 fc46 	bl	8000ba0 <Error_Handler>
  }
}
 8000314:	46c0      	nop			; (mov r8, r8)
 8000316:	46bd      	mov	sp, r7
 8000318:	b019      	add	sp, #100	; 0x64
 800031a:	bd90      	pop	{r4, r7, pc}

0800031c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000320:	4b17      	ldr	r3, [pc, #92]	; (8000380 <MX_CAN_Init+0x64>)
 8000322:	4a18      	ldr	r2, [pc, #96]	; (8000384 <MX_CAN_Init+0x68>)
 8000324:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000326:	4b16      	ldr	r3, [pc, #88]	; (8000380 <MX_CAN_Init+0x64>)
 8000328:	2210      	movs	r2, #16
 800032a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800032c:	4b14      	ldr	r3, [pc, #80]	; (8000380 <MX_CAN_Init+0x64>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000332:	4b13      	ldr	r3, [pc, #76]	; (8000380 <MX_CAN_Init+0x64>)
 8000334:	2200      	movs	r2, #0
 8000336:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000338:	4b11      	ldr	r3, [pc, #68]	; (8000380 <MX_CAN_Init+0x64>)
 800033a:	2200      	movs	r2, #0
 800033c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <MX_CAN_Init+0x64>)
 8000340:	2200      	movs	r2, #0
 8000342:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <MX_CAN_Init+0x64>)
 8000346:	2200      	movs	r2, #0
 8000348:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800034a:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <MX_CAN_Init+0x64>)
 800034c:	2200      	movs	r2, #0
 800034e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <MX_CAN_Init+0x64>)
 8000352:	2200      	movs	r2, #0
 8000354:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000356:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <MX_CAN_Init+0x64>)
 8000358:	2200      	movs	r2, #0
 800035a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <MX_CAN_Init+0x64>)
 800035e:	2200      	movs	r2, #0
 8000360:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000362:	4b07      	ldr	r3, [pc, #28]	; (8000380 <MX_CAN_Init+0x64>)
 8000364:	2200      	movs	r2, #0
 8000366:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <MX_CAN_Init+0x64>)
 800036a:	0018      	movs	r0, r3
 800036c:	f000 fde2 	bl	8000f34 <HAL_CAN_Init>
 8000370:	1e03      	subs	r3, r0, #0
 8000372:	d001      	beq.n	8000378 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000374:	f000 fc14 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000378:	46c0      	nop			; (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	20000128 	.word	0x20000128
 8000384:	40006400 	.word	0x40006400

08000388 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b086      	sub	sp, #24
 800038c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800038e:	2308      	movs	r3, #8
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	0018      	movs	r0, r3
 8000394:	2310      	movs	r3, #16
 8000396:	001a      	movs	r2, r3
 8000398:	2100      	movs	r1, #0
 800039a:	f003 f9db 	bl	8003754 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800039e:	003b      	movs	r3, r7
 80003a0:	0018      	movs	r0, r3
 80003a2:	2308      	movs	r3, #8
 80003a4:	001a      	movs	r2, r3
 80003a6:	2100      	movs	r1, #0
 80003a8:	f003 f9d4 	bl	8003754 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003ac:	4b1e      	ldr	r3, [pc, #120]	; (8000428 <MX_TIM2_Init+0xa0>)
 80003ae:	2280      	movs	r2, #128	; 0x80
 80003b0:	05d2      	lsls	r2, r2, #23
 80003b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80003b4:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <MX_TIM2_Init+0xa0>)
 80003b6:	4a1d      	ldr	r2, [pc, #116]	; (800042c <MX_TIM2_Init+0xa4>)
 80003b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ba:	4b1b      	ldr	r3, [pc, #108]	; (8000428 <MX_TIM2_Init+0xa0>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80003c0:	4b19      	ldr	r3, [pc, #100]	; (8000428 <MX_TIM2_Init+0xa0>)
 80003c2:	2201      	movs	r2, #1
 80003c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c6:	4b18      	ldr	r3, [pc, #96]	; (8000428 <MX_TIM2_Init+0xa0>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003cc:	4b16      	ldr	r3, [pc, #88]	; (8000428 <MX_TIM2_Init+0xa0>)
 80003ce:	2280      	movs	r2, #128	; 0x80
 80003d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003d2:	4b15      	ldr	r3, [pc, #84]	; (8000428 <MX_TIM2_Init+0xa0>)
 80003d4:	0018      	movs	r0, r3
 80003d6:	f002 f955 	bl	8002684 <HAL_TIM_Base_Init>
 80003da:	1e03      	subs	r3, r0, #0
 80003dc:	d001      	beq.n	80003e2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80003de:	f000 fbdf 	bl	8000ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e2:	2108      	movs	r1, #8
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2280      	movs	r2, #128	; 0x80
 80003e8:	0152      	lsls	r2, r2, #5
 80003ea:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003ec:	187a      	adds	r2, r7, r1
 80003ee:	4b0e      	ldr	r3, [pc, #56]	; (8000428 <MX_TIM2_Init+0xa0>)
 80003f0:	0011      	movs	r1, r2
 80003f2:	0018      	movs	r0, r3
 80003f4:	f002 fb2c 	bl	8002a50 <HAL_TIM_ConfigClockSource>
 80003f8:	1e03      	subs	r3, r0, #0
 80003fa:	d001      	beq.n	8000400 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80003fc:	f000 fbd0 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000400:	003b      	movs	r3, r7
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000406:	003b      	movs	r3, r7
 8000408:	2200      	movs	r2, #0
 800040a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800040c:	003a      	movs	r2, r7
 800040e:	4b06      	ldr	r3, [pc, #24]	; (8000428 <MX_TIM2_Init+0xa0>)
 8000410:	0011      	movs	r1, r2
 8000412:	0018      	movs	r0, r3
 8000414:	f002 fd2a 	bl	8002e6c <HAL_TIMEx_MasterConfigSynchronization>
 8000418:	1e03      	subs	r3, r0, #0
 800041a:	d001      	beq.n	8000420 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800041c:	f000 fbc0 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	b006      	add	sp, #24
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000150 	.word	0x20000150
 800042c:	00001c1f 	.word	0x00001c1f

08000430 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000436:	2308      	movs	r3, #8
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	0018      	movs	r0, r3
 800043c:	2310      	movs	r3, #16
 800043e:	001a      	movs	r2, r3
 8000440:	2100      	movs	r1, #0
 8000442:	f003 f987 	bl	8003754 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000446:	003b      	movs	r3, r7
 8000448:	0018      	movs	r0, r3
 800044a:	2308      	movs	r3, #8
 800044c:	001a      	movs	r2, r3
 800044e:	2100      	movs	r1, #0
 8000450:	f003 f980 	bl	8003754 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000454:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <MX_TIM3_Init+0xa0>)
 8000456:	4a1f      	ldr	r2, [pc, #124]	; (80004d4 <MX_TIM3_Init+0xa4>)
 8000458:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48000-1;
 800045a:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <MX_TIM3_Init+0xa0>)
 800045c:	4a1e      	ldr	r2, [pc, #120]	; (80004d8 <MX_TIM3_Init+0xa8>)
 800045e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <MX_TIM3_Init+0xa0>)
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000466:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <MX_TIM3_Init+0xa0>)
 8000468:	4a1c      	ldr	r2, [pc, #112]	; (80004dc <MX_TIM3_Init+0xac>)
 800046a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800046c:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <MX_TIM3_Init+0xa0>)
 800046e:	2200      	movs	r2, #0
 8000470:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000472:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <MX_TIM3_Init+0xa0>)
 8000474:	2200      	movs	r2, #0
 8000476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000478:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <MX_TIM3_Init+0xa0>)
 800047a:	0018      	movs	r0, r3
 800047c:	f002 f902 	bl	8002684 <HAL_TIM_Base_Init>
 8000480:	1e03      	subs	r3, r0, #0
 8000482:	d001      	beq.n	8000488 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000484:	f000 fb8c 	bl	8000ba0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000488:	2108      	movs	r1, #8
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2280      	movs	r2, #128	; 0x80
 800048e:	0152      	lsls	r2, r2, #5
 8000490:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000492:	187a      	adds	r2, r7, r1
 8000494:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_TIM3_Init+0xa0>)
 8000496:	0011      	movs	r1, r2
 8000498:	0018      	movs	r0, r3
 800049a:	f002 fad9 	bl	8002a50 <HAL_TIM_ConfigClockSource>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80004a2:	f000 fb7d 	bl	8000ba0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004a6:	003b      	movs	r3, r7
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004ac:	003b      	movs	r3, r7
 80004ae:	2200      	movs	r2, #0
 80004b0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80004b2:	003a      	movs	r2, r7
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_TIM3_Init+0xa0>)
 80004b6:	0011      	movs	r1, r2
 80004b8:	0018      	movs	r0, r3
 80004ba:	f002 fcd7 	bl	8002e6c <HAL_TIMEx_MasterConfigSynchronization>
 80004be:	1e03      	subs	r3, r0, #0
 80004c0:	d001      	beq.n	80004c6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80004c2:	f000 fb6d 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b006      	add	sp, #24
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	20000198 	.word	0x20000198
 80004d4:	40000400 	.word	0x40000400
 80004d8:	0000bb7f 	.word	0x0000bb7f
 80004dc:	0000ffff 	.word	0x0000ffff

080004e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004e4:	4b14      	ldr	r3, [pc, #80]	; (8000538 <MX_USART1_UART_Init+0x58>)
 80004e6:	4a15      	ldr	r2, [pc, #84]	; (800053c <MX_USART1_UART_Init+0x5c>)
 80004e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80004ea:	4b13      	ldr	r3, [pc, #76]	; (8000538 <MX_USART1_UART_Init+0x58>)
 80004ec:	2296      	movs	r2, #150	; 0x96
 80004ee:	0212      	lsls	r2, r2, #8
 80004f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004f2:	4b11      	ldr	r3, [pc, #68]	; (8000538 <MX_USART1_UART_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <MX_USART1_UART_Init+0x58>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <MX_USART1_UART_Init+0x58>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <MX_USART1_UART_Init+0x58>)
 8000506:	220c      	movs	r2, #12
 8000508:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <MX_USART1_UART_Init+0x58>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MX_USART1_UART_Init+0x58>)
 8000512:	2200      	movs	r2, #0
 8000514:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <MX_USART1_UART_Init+0x58>)
 8000518:	2200      	movs	r2, #0
 800051a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <MX_USART1_UART_Init+0x58>)
 800051e:	2200      	movs	r2, #0
 8000520:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000522:	4b05      	ldr	r3, [pc, #20]	; (8000538 <MX_USART1_UART_Init+0x58>)
 8000524:	0018      	movs	r0, r3
 8000526:	f002 fd0f 	bl	8002f48 <HAL_UART_Init>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800052e:	f000 fb37 	bl	8000ba0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200001e0 	.word	0x200001e0
 800053c:	40013800 	.word	0x40013800

08000540 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b08b      	sub	sp, #44	; 0x2c
 8000544:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000546:	2414      	movs	r4, #20
 8000548:	193b      	adds	r3, r7, r4
 800054a:	0018      	movs	r0, r3
 800054c:	2314      	movs	r3, #20
 800054e:	001a      	movs	r2, r3
 8000550:	2100      	movs	r1, #0
 8000552:	f003 f8ff 	bl	8003754 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000556:	4b60      	ldr	r3, [pc, #384]	; (80006d8 <MX_GPIO_Init+0x198>)
 8000558:	695a      	ldr	r2, [r3, #20]
 800055a:	4b5f      	ldr	r3, [pc, #380]	; (80006d8 <MX_GPIO_Init+0x198>)
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	0309      	lsls	r1, r1, #12
 8000560:	430a      	orrs	r2, r1
 8000562:	615a      	str	r2, [r3, #20]
 8000564:	4b5c      	ldr	r3, [pc, #368]	; (80006d8 <MX_GPIO_Init+0x198>)
 8000566:	695a      	ldr	r2, [r3, #20]
 8000568:	2380      	movs	r3, #128	; 0x80
 800056a:	031b      	lsls	r3, r3, #12
 800056c:	4013      	ands	r3, r2
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	4b59      	ldr	r3, [pc, #356]	; (80006d8 <MX_GPIO_Init+0x198>)
 8000574:	695a      	ldr	r2, [r3, #20]
 8000576:	4b58      	ldr	r3, [pc, #352]	; (80006d8 <MX_GPIO_Init+0x198>)
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	0289      	lsls	r1, r1, #10
 800057c:	430a      	orrs	r2, r1
 800057e:	615a      	str	r2, [r3, #20]
 8000580:	4b55      	ldr	r3, [pc, #340]	; (80006d8 <MX_GPIO_Init+0x198>)
 8000582:	695a      	ldr	r2, [r3, #20]
 8000584:	2380      	movs	r3, #128	; 0x80
 8000586:	029b      	lsls	r3, r3, #10
 8000588:	4013      	ands	r3, r2
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058e:	4b52      	ldr	r3, [pc, #328]	; (80006d8 <MX_GPIO_Init+0x198>)
 8000590:	695a      	ldr	r2, [r3, #20]
 8000592:	4b51      	ldr	r3, [pc, #324]	; (80006d8 <MX_GPIO_Init+0x198>)
 8000594:	2180      	movs	r1, #128	; 0x80
 8000596:	02c9      	lsls	r1, r1, #11
 8000598:	430a      	orrs	r2, r1
 800059a:	615a      	str	r2, [r3, #20]
 800059c:	4b4e      	ldr	r3, [pc, #312]	; (80006d8 <MX_GPIO_Init+0x198>)
 800059e:	695a      	ldr	r2, [r3, #20]
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	02db      	lsls	r3, r3, #11
 80005a4:	4013      	ands	r3, r2
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005aa:	4b4b      	ldr	r3, [pc, #300]	; (80006d8 <MX_GPIO_Init+0x198>)
 80005ac:	695a      	ldr	r2, [r3, #20]
 80005ae:	4b4a      	ldr	r3, [pc, #296]	; (80006d8 <MX_GPIO_Init+0x198>)
 80005b0:	2180      	movs	r1, #128	; 0x80
 80005b2:	0349      	lsls	r1, r1, #13
 80005b4:	430a      	orrs	r2, r1
 80005b6:	615a      	str	r2, [r3, #20]
 80005b8:	4b47      	ldr	r3, [pc, #284]	; (80006d8 <MX_GPIO_Init+0x198>)
 80005ba:	695a      	ldr	r2, [r3, #20]
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	035b      	lsls	r3, r3, #13
 80005c0:	4013      	ands	r3, r2
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80005c6:	4945      	ldr	r1, [pc, #276]	; (80006dc <MX_GPIO_Init+0x19c>)
 80005c8:	4b45      	ldr	r3, [pc, #276]	; (80006e0 <MX_GPIO_Init+0x1a0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fa4b 	bl	8001a68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005d2:	4944      	ldr	r1, [pc, #272]	; (80006e4 <MX_GPIO_Init+0x1a4>)
 80005d4:	2390      	movs	r3, #144	; 0x90
 80005d6:	05db      	lsls	r3, r3, #23
 80005d8:	2200      	movs	r2, #0
 80005da:	0018      	movs	r0, r3
 80005dc:	f001 fa44 	bl	8001a68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80005e0:	4941      	ldr	r1, [pc, #260]	; (80006e8 <MX_GPIO_Init+0x1a8>)
 80005e2:	4b42      	ldr	r3, [pc, #264]	; (80006ec <MX_GPIO_Init+0x1ac>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	0018      	movs	r0, r3
 80005e8:	f001 fa3e 	bl	8001a68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80005ec:	4b40      	ldr	r3, [pc, #256]	; (80006f0 <MX_GPIO_Init+0x1b0>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	2104      	movs	r1, #4
 80005f2:	0018      	movs	r0, r3
 80005f4:	f001 fa38 	bl	8001a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	4a38      	ldr	r2, [pc, #224]	; (80006dc <MX_GPIO_Init+0x19c>)
 80005fc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	2201      	movs	r2, #1
 8000602:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	193b      	adds	r3, r7, r4
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	193b      	adds	r3, r7, r4
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000610:	193b      	adds	r3, r7, r4
 8000612:	4a33      	ldr	r2, [pc, #204]	; (80006e0 <MX_GPIO_Init+0x1a0>)
 8000614:	0019      	movs	r1, r3
 8000616:	0010      	movs	r0, r2
 8000618:	f001 f8ae 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800061c:	193b      	adds	r3, r7, r4
 800061e:	4a31      	ldr	r2, [pc, #196]	; (80006e4 <MX_GPIO_Init+0x1a4>)
 8000620:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	193b      	adds	r3, r7, r4
 8000624:	2201      	movs	r2, #1
 8000626:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	193b      	adds	r3, r7, r4
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	193b      	adds	r3, r7, r4
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	193a      	adds	r2, r7, r4
 8000636:	2390      	movs	r3, #144	; 0x90
 8000638:	05db      	lsls	r3, r3, #23
 800063a:	0011      	movs	r1, r2
 800063c:	0018      	movs	r0, r3
 800063e:	f001 f89b 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000642:	193b      	adds	r3, r7, r4
 8000644:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <MX_GPIO_Init+0x1a8>)
 8000646:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	193b      	adds	r3, r7, r4
 800064a:	2201      	movs	r2, #1
 800064c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064e:	193b      	adds	r3, r7, r4
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	193b      	adds	r3, r7, r4
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065a:	193b      	adds	r3, r7, r4
 800065c:	4a23      	ldr	r2, [pc, #140]	; (80006ec <MX_GPIO_Init+0x1ac>)
 800065e:	0019      	movs	r1, r3
 8000660:	0010      	movs	r0, r2
 8000662:	f001 f889 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000666:	0021      	movs	r1, r4
 8000668:	187b      	adds	r3, r7, r1
 800066a:	22f0      	movs	r2, #240	; 0xf0
 800066c:	0212      	lsls	r2, r2, #8
 800066e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000670:	000c      	movs	r4, r1
 8000672:	193b      	adds	r3, r7, r4
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	193b      	adds	r3, r7, r4
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067e:	193b      	adds	r3, r7, r4
 8000680:	4a1a      	ldr	r2, [pc, #104]	; (80006ec <MX_GPIO_Init+0x1ac>)
 8000682:	0019      	movs	r1, r3
 8000684:	0010      	movs	r0, r2
 8000686:	f001 f877 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	22c0      	movs	r2, #192	; 0xc0
 800068e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2200      	movs	r2, #0
 8000694:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069c:	193b      	adds	r3, r7, r4
 800069e:	4a10      	ldr	r2, [pc, #64]	; (80006e0 <MX_GPIO_Init+0x1a0>)
 80006a0:	0019      	movs	r1, r3
 80006a2:	0010      	movs	r0, r2
 80006a4:	f001 f868 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006a8:	0021      	movs	r1, r4
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2204      	movs	r2, #4
 80006ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2201      	movs	r2, #1
 80006b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	4a0a      	ldr	r2, [pc, #40]	; (80006f0 <MX_GPIO_Init+0x1b0>)
 80006c6:	0019      	movs	r1, r3
 80006c8:	0010      	movs	r0, r2
 80006ca:	f001 f855 	bl	8001778 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b00b      	add	sp, #44	; 0x2c
 80006d4:	bd90      	pop	{r4, r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	40021000 	.word	0x40021000
 80006dc:	0000fc3f 	.word	0x0000fc3f
 80006e0:	48000800 	.word	0x48000800
 80006e4:	000080ff 	.word	0x000080ff
 80006e8:	00000fff 	.word	0x00000fff
 80006ec:	48000400 	.word	0x48000400
 80006f0:	48000c00 	.word	0x48000c00

080006f4 <automate>:

/* USER CODE BEGIN 4 */
void automate() {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	switch(state) {
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <automate+0x74>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b04      	cmp	r3, #4
 80006fe:	d82f      	bhi.n	8000760 <automate+0x6c>
 8000700:	009a      	lsls	r2, r3, #2
 8000702:	4b1a      	ldr	r3, [pc, #104]	; (800076c <automate+0x78>)
 8000704:	18d3      	adds	r3, r2, r3
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	469f      	mov	pc, r3
		case START:
			setStepperSens(DOWN);
 800070a:	2001      	movs	r0, #1
 800070c:	f000 fa12 	bl	8000b34 <setStepperSens>
			state = BEGIN_MOVEMENT;
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <automate+0x74>)
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
			break;
 8000716:	e023      	b.n	8000760 <automate+0x6c>
		case BEGIN_MOVEMENT:
				setStepperOnOff(ON);
 8000718:	2000      	movs	r0, #0
 800071a:	f000 fa27 	bl	8000b6c <setStepperOnOff>
				__HAL_TIM_SetCounter(&htim3, 0);
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <automate+0x7c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
				state = TRANSITION;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <automate+0x74>)
 8000728:	2204      	movs	r2, #4
 800072a:	701a      	strb	r2, [r3, #0]
				break;
 800072c:	e018      	b.n	8000760 <automate+0x6c>
		case TRANSITION: //TODO should wait for longest stepper timer
			HAL_TIM_Base_Start_IT(&htim2);
 800072e:	4b11      	ldr	r3, [pc, #68]	; (8000774 <automate+0x80>)
 8000730:	0018      	movs	r0, r3
 8000732:	f001 fff7 	bl	8002724 <HAL_TIM_Base_Start_IT>
			HAL_TIM_Base_Start_IT(&htim3);
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <automate+0x7c>)
 8000738:	0018      	movs	r0, r3
 800073a:	f001 fff3 	bl	8002724 <HAL_TIM_Base_Start_IT>
			break;
 800073e:	e00f      	b.n	8000760 <automate+0x6c>
		case IDLE: //TODO start CAN IT when interrupt move to COMM
			HAL_TIM_Base_Stop_IT(&htim2);
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <automate+0x80>)
 8000742:	0018      	movs	r0, r3
 8000744:	f002 f840 	bl	80027c8 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim3);
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <automate+0x7c>)
 800074a:	0018      	movs	r0, r3
 800074c:	f002 f83c 	bl	80027c8 <HAL_TIM_Base_Stop_IT>
			setStepperOnOff(OFF);
 8000750:	2001      	movs	r0, #1
 8000752:	f000 fa0b 	bl	8000b6c <setStepperOnOff>
			break;
 8000756:	e003      	b.n	8000760 <automate+0x6c>
		case COMM: //TODO get all informations then go to begin movement
			state = IDLE;
 8000758:	4b03      	ldr	r3, [pc, #12]	; (8000768 <automate+0x74>)
 800075a:	2202      	movs	r2, #2
 800075c:	701a      	strb	r2, [r3, #0]
			break;
 800075e:	46c0      	nop			; (mov r8, r8)
	}
}
 8000760:	46c0      	nop			; (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	20000268 	.word	0x20000268
 800076c:	080037c4 	.word	0x080037c4
 8000770:	20000198 	.word	0x20000198
 8000774:	20000150 	.word	0x20000150

08000778 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2) {
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	05db      	lsls	r3, r3, #23
 8000788:	429a      	cmp	r2, r3
 800078a:	d101      	bne.n	8000790 <HAL_TIM_PeriodElapsedCallback+0x18>
		Motor_Handling();
 800078c:	f000 f92a 	bl	80009e4 <Motor_Handling>
	}
}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	b002      	add	sp, #8
 8000796:	bd80      	pop	{r7, pc}

08000798 <rotate>:

void rotate(int step, int nb_motor) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
	switch(step) {
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b03      	cmp	r3, #3
 80007a6:	d100      	bne.n	80007aa <rotate+0x12>
 80007a8:	e0d5      	b.n	8000956 <rotate+0x1be>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	dd00      	ble.n	80007b2 <rotate+0x1a>
 80007b0:	e112      	b.n	80009d8 <rotate+0x240>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d100      	bne.n	80007ba <rotate+0x22>
 80007b8:	e08c      	b.n	80008d4 <rotate+0x13c>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2b02      	cmp	r3, #2
 80007be:	dd00      	ble.n	80007c2 <rotate+0x2a>
 80007c0:	e10a      	b.n	80009d8 <rotate+0x240>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d003      	beq.n	80007d0 <rotate+0x38>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d041      	beq.n	8000852 <rotate+0xba>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[1], stepper[nb_motor].pin_nb[1], GPIO_PIN_RESET);   // IN2
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[2], stepper[nb_motor].pin_nb[2], GPIO_PIN_SET);   // IN3
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[3], stepper[nb_motor].pin_nb[3], GPIO_PIN_RESET);   // IN4
		break;
	}
}
 80007ce:	e103      	b.n	80009d8 <rotate+0x240>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[0], stepper[nb_motor].pin_nb[0], GPIO_PIN_RESET);   // IN1
 80007d0:	4a83      	ldr	r2, [pc, #524]	; (80009e0 <rotate+0x248>)
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	015b      	lsls	r3, r3, #5
 80007d6:	18d3      	adds	r3, r2, r3
 80007d8:	3308      	adds	r3, #8
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	4a80      	ldr	r2, [pc, #512]	; (80009e0 <rotate+0x248>)
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	015b      	lsls	r3, r3, #5
 80007e2:	18d3      	adds	r3, r2, r3
 80007e4:	3318      	adds	r3, #24
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	2200      	movs	r2, #0
 80007ea:	0019      	movs	r1, r3
 80007ec:	f001 f93c 	bl	8001a68 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[1], stepper[nb_motor].pin_nb[1], GPIO_PIN_SET);   // IN2
 80007f0:	4a7b      	ldr	r2, [pc, #492]	; (80009e0 <rotate+0x248>)
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	015b      	lsls	r3, r3, #5
 80007f6:	18d3      	adds	r3, r2, r3
 80007f8:	330c      	adds	r3, #12
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	4a78      	ldr	r2, [pc, #480]	; (80009e0 <rotate+0x248>)
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	015b      	lsls	r3, r3, #5
 8000802:	18d3      	adds	r3, r2, r3
 8000804:	331a      	adds	r3, #26
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	2201      	movs	r2, #1
 800080a:	0019      	movs	r1, r3
 800080c:	f001 f92c 	bl	8001a68 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[2], stepper[nb_motor].pin_nb[2], GPIO_PIN_SET);   // IN3
 8000810:	4a73      	ldr	r2, [pc, #460]	; (80009e0 <rotate+0x248>)
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	015b      	lsls	r3, r3, #5
 8000816:	18d3      	adds	r3, r2, r3
 8000818:	3310      	adds	r3, #16
 800081a:	6818      	ldr	r0, [r3, #0]
 800081c:	4a70      	ldr	r2, [pc, #448]	; (80009e0 <rotate+0x248>)
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	015b      	lsls	r3, r3, #5
 8000822:	18d3      	adds	r3, r2, r3
 8000824:	331c      	adds	r3, #28
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	2201      	movs	r2, #1
 800082a:	0019      	movs	r1, r3
 800082c:	f001 f91c 	bl	8001a68 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[3], stepper[nb_motor].pin_nb[3], GPIO_PIN_RESET);   // IN4
 8000830:	4a6b      	ldr	r2, [pc, #428]	; (80009e0 <rotate+0x248>)
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	015b      	lsls	r3, r3, #5
 8000836:	18d3      	adds	r3, r2, r3
 8000838:	3314      	adds	r3, #20
 800083a:	6818      	ldr	r0, [r3, #0]
 800083c:	4a68      	ldr	r2, [pc, #416]	; (80009e0 <rotate+0x248>)
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	015b      	lsls	r3, r3, #5
 8000842:	18d3      	adds	r3, r2, r3
 8000844:	331e      	adds	r3, #30
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	2200      	movs	r2, #0
 800084a:	0019      	movs	r1, r3
 800084c:	f001 f90c 	bl	8001a68 <HAL_GPIO_WritePin>
		break;
 8000850:	e0c2      	b.n	80009d8 <rotate+0x240>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[0], stepper[nb_motor].pin_nb[0], GPIO_PIN_RESET);   // IN1
 8000852:	4a63      	ldr	r2, [pc, #396]	; (80009e0 <rotate+0x248>)
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	015b      	lsls	r3, r3, #5
 8000858:	18d3      	adds	r3, r2, r3
 800085a:	3308      	adds	r3, #8
 800085c:	6818      	ldr	r0, [r3, #0]
 800085e:	4a60      	ldr	r2, [pc, #384]	; (80009e0 <rotate+0x248>)
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	015b      	lsls	r3, r3, #5
 8000864:	18d3      	adds	r3, r2, r3
 8000866:	3318      	adds	r3, #24
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	2200      	movs	r2, #0
 800086c:	0019      	movs	r1, r3
 800086e:	f001 f8fb 	bl	8001a68 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[1], stepper[nb_motor].pin_nb[1], GPIO_PIN_SET);   // IN2
 8000872:	4a5b      	ldr	r2, [pc, #364]	; (80009e0 <rotate+0x248>)
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	015b      	lsls	r3, r3, #5
 8000878:	18d3      	adds	r3, r2, r3
 800087a:	330c      	adds	r3, #12
 800087c:	6818      	ldr	r0, [r3, #0]
 800087e:	4a58      	ldr	r2, [pc, #352]	; (80009e0 <rotate+0x248>)
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	015b      	lsls	r3, r3, #5
 8000884:	18d3      	adds	r3, r2, r3
 8000886:	331a      	adds	r3, #26
 8000888:	881b      	ldrh	r3, [r3, #0]
 800088a:	2201      	movs	r2, #1
 800088c:	0019      	movs	r1, r3
 800088e:	f001 f8eb 	bl	8001a68 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[2], stepper[nb_motor].pin_nb[2], GPIO_PIN_RESET);   // IN3
 8000892:	4a53      	ldr	r2, [pc, #332]	; (80009e0 <rotate+0x248>)
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	015b      	lsls	r3, r3, #5
 8000898:	18d3      	adds	r3, r2, r3
 800089a:	3310      	adds	r3, #16
 800089c:	6818      	ldr	r0, [r3, #0]
 800089e:	4a50      	ldr	r2, [pc, #320]	; (80009e0 <rotate+0x248>)
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	015b      	lsls	r3, r3, #5
 80008a4:	18d3      	adds	r3, r2, r3
 80008a6:	331c      	adds	r3, #28
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	2200      	movs	r2, #0
 80008ac:	0019      	movs	r1, r3
 80008ae:	f001 f8db 	bl	8001a68 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[3], stepper[nb_motor].pin_nb[3], GPIO_PIN_SET);   // IN4
 80008b2:	4a4b      	ldr	r2, [pc, #300]	; (80009e0 <rotate+0x248>)
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	015b      	lsls	r3, r3, #5
 80008b8:	18d3      	adds	r3, r2, r3
 80008ba:	3314      	adds	r3, #20
 80008bc:	6818      	ldr	r0, [r3, #0]
 80008be:	4a48      	ldr	r2, [pc, #288]	; (80009e0 <rotate+0x248>)
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	015b      	lsls	r3, r3, #5
 80008c4:	18d3      	adds	r3, r2, r3
 80008c6:	331e      	adds	r3, #30
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	2201      	movs	r2, #1
 80008cc:	0019      	movs	r1, r3
 80008ce:	f001 f8cb 	bl	8001a68 <HAL_GPIO_WritePin>
		break;
 80008d2:	e081      	b.n	80009d8 <rotate+0x240>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[0], stepper[nb_motor].pin_nb[0], GPIO_PIN_SET);   // IN1
 80008d4:	4a42      	ldr	r2, [pc, #264]	; (80009e0 <rotate+0x248>)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	015b      	lsls	r3, r3, #5
 80008da:	18d3      	adds	r3, r2, r3
 80008dc:	3308      	adds	r3, #8
 80008de:	6818      	ldr	r0, [r3, #0]
 80008e0:	4a3f      	ldr	r2, [pc, #252]	; (80009e0 <rotate+0x248>)
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	015b      	lsls	r3, r3, #5
 80008e6:	18d3      	adds	r3, r2, r3
 80008e8:	3318      	adds	r3, #24
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	2201      	movs	r2, #1
 80008ee:	0019      	movs	r1, r3
 80008f0:	f001 f8ba 	bl	8001a68 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[1], stepper[nb_motor].pin_nb[1], GPIO_PIN_RESET);   // IN2
 80008f4:	4a3a      	ldr	r2, [pc, #232]	; (80009e0 <rotate+0x248>)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	015b      	lsls	r3, r3, #5
 80008fa:	18d3      	adds	r3, r2, r3
 80008fc:	330c      	adds	r3, #12
 80008fe:	6818      	ldr	r0, [r3, #0]
 8000900:	4a37      	ldr	r2, [pc, #220]	; (80009e0 <rotate+0x248>)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	015b      	lsls	r3, r3, #5
 8000906:	18d3      	adds	r3, r2, r3
 8000908:	331a      	adds	r3, #26
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	2200      	movs	r2, #0
 800090e:	0019      	movs	r1, r3
 8000910:	f001 f8aa 	bl	8001a68 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[2], stepper[nb_motor].pin_nb[2], GPIO_PIN_RESET);   // IN3
 8000914:	4a32      	ldr	r2, [pc, #200]	; (80009e0 <rotate+0x248>)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	015b      	lsls	r3, r3, #5
 800091a:	18d3      	adds	r3, r2, r3
 800091c:	3310      	adds	r3, #16
 800091e:	6818      	ldr	r0, [r3, #0]
 8000920:	4a2f      	ldr	r2, [pc, #188]	; (80009e0 <rotate+0x248>)
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	015b      	lsls	r3, r3, #5
 8000926:	18d3      	adds	r3, r2, r3
 8000928:	331c      	adds	r3, #28
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	2200      	movs	r2, #0
 800092e:	0019      	movs	r1, r3
 8000930:	f001 f89a 	bl	8001a68 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[3], stepper[nb_motor].pin_nb[3], GPIO_PIN_SET);   // IN4
 8000934:	4a2a      	ldr	r2, [pc, #168]	; (80009e0 <rotate+0x248>)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	015b      	lsls	r3, r3, #5
 800093a:	18d3      	adds	r3, r2, r3
 800093c:	3314      	adds	r3, #20
 800093e:	6818      	ldr	r0, [r3, #0]
 8000940:	4a27      	ldr	r2, [pc, #156]	; (80009e0 <rotate+0x248>)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	015b      	lsls	r3, r3, #5
 8000946:	18d3      	adds	r3, r2, r3
 8000948:	331e      	adds	r3, #30
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	2201      	movs	r2, #1
 800094e:	0019      	movs	r1, r3
 8000950:	f001 f88a 	bl	8001a68 <HAL_GPIO_WritePin>
		break;
 8000954:	e040      	b.n	80009d8 <rotate+0x240>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[0], stepper[nb_motor].pin_nb[0], GPIO_PIN_SET);   // IN1
 8000956:	4a22      	ldr	r2, [pc, #136]	; (80009e0 <rotate+0x248>)
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	015b      	lsls	r3, r3, #5
 800095c:	18d3      	adds	r3, r2, r3
 800095e:	3308      	adds	r3, #8
 8000960:	6818      	ldr	r0, [r3, #0]
 8000962:	4a1f      	ldr	r2, [pc, #124]	; (80009e0 <rotate+0x248>)
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	015b      	lsls	r3, r3, #5
 8000968:	18d3      	adds	r3, r2, r3
 800096a:	3318      	adds	r3, #24
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	2201      	movs	r2, #1
 8000970:	0019      	movs	r1, r3
 8000972:	f001 f879 	bl	8001a68 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[1], stepper[nb_motor].pin_nb[1], GPIO_PIN_RESET);   // IN2
 8000976:	4a1a      	ldr	r2, [pc, #104]	; (80009e0 <rotate+0x248>)
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	015b      	lsls	r3, r3, #5
 800097c:	18d3      	adds	r3, r2, r3
 800097e:	330c      	adds	r3, #12
 8000980:	6818      	ldr	r0, [r3, #0]
 8000982:	4a17      	ldr	r2, [pc, #92]	; (80009e0 <rotate+0x248>)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	015b      	lsls	r3, r3, #5
 8000988:	18d3      	adds	r3, r2, r3
 800098a:	331a      	adds	r3, #26
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	2200      	movs	r2, #0
 8000990:	0019      	movs	r1, r3
 8000992:	f001 f869 	bl	8001a68 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[2], stepper[nb_motor].pin_nb[2], GPIO_PIN_SET);   // IN3
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <rotate+0x248>)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	015b      	lsls	r3, r3, #5
 800099c:	18d3      	adds	r3, r2, r3
 800099e:	3310      	adds	r3, #16
 80009a0:	6818      	ldr	r0, [r3, #0]
 80009a2:	4a0f      	ldr	r2, [pc, #60]	; (80009e0 <rotate+0x248>)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	015b      	lsls	r3, r3, #5
 80009a8:	18d3      	adds	r3, r2, r3
 80009aa:	331c      	adds	r3, #28
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	2201      	movs	r2, #1
 80009b0:	0019      	movs	r1, r3
 80009b2:	f001 f859 	bl	8001a68 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(stepper[nb_motor].pin[3], stepper[nb_motor].pin_nb[3], GPIO_PIN_RESET);   // IN4
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <rotate+0x248>)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	015b      	lsls	r3, r3, #5
 80009bc:	18d3      	adds	r3, r2, r3
 80009be:	3314      	adds	r3, #20
 80009c0:	6818      	ldr	r0, [r3, #0]
 80009c2:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <rotate+0x248>)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	015b      	lsls	r3, r3, #5
 80009c8:	18d3      	adds	r3, r2, r3
 80009ca:	331e      	adds	r3, #30
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	2200      	movs	r2, #0
 80009d0:	0019      	movs	r1, r3
 80009d2:	f001 f849 	bl	8001a68 <HAL_GPIO_WritePin>
		break;
 80009d6:	46c0      	nop			; (mov r8, r8)
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	b002      	add	sp, #8
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000000 	.word	0x20000000

080009e4 <Motor_Handling>:

void Motor_Handling() {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
	static int nb_motor=0;

	uint16_t timer2 = __HAL_TIM_GetCounter(&htim3);
 80009ea:	4b4f      	ldr	r3, [pc, #316]	; (8000b28 <Motor_Handling+0x144>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80009f0:	1dbb      	adds	r3, r7, #6
 80009f2:	801a      	strh	r2, [r3, #0]
	if(timer2 >= stepper[nb_motor].timer) {
 80009f4:	4b4d      	ldr	r3, [pc, #308]	; (8000b2c <Motor_Handling+0x148>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a4d      	ldr	r2, [pc, #308]	; (8000b30 <Motor_Handling+0x14c>)
 80009fa:	015b      	lsls	r3, r3, #5
 80009fc:	18d3      	adds	r3, r2, r3
 80009fe:	3304      	adds	r3, #4
 8000a00:	881b      	ldrh	r3, [r3, #0]
 8000a02:	1dba      	adds	r2, r7, #6
 8000a04:	8812      	ldrh	r2, [r2, #0]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d306      	bcc.n	8000a18 <Motor_Handling+0x34>
			stepper[nb_motor].state = OFF;
 8000a0a:	4b48      	ldr	r3, [pc, #288]	; (8000b2c <Motor_Handling+0x148>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	4b48      	ldr	r3, [pc, #288]	; (8000b30 <Motor_Handling+0x14c>)
 8000a10:	0152      	lsls	r2, r2, #5
 8000a12:	2101      	movs	r1, #1
 8000a14:	54d1      	strb	r1, [r2, r3]
 8000a16:	e077      	b.n	8000b08 <Motor_Handling+0x124>
	} else {
		if(stepper[nb_motor].state == ON) { //skip step if nb_motor is OFF
 8000a18:	4b44      	ldr	r3, [pc, #272]	; (8000b2c <Motor_Handling+0x148>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b44      	ldr	r3, [pc, #272]	; (8000b30 <Motor_Handling+0x14c>)
 8000a1e:	0152      	lsls	r2, r2, #5
 8000a20:	5cd3      	ldrb	r3, [r2, r3]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d170      	bne.n	8000b08 <Motor_Handling+0x124>
			if(stepper[nb_motor].way == DOWN) { //change order (3->0 / 0->3) of steps to correspond to wanted direction
 8000a26:	4b41      	ldr	r3, [pc, #260]	; (8000b2c <Motor_Handling+0x148>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a41      	ldr	r2, [pc, #260]	; (8000b30 <Motor_Handling+0x14c>)
 8000a2c:	015b      	lsls	r3, r3, #5
 8000a2e:	18d3      	adds	r3, r2, r3
 8000a30:	3301      	adds	r3, #1
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d12f      	bne.n	8000a98 <Motor_Handling+0xb4>
				rotate(stepper[nb_motor].step, nb_motor);
 8000a38:	4b3c      	ldr	r3, [pc, #240]	; (8000b2c <Motor_Handling+0x148>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a3c      	ldr	r2, [pc, #240]	; (8000b30 <Motor_Handling+0x14c>)
 8000a3e:	015b      	lsls	r3, r3, #5
 8000a40:	18d3      	adds	r3, r2, r3
 8000a42:	3302      	adds	r3, #2
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	001a      	movs	r2, r3
 8000a48:	4b38      	ldr	r3, [pc, #224]	; (8000b2c <Motor_Handling+0x148>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	0010      	movs	r0, r2
 8000a50:	f7ff fea2 	bl	8000798 <rotate>
				if(stepper[nb_motor].step>=3) stepper[nb_motor].step = 0;
 8000a54:	4b35      	ldr	r3, [pc, #212]	; (8000b2c <Motor_Handling+0x148>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a35      	ldr	r2, [pc, #212]	; (8000b30 <Motor_Handling+0x14c>)
 8000a5a:	015b      	lsls	r3, r3, #5
 8000a5c:	18d3      	adds	r3, r2, r3
 8000a5e:	3302      	adds	r3, #2
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d908      	bls.n	8000a78 <Motor_Handling+0x94>
 8000a66:	4b31      	ldr	r3, [pc, #196]	; (8000b2c <Motor_Handling+0x148>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a31      	ldr	r2, [pc, #196]	; (8000b30 <Motor_Handling+0x14c>)
 8000a6c:	015b      	lsls	r3, r3, #5
 8000a6e:	18d3      	adds	r3, r2, r3
 8000a70:	3302      	adds	r3, #2
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	e047      	b.n	8000b08 <Motor_Handling+0x124>
				else stepper[nb_motor].step++;
 8000a78:	4b2c      	ldr	r3, [pc, #176]	; (8000b2c <Motor_Handling+0x148>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	492c      	ldr	r1, [pc, #176]	; (8000b30 <Motor_Handling+0x14c>)
 8000a7e:	015a      	lsls	r2, r3, #5
 8000a80:	188a      	adds	r2, r1, r2
 8000a82:	3202      	adds	r2, #2
 8000a84:	7812      	ldrb	r2, [r2, #0]
 8000a86:	3201      	adds	r2, #1
 8000a88:	b2d1      	uxtb	r1, r2
 8000a8a:	4a29      	ldr	r2, [pc, #164]	; (8000b30 <Motor_Handling+0x14c>)
 8000a8c:	015b      	lsls	r3, r3, #5
 8000a8e:	18d3      	adds	r3, r2, r3
 8000a90:	3302      	adds	r3, #2
 8000a92:	1c0a      	adds	r2, r1, #0
 8000a94:	701a      	strb	r2, [r3, #0]
 8000a96:	e037      	b.n	8000b08 <Motor_Handling+0x124>
			} else if(stepper[nb_motor].way == UP){
 8000a98:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <Motor_Handling+0x148>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a24      	ldr	r2, [pc, #144]	; (8000b30 <Motor_Handling+0x14c>)
 8000a9e:	015b      	lsls	r3, r3, #5
 8000aa0:	18d3      	adds	r3, r2, r3
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d12e      	bne.n	8000b08 <Motor_Handling+0x124>
				rotate(stepper[nb_motor].step, nb_motor);
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <Motor_Handling+0x148>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a20      	ldr	r2, [pc, #128]	; (8000b30 <Motor_Handling+0x14c>)
 8000ab0:	015b      	lsls	r3, r3, #5
 8000ab2:	18d3      	adds	r3, r2, r3
 8000ab4:	3302      	adds	r3, #2
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	001a      	movs	r2, r3
 8000aba:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <Motor_Handling+0x148>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	0019      	movs	r1, r3
 8000ac0:	0010      	movs	r0, r2
 8000ac2:	f7ff fe69 	bl	8000798 <rotate>
				if(stepper[nb_motor].step<=0) stepper[nb_motor].step = 3;
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <Motor_Handling+0x148>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a19      	ldr	r2, [pc, #100]	; (8000b30 <Motor_Handling+0x14c>)
 8000acc:	015b      	lsls	r3, r3, #5
 8000ace:	18d3      	adds	r3, r2, r3
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d108      	bne.n	8000aea <Motor_Handling+0x106>
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <Motor_Handling+0x148>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <Motor_Handling+0x14c>)
 8000ade:	015b      	lsls	r3, r3, #5
 8000ae0:	18d3      	adds	r3, r2, r3
 8000ae2:	3302      	adds	r3, #2
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	701a      	strb	r2, [r3, #0]
 8000ae8:	e00e      	b.n	8000b08 <Motor_Handling+0x124>
				else stepper[nb_motor].step--;
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <Motor_Handling+0x148>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4910      	ldr	r1, [pc, #64]	; (8000b30 <Motor_Handling+0x14c>)
 8000af0:	015a      	lsls	r2, r3, #5
 8000af2:	188a      	adds	r2, r1, r2
 8000af4:	3202      	adds	r2, #2
 8000af6:	7812      	ldrb	r2, [r2, #0]
 8000af8:	3a01      	subs	r2, #1
 8000afa:	b2d1      	uxtb	r1, r2
 8000afc:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <Motor_Handling+0x14c>)
 8000afe:	015b      	lsls	r3, r3, #5
 8000b00:	18d3      	adds	r3, r2, r3
 8000b02:	3302      	adds	r3, #2
 8000b04:	1c0a      	adds	r2, r1, #0
 8000b06:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	nb_motor++;
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <Motor_Handling+0x148>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	1c5a      	adds	r2, r3, #1
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <Motor_Handling+0x148>)
 8000b10:	601a      	str	r2, [r3, #0]
	if(nb_motor >=8) nb_motor=0;
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <Motor_Handling+0x148>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b07      	cmp	r3, #7
 8000b18:	dd02      	ble.n	8000b20 <Motor_Handling+0x13c>
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <Motor_Handling+0x148>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b002      	add	sp, #8
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000198 	.word	0x20000198
 8000b2c:	2000026c 	.word	0x2000026c
 8000b30:	20000000 	.word	0x20000000

08000b34 <setStepperSens>:

//Put every motor in the same direction
void setStepperSens(enum SENS s) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	701a      	strb	r2, [r3, #0]
	for(int j; j<8; j++) {
 8000b40:	e00a      	b.n	8000b58 <setStepperSens+0x24>
		stepper[j].way = s;
 8000b42:	4a09      	ldr	r2, [pc, #36]	; (8000b68 <setStepperSens+0x34>)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	015b      	lsls	r3, r3, #5
 8000b48:	18d3      	adds	r3, r2, r3
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	1dfa      	adds	r2, r7, #7
 8000b4e:	7812      	ldrb	r2, [r2, #0]
 8000b50:	701a      	strb	r2, [r3, #0]
	for(int j; j<8; j++) {
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3301      	adds	r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2b07      	cmp	r3, #7
 8000b5c:	ddf1      	ble.n	8000b42 <setStepperSens+0xe>
	}
}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b004      	add	sp, #16
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000000 	.word	0x20000000

08000b6c <setStepperOnOff>:

//Put every motor in the same state
void setStepperOnOff(enum ONOFF o) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b084      	sub	sp, #16
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	0002      	movs	r2, r0
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	701a      	strb	r2, [r3, #0]
	for(int j; j<8; j++) {
 8000b78:	e008      	b.n	8000b8c <setStepperOnOff+0x20>
		stepper[j].state = o;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <setStepperOnOff+0x30>)
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	0152      	lsls	r2, r2, #5
 8000b80:	1df9      	adds	r1, r7, #7
 8000b82:	7809      	ldrb	r1, [r1, #0]
 8000b84:	54d1      	strb	r1, [r2, r3]
	for(int j; j<8; j++) {
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2b07      	cmp	r3, #7
 8000b90:	ddf3      	ble.n	8000b7a <setStepperOnOff+0xe>
	}
}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b004      	add	sp, #16
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000000 	.word	0x20000000

08000ba0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba4:	b672      	cpsid	i
}
 8000ba6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <Error_Handler+0x8>
	...

08000bac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bb4:	699a      	ldr	r2, [r3, #24]
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	619a      	str	r2, [r3, #24]
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bcc:	69da      	ldr	r2, [r3, #28]
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bd0:	2180      	movs	r1, #128	; 0x80
 8000bd2:	0549      	lsls	r1, r1, #21
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	61da      	str	r2, [r3, #28]
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_MspInit+0x44>)
 8000bda:	69da      	ldr	r2, [r3, #28]
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	055b      	lsls	r3, r3, #21
 8000be0:	4013      	ands	r3, r2
 8000be2:	603b      	str	r3, [r7, #0]
 8000be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b08b      	sub	sp, #44	; 0x2c
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfc:	2414      	movs	r4, #20
 8000bfe:	193b      	adds	r3, r7, r4
 8000c00:	0018      	movs	r0, r3
 8000c02:	2314      	movs	r3, #20
 8000c04:	001a      	movs	r2, r3
 8000c06:	2100      	movs	r1, #0
 8000c08:	f002 fda4 	bl	8003754 <memset>
  if(hcan->Instance==CAN)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a21      	ldr	r2, [pc, #132]	; (8000c98 <HAL_CAN_MspInit+0xa4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d13b      	bne.n	8000c8e <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c16:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <HAL_CAN_MspInit+0xa8>)
 8000c18:	69da      	ldr	r2, [r3, #28]
 8000c1a:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <HAL_CAN_MspInit+0xa8>)
 8000c1c:	2180      	movs	r1, #128	; 0x80
 8000c1e:	0489      	lsls	r1, r1, #18
 8000c20:	430a      	orrs	r2, r1
 8000c22:	61da      	str	r2, [r3, #28]
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <HAL_CAN_MspInit+0xa8>)
 8000c26:	69da      	ldr	r2, [r3, #28]
 8000c28:	2380      	movs	r3, #128	; 0x80
 8000c2a:	049b      	lsls	r3, r3, #18
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <HAL_CAN_MspInit+0xa8>)
 8000c34:	695a      	ldr	r2, [r3, #20]
 8000c36:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <HAL_CAN_MspInit+0xa8>)
 8000c38:	2180      	movs	r1, #128	; 0x80
 8000c3a:	0289      	lsls	r1, r1, #10
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	615a      	str	r2, [r3, #20]
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <HAL_CAN_MspInit+0xa8>)
 8000c42:	695a      	ldr	r2, [r3, #20]
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	029b      	lsls	r3, r3, #10
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	22c0      	movs	r2, #192	; 0xc0
 8000c52:	0152      	lsls	r2, r2, #5
 8000c54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	0021      	movs	r1, r4
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	2203      	movs	r2, #3
 8000c68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000c6a:	187b      	adds	r3, r7, r1
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	187a      	adds	r2, r7, r1
 8000c72:	2390      	movs	r3, #144	; 0x90
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 fd7d 	bl	8001778 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	201e      	movs	r0, #30
 8000c84:	f000 fd46 	bl	8001714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000c88:	201e      	movs	r0, #30
 8000c8a:	f000 fd58 	bl	800173e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b00b      	add	sp, #44	; 0x2c
 8000c94:	bd90      	pop	{r4, r7, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	40006400 	.word	0x40006400
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	05db      	lsls	r3, r3, #23
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d114      	bne.n	8000cde <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_TIM_Base_MspInit+0x68>)
 8000cb6:	69da      	ldr	r2, [r3, #28]
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <HAL_TIM_Base_MspInit+0x68>)
 8000cba:	2101      	movs	r1, #1
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	61da      	str	r2, [r3, #28]
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_TIM_Base_MspInit+0x68>)
 8000cc2:	69db      	ldr	r3, [r3, #28]
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	200f      	movs	r0, #15
 8000cd2:	f000 fd1f 	bl	8001714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cd6:	200f      	movs	r0, #15
 8000cd8:	f000 fd31 	bl	800173e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000cdc:	e010      	b.n	8000d00 <HAL_TIM_Base_MspInit+0x60>
  else if(htim_base->Instance==TIM3)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <HAL_TIM_Base_MspInit+0x6c>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d10b      	bne.n	8000d00 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <HAL_TIM_Base_MspInit+0x68>)
 8000cea:	69da      	ldr	r2, [r3, #28]
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_TIM_Base_MspInit+0x68>)
 8000cee:	2102      	movs	r1, #2
 8000cf0:	430a      	orrs	r2, r1
 8000cf2:	61da      	str	r2, [r3, #28]
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <HAL_TIM_Base_MspInit+0x68>)
 8000cf6:	69db      	ldr	r3, [r3, #28]
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
}
 8000d00:	46c0      	nop			; (mov r8, r8)
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b004      	add	sp, #16
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40000400 	.word	0x40000400

08000d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b08b      	sub	sp, #44	; 0x2c
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	2414      	movs	r4, #20
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	2314      	movs	r3, #20
 8000d20:	001a      	movs	r2, r3
 8000d22:	2100      	movs	r1, #0
 8000d24:	f002 fd16 	bl	8003754 <memset>
  if(huart->Instance==USART1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a1d      	ldr	r2, [pc, #116]	; (8000da4 <HAL_UART_MspInit+0x94>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d133      	bne.n	8000d9a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d32:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <HAL_UART_MspInit+0x98>)
 8000d34:	699a      	ldr	r2, [r3, #24]
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <HAL_UART_MspInit+0x98>)
 8000d38:	2180      	movs	r1, #128	; 0x80
 8000d3a:	01c9      	lsls	r1, r1, #7
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	619a      	str	r2, [r3, #24]
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_UART_MspInit+0x98>)
 8000d42:	699a      	ldr	r2, [r3, #24]
 8000d44:	2380      	movs	r3, #128	; 0x80
 8000d46:	01db      	lsls	r3, r3, #7
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4e:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_UART_MspInit+0x98>)
 8000d50:	695a      	ldr	r2, [r3, #20]
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_UART_MspInit+0x98>)
 8000d54:	2180      	movs	r1, #128	; 0x80
 8000d56:	0289      	lsls	r1, r1, #10
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	615a      	str	r2, [r3, #20]
 8000d5c:	4b12      	ldr	r3, [pc, #72]	; (8000da8 <HAL_UART_MspInit+0x98>)
 8000d5e:	695a      	ldr	r2, [r3, #20]
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	029b      	lsls	r3, r3, #10
 8000d64:	4013      	ands	r3, r2
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d6a:	193b      	adds	r3, r7, r4
 8000d6c:	22c0      	movs	r2, #192	; 0xc0
 8000d6e:	00d2      	lsls	r2, r2, #3
 8000d70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	0021      	movs	r1, r4
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	2202      	movs	r2, #2
 8000d78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	2203      	movs	r2, #3
 8000d84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	2201      	movs	r2, #1
 8000d8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	187a      	adds	r2, r7, r1
 8000d8e:	2390      	movs	r3, #144	; 0x90
 8000d90:	05db      	lsls	r3, r3, #23
 8000d92:	0011      	movs	r1, r2
 8000d94:	0018      	movs	r0, r3
 8000d96:	f000 fcef 	bl	8001778 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b00b      	add	sp, #44	; 0x2c
 8000da0:	bd90      	pop	{r4, r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	40013800 	.word	0x40013800
 8000da8:	40021000 	.word	0x40021000

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db0:	e7fe      	b.n	8000db0 <NMI_Handler+0x4>

08000db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <HardFault_Handler+0x4>

08000db8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f894 	bl	8000efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <TIM2_IRQHandler+0x14>)
 8000de2:	0018      	movs	r0, r3
 8000de4:	f001 fd1e 	bl	8002824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	20000150 	.word	0x20000150

08000df4 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <CEC_CAN_IRQHandler+0x14>)
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f000 f9c2 	bl	8001184 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	20000128 	.word	0x20000128

08000e0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e1a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e1c:	f7ff fff6 	bl	8000e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e20:	480c      	ldr	r0, [pc, #48]	; (8000e54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e22:	490d      	ldr	r1, [pc, #52]	; (8000e58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e24:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <LoopForever+0xe>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e38:	4c0a      	ldr	r4, [pc, #40]	; (8000e64 <LoopForever+0x16>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e46:	f002 fc8d 	bl	8003764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e4a:	f7ff f9e9 	bl	8000220 <main>

08000e4e <LoopForever>:

LoopForever:
    b LoopForever
 8000e4e:	e7fe      	b.n	8000e4e <LoopForever>
  ldr   r0, =_estack
 8000e50:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8000e5c:	08003818 	.word	0x08003818
  ldr r2, =_sbss
 8000e60:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8000e64:	20000274 	.word	0x20000274

08000e68 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC1_COMP_IRQHandler>
	...

08000e6c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <HAL_Init+0x24>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_Init+0x24>)
 8000e76:	2110      	movs	r1, #16
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 f809 	bl	8000e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e82:	f7ff fe93 	bl	8000bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	0018      	movs	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	40022000 	.word	0x40022000

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b590      	push	{r4, r7, lr}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <HAL_InitTick+0x5c>)
 8000e9e:	681c      	ldr	r4, [r3, #0]
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_InitTick+0x60>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	23fa      	movs	r3, #250	; 0xfa
 8000ea8:	0098      	lsls	r0, r3, #2
 8000eaa:	f7ff f92d 	bl	8000108 <__udivsi3>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	0019      	movs	r1, r3
 8000eb2:	0020      	movs	r0, r4
 8000eb4:	f7ff f928 	bl	8000108 <__udivsi3>
 8000eb8:	0003      	movs	r3, r0
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f000 fc4f 	bl	800175e <HAL_SYSTICK_Config>
 8000ec0:	1e03      	subs	r3, r0, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e00f      	b.n	8000ee8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	d80b      	bhi.n	8000ee6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	425b      	negs	r3, r3
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f000 fc1c 	bl	8001714 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_InitTick+0x64>)
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e000      	b.n	8000ee8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b003      	add	sp, #12
 8000eee:	bd90      	pop	{r4, r7, pc}
 8000ef0:	20000100 	.word	0x20000100
 8000ef4:	20000108 	.word	0x20000108
 8000ef8:	20000104 	.word	0x20000104

08000efc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_IncTick+0x1c>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	001a      	movs	r2, r3
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <HAL_IncTick+0x20>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	18d2      	adds	r2, r2, r3
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_IncTick+0x20>)
 8000f0e:	601a      	str	r2, [r3, #0]
}
 8000f10:	46c0      	nop			; (mov r8, r8)
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	20000108 	.word	0x20000108
 8000f1c:	20000270 	.word	0x20000270

08000f20 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b02      	ldr	r3, [pc, #8]	; (8000f30 <HAL_GetTick+0x10>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	0018      	movs	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	20000270 	.word	0x20000270

08000f34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e0f0      	b.n	8001128 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2220      	movs	r2, #32
 8000f4a:	5c9b      	ldrb	r3, [r3, r2]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d103      	bne.n	8000f5a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff fe4d 	bl	8000bf4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2101      	movs	r1, #1
 8000f66:	430a      	orrs	r2, r1
 8000f68:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f6a:	f7ff ffd9 	bl	8000f20 <HAL_GetTick>
 8000f6e:	0003      	movs	r3, r0
 8000f70:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f72:	e013      	b.n	8000f9c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f74:	f7ff ffd4 	bl	8000f20 <HAL_GetTick>
 8000f78:	0002      	movs	r2, r0
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b0a      	cmp	r3, #10
 8000f80:	d90c      	bls.n	8000f9c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	0292      	lsls	r2, r2, #10
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2220      	movs	r2, #32
 8000f94:	2105      	movs	r1, #5
 8000f96:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e0c5      	b.n	8001128 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d0e5      	beq.n	8000f74 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	438a      	bics	r2, r1
 8000fb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fb8:	f7ff ffb2 	bl	8000f20 <HAL_GetTick>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fc0:	e013      	b.n	8000fea <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fc2:	f7ff ffad 	bl	8000f20 <HAL_GetTick>
 8000fc6:	0002      	movs	r2, r0
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b0a      	cmp	r3, #10
 8000fce:	d90c      	bls.n	8000fea <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	2280      	movs	r2, #128	; 0x80
 8000fd6:	0292      	lsls	r2, r2, #10
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	2105      	movs	r1, #5
 8000fe4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e09e      	b.n	8001128 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d1e5      	bne.n	8000fc2 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	7e1b      	ldrb	r3, [r3, #24]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d108      	bne.n	8001010 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2180      	movs	r1, #128	; 0x80
 800100a:	430a      	orrs	r2, r1
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	e007      	b.n	8001020 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2180      	movs	r1, #128	; 0x80
 800101c:	438a      	bics	r2, r1
 800101e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7e5b      	ldrb	r3, [r3, #25]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d108      	bne.n	800103a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2140      	movs	r1, #64	; 0x40
 8001034:	430a      	orrs	r2, r1
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	e007      	b.n	800104a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2140      	movs	r1, #64	; 0x40
 8001046:	438a      	bics	r2, r1
 8001048:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	7e9b      	ldrb	r3, [r3, #26]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d108      	bne.n	8001064 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2120      	movs	r1, #32
 800105e:	430a      	orrs	r2, r1
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	e007      	b.n	8001074 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2120      	movs	r1, #32
 8001070:	438a      	bics	r2, r1
 8001072:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7edb      	ldrb	r3, [r3, #27]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d108      	bne.n	800108e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2110      	movs	r1, #16
 8001088:	438a      	bics	r2, r1
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	e007      	b.n	800109e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2110      	movs	r1, #16
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	7f1b      	ldrb	r3, [r3, #28]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d108      	bne.n	80010b8 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2108      	movs	r1, #8
 80010b2:	430a      	orrs	r2, r1
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	e007      	b.n	80010c8 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2108      	movs	r1, #8
 80010c4:	438a      	bics	r2, r1
 80010c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	7f5b      	ldrb	r3, [r3, #29]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d108      	bne.n	80010e2 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2104      	movs	r1, #4
 80010dc:	430a      	orrs	r2, r1
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	e007      	b.n	80010f2 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2104      	movs	r1, #4
 80010ee:	438a      	bics	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	431a      	orrs	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	431a      	orrs	r2, r3
 8001108:	0011      	movs	r1, r2
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	1e5a      	subs	r2, r3, #1
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2220      	movs	r2, #32
 8001122:	2101      	movs	r1, #1
 8001124:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
}
 8001128:	0018      	movs	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	b004      	add	sp, #16
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800113a:	200f      	movs	r0, #15
 800113c:	183b      	adds	r3, r7, r0
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	2120      	movs	r1, #32
 8001142:	5c52      	ldrb	r2, [r2, r1]
 8001144:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001146:	0002      	movs	r2, r0
 8001148:	18bb      	adds	r3, r7, r2
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d003      	beq.n	8001158 <HAL_CAN_ActivateNotification+0x28>
 8001150:	18bb      	adds	r3, r7, r2
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d109      	bne.n	800116c <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6959      	ldr	r1, [r3, #20]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	430a      	orrs	r2, r1
 8001166:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001168:	2300      	movs	r3, #0
 800116a:	e007      	b.n	800117c <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	02d2      	lsls	r2, r2, #11
 8001174:	431a      	orrs	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
  }
}
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	b004      	add	sp, #16
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	2201      	movs	r2, #1
 80011c4:	4013      	ands	r3, r2
 80011c6:	d100      	bne.n	80011ca <HAL_CAN_IRQHandler+0x46>
 80011c8:	e084      	b.n	80012d4 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	2201      	movs	r2, #1
 80011ce:	4013      	ands	r3, r2
 80011d0:	d024      	beq.n	800121c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2201      	movs	r2, #1
 80011d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	2202      	movs	r2, #2
 80011de:	4013      	ands	r3, r2
 80011e0:	d004      	beq.n	80011ec <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	0018      	movs	r0, r3
 80011e6:	f000 f981 	bl	80014ec <HAL_CAN_TxMailbox0CompleteCallback>
 80011ea:	e017      	b.n	800121c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	2204      	movs	r2, #4
 80011f0:	4013      	ands	r3, r2
 80011f2:	d005      	beq.n	8001200 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	2280      	movs	r2, #128	; 0x80
 80011f8:	0112      	lsls	r2, r2, #4
 80011fa:	4313      	orrs	r3, r2
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
 80011fe:	e00d      	b.n	800121c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	2208      	movs	r2, #8
 8001204:	4013      	ands	r3, r2
 8001206:	d005      	beq.n	8001214 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	0152      	lsls	r2, r2, #5
 800120e:	4313      	orrs	r3, r2
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
 8001212:	e003      	b.n	800121c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	0018      	movs	r0, r3
 8001218:	f000 f980 	bl	800151c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4013      	ands	r3, r2
 8001224:	d028      	beq.n	8001278 <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2280      	movs	r2, #128	; 0x80
 800122c:	0052      	lsls	r2, r2, #1
 800122e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4013      	ands	r3, r2
 8001238:	d004      	beq.n	8001244 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	0018      	movs	r0, r3
 800123e:	f000 f95d 	bl	80014fc <HAL_CAN_TxMailbox1CompleteCallback>
 8001242:	e019      	b.n	8001278 <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4013      	ands	r3, r2
 800124c:	d005      	beq.n	800125a <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	2280      	movs	r2, #128	; 0x80
 8001252:	0192      	lsls	r2, r2, #6
 8001254:	4313      	orrs	r3, r2
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
 8001258:	e00e      	b.n	8001278 <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	4013      	ands	r3, r2
 8001262:	d005      	beq.n	8001270 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	01d2      	lsls	r2, r2, #7
 800126a:	4313      	orrs	r3, r2
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
 800126e:	e003      	b.n	8001278 <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	0018      	movs	r0, r3
 8001274:	f000 f95a 	bl	800152c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	025b      	lsls	r3, r3, #9
 800127e:	4013      	ands	r3, r2
 8001280:	d028      	beq.n	80012d4 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2280      	movs	r2, #128	; 0x80
 8001288:	0252      	lsls	r2, r2, #9
 800128a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	029b      	lsls	r3, r3, #10
 8001292:	4013      	ands	r3, r2
 8001294:	d004      	beq.n	80012a0 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	0018      	movs	r0, r3
 800129a:	f000 f937 	bl	800150c <HAL_CAN_TxMailbox2CompleteCallback>
 800129e:	e019      	b.n	80012d4 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	02db      	lsls	r3, r3, #11
 80012a6:	4013      	ands	r3, r2
 80012a8:	d005      	beq.n	80012b6 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	0212      	lsls	r2, r2, #8
 80012b0:	4313      	orrs	r3, r2
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
 80012b4:	e00e      	b.n	80012d4 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	031b      	lsls	r3, r3, #12
 80012bc:	4013      	ands	r3, r2
 80012be:	d005      	beq.n	80012cc <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	2280      	movs	r2, #128	; 0x80
 80012c4:	0252      	lsls	r2, r2, #9
 80012c6:	4313      	orrs	r3, r2
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ca:	e003      	b.n	80012d4 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	0018      	movs	r0, r3
 80012d0:	f000 f934 	bl	800153c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	2208      	movs	r2, #8
 80012d8:	4013      	ands	r3, r2
 80012da:	d00c      	beq.n	80012f6 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	2210      	movs	r2, #16
 80012e0:	4013      	ands	r3, r2
 80012e2:	d008      	beq.n	80012f6 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	2280      	movs	r2, #128	; 0x80
 80012e8:	0092      	lsls	r2, r2, #2
 80012ea:	4313      	orrs	r3, r2
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2210      	movs	r2, #16
 80012f4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	2204      	movs	r2, #4
 80012fa:	4013      	ands	r3, r2
 80012fc:	d00b      	beq.n	8001316 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	2208      	movs	r2, #8
 8001302:	4013      	ands	r3, r2
 8001304:	d007      	beq.n	8001316 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2208      	movs	r2, #8
 800130c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	0018      	movs	r0, r3
 8001312:	f000 f923 	bl	800155c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	2202      	movs	r2, #2
 800131a:	4013      	ands	r3, r2
 800131c:	d009      	beq.n	8001332 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	2203      	movs	r2, #3
 8001326:	4013      	ands	r3, r2
 8001328:	d003      	beq.n	8001332 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	0018      	movs	r0, r3
 800132e:	f000 f90d 	bl	800154c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001332:	6a3b      	ldr	r3, [r7, #32]
 8001334:	2240      	movs	r2, #64	; 0x40
 8001336:	4013      	ands	r3, r2
 8001338:	d00c      	beq.n	8001354 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	2210      	movs	r2, #16
 800133e:	4013      	ands	r3, r2
 8001340:	d008      	beq.n	8001354 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	2280      	movs	r2, #128	; 0x80
 8001346:	00d2      	lsls	r2, r2, #3
 8001348:	4313      	orrs	r3, r2
 800134a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2210      	movs	r2, #16
 8001352:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	2220      	movs	r2, #32
 8001358:	4013      	ands	r3, r2
 800135a:	d00b      	beq.n	8001374 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	2208      	movs	r2, #8
 8001360:	4013      	ands	r3, r2
 8001362:	d007      	beq.n	8001374 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2208      	movs	r2, #8
 800136a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	0018      	movs	r0, r3
 8001370:	f000 f904 	bl	800157c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001374:	6a3b      	ldr	r3, [r7, #32]
 8001376:	2210      	movs	r2, #16
 8001378:	4013      	ands	r3, r2
 800137a:	d009      	beq.n	8001390 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	2203      	movs	r2, #3
 8001384:	4013      	ands	r3, r2
 8001386:	d003      	beq.n	8001390 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	0018      	movs	r0, r3
 800138c:	f000 f8ee 	bl	800156c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001390:	6a3a      	ldr	r2, [r7, #32]
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	029b      	lsls	r3, r3, #10
 8001396:	4013      	ands	r3, r2
 8001398:	d00b      	beq.n	80013b2 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	2210      	movs	r2, #16
 800139e:	4013      	ands	r3, r2
 80013a0:	d007      	beq.n	80013b2 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2210      	movs	r2, #16
 80013a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	0018      	movs	r0, r3
 80013ae:	f000 f8ed 	bl	800158c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80013b2:	6a3a      	ldr	r2, [r7, #32]
 80013b4:	2380      	movs	r3, #128	; 0x80
 80013b6:	025b      	lsls	r3, r3, #9
 80013b8:	4013      	ands	r3, r2
 80013ba:	d00b      	beq.n	80013d4 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	2208      	movs	r2, #8
 80013c0:	4013      	ands	r3, r2
 80013c2:	d007      	beq.n	80013d4 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2208      	movs	r2, #8
 80013ca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	0018      	movs	r0, r3
 80013d0:	f000 f8e4 	bl	800159c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80013d4:	6a3a      	ldr	r2, [r7, #32]
 80013d6:	2380      	movs	r3, #128	; 0x80
 80013d8:	021b      	lsls	r3, r3, #8
 80013da:	4013      	ands	r3, r2
 80013dc:	d100      	bne.n	80013e0 <HAL_CAN_IRQHandler+0x25c>
 80013de:	e074      	b.n	80014ca <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	2204      	movs	r2, #4
 80013e4:	4013      	ands	r3, r2
 80013e6:	d100      	bne.n	80013ea <HAL_CAN_IRQHandler+0x266>
 80013e8:	e06b      	b.n	80014c2 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013ea:	6a3a      	ldr	r2, [r7, #32]
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4013      	ands	r3, r2
 80013f2:	d007      	beq.n	8001404 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2201      	movs	r2, #1
 80013f8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013fa:	d003      	beq.n	8001404 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	2201      	movs	r2, #1
 8001400:	4313      	orrs	r3, r2
 8001402:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001404:	6a3a      	ldr	r2, [r7, #32]
 8001406:	2380      	movs	r3, #128	; 0x80
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4013      	ands	r3, r2
 800140c:	d007      	beq.n	800141e <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2202      	movs	r2, #2
 8001412:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001414:	d003      	beq.n	800141e <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	2202      	movs	r2, #2
 800141a:	4313      	orrs	r3, r2
 800141c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800141e:	6a3a      	ldr	r2, [r7, #32]
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4013      	ands	r3, r2
 8001426:	d007      	beq.n	8001438 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2204      	movs	r2, #4
 800142c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800142e:	d003      	beq.n	8001438 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	2204      	movs	r2, #4
 8001434:	4313      	orrs	r3, r2
 8001436:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001438:	6a3a      	ldr	r2, [r7, #32]
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	011b      	lsls	r3, r3, #4
 800143e:	4013      	ands	r3, r2
 8001440:	d03f      	beq.n	80014c2 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2270      	movs	r2, #112	; 0x70
 8001446:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001448:	d03b      	beq.n	80014c2 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2270      	movs	r2, #112	; 0x70
 800144e:	4013      	ands	r3, r2
 8001450:	2b60      	cmp	r3, #96	; 0x60
 8001452:	d027      	beq.n	80014a4 <HAL_CAN_IRQHandler+0x320>
 8001454:	d82c      	bhi.n	80014b0 <HAL_CAN_IRQHandler+0x32c>
 8001456:	2b50      	cmp	r3, #80	; 0x50
 8001458:	d01f      	beq.n	800149a <HAL_CAN_IRQHandler+0x316>
 800145a:	d829      	bhi.n	80014b0 <HAL_CAN_IRQHandler+0x32c>
 800145c:	2b40      	cmp	r3, #64	; 0x40
 800145e:	d017      	beq.n	8001490 <HAL_CAN_IRQHandler+0x30c>
 8001460:	d826      	bhi.n	80014b0 <HAL_CAN_IRQHandler+0x32c>
 8001462:	2b30      	cmp	r3, #48	; 0x30
 8001464:	d00f      	beq.n	8001486 <HAL_CAN_IRQHandler+0x302>
 8001466:	d823      	bhi.n	80014b0 <HAL_CAN_IRQHandler+0x32c>
 8001468:	2b10      	cmp	r3, #16
 800146a:	d002      	beq.n	8001472 <HAL_CAN_IRQHandler+0x2ee>
 800146c:	2b20      	cmp	r3, #32
 800146e:	d005      	beq.n	800147c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001470:	e01e      	b.n	80014b0 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	2208      	movs	r2, #8
 8001476:	4313      	orrs	r3, r2
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800147a:	e01a      	b.n	80014b2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	2210      	movs	r2, #16
 8001480:	4313      	orrs	r3, r2
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001484:	e015      	b.n	80014b2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	2220      	movs	r2, #32
 800148a:	4313      	orrs	r3, r2
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800148e:	e010      	b.n	80014b2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	2240      	movs	r2, #64	; 0x40
 8001494:	4313      	orrs	r3, r2
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001498:	e00b      	b.n	80014b2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	4313      	orrs	r3, r2
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014a2:	e006      	b.n	80014b2 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	2280      	movs	r2, #128	; 0x80
 80014a8:	0052      	lsls	r2, r2, #1
 80014aa:	4313      	orrs	r3, r2
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80014ae:	e000      	b.n	80014b2 <HAL_CAN_IRQHandler+0x32e>
            break;
 80014b0:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	699a      	ldr	r2, [r3, #24]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2170      	movs	r1, #112	; 0x70
 80014be:	438a      	bics	r2, r1
 80014c0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2204      	movs	r2, #4
 80014c8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d009      	beq.n	80014e4 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	0018      	movs	r0, r3
 80014e0:	f000 f864 	bl	80015ac <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80014e4:	46c0      	nop			; (mov r8, r8)
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b00a      	add	sp, #40	; 0x28
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80014f4:	46c0      	nop			; (mov r8, r8)
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b002      	add	sp, #8
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001504:	46c0      	nop			; (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	b002      	add	sp, #8
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	b002      	add	sp, #8
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001524:	46c0      	nop			; (mov r8, r8)
 8001526:	46bd      	mov	sp, r7
 8001528:	b002      	add	sp, #8
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001534:	46c0      	nop			; (mov r8, r8)
 8001536:	46bd      	mov	sp, r7
 8001538:	b002      	add	sp, #8
 800153a:	bd80      	pop	{r7, pc}

0800153c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001544:	46c0      	nop			; (mov r8, r8)
 8001546:	46bd      	mov	sp, r7
 8001548:	b002      	add	sp, #8
 800154a:	bd80      	pop	{r7, pc}

0800154c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001554:	46c0      	nop			; (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	b002      	add	sp, #8
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	b002      	add	sp, #8
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001574:	46c0      	nop			; (mov r8, r8)
 8001576:	46bd      	mov	sp, r7
 8001578:	b002      	add	sp, #8
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001584:	46c0      	nop			; (mov r8, r8)
 8001586:	46bd      	mov	sp, r7
 8001588:	b002      	add	sp, #8
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001594:	46c0      	nop			; (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	b002      	add	sp, #8
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80015a4:	46c0      	nop			; (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b002      	add	sp, #8
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80015b4:	46c0      	nop			; (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b002      	add	sp, #8
 80015ba:	bd80      	pop	{r7, pc}

080015bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	0002      	movs	r2, r0
 80015c4:	1dfb      	adds	r3, r7, #7
 80015c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b7f      	cmp	r3, #127	; 0x7f
 80015ce:	d809      	bhi.n	80015e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d0:	1dfb      	adds	r3, r7, #7
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	001a      	movs	r2, r3
 80015d6:	231f      	movs	r3, #31
 80015d8:	401a      	ands	r2, r3
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <__NVIC_EnableIRQ+0x30>)
 80015dc:	2101      	movs	r1, #1
 80015de:	4091      	lsls	r1, r2
 80015e0:	000a      	movs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]
  }
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	e000e100 	.word	0xe000e100

080015f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	0002      	movs	r2, r0
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b7f      	cmp	r3, #127	; 0x7f
 8001604:	d828      	bhi.n	8001658 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001606:	4a2f      	ldr	r2, [pc, #188]	; (80016c4 <__NVIC_SetPriority+0xd4>)
 8001608:	1dfb      	adds	r3, r7, #7
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b25b      	sxtb	r3, r3
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	33c0      	adds	r3, #192	; 0xc0
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	589b      	ldr	r3, [r3, r2]
 8001616:	1dfa      	adds	r2, r7, #7
 8001618:	7812      	ldrb	r2, [r2, #0]
 800161a:	0011      	movs	r1, r2
 800161c:	2203      	movs	r2, #3
 800161e:	400a      	ands	r2, r1
 8001620:	00d2      	lsls	r2, r2, #3
 8001622:	21ff      	movs	r1, #255	; 0xff
 8001624:	4091      	lsls	r1, r2
 8001626:	000a      	movs	r2, r1
 8001628:	43d2      	mvns	r2, r2
 800162a:	401a      	ands	r2, r3
 800162c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	019b      	lsls	r3, r3, #6
 8001632:	22ff      	movs	r2, #255	; 0xff
 8001634:	401a      	ands	r2, r3
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	0018      	movs	r0, r3
 800163c:	2303      	movs	r3, #3
 800163e:	4003      	ands	r3, r0
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001644:	481f      	ldr	r0, [pc, #124]	; (80016c4 <__NVIC_SetPriority+0xd4>)
 8001646:	1dfb      	adds	r3, r7, #7
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b25b      	sxtb	r3, r3
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	430a      	orrs	r2, r1
 8001650:	33c0      	adds	r3, #192	; 0xc0
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001656:	e031      	b.n	80016bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001658:	4a1b      	ldr	r2, [pc, #108]	; (80016c8 <__NVIC_SetPriority+0xd8>)
 800165a:	1dfb      	adds	r3, r7, #7
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	0019      	movs	r1, r3
 8001660:	230f      	movs	r3, #15
 8001662:	400b      	ands	r3, r1
 8001664:	3b08      	subs	r3, #8
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3306      	adds	r3, #6
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	18d3      	adds	r3, r2, r3
 800166e:	3304      	adds	r3, #4
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	1dfa      	adds	r2, r7, #7
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	0011      	movs	r1, r2
 8001678:	2203      	movs	r2, #3
 800167a:	400a      	ands	r2, r1
 800167c:	00d2      	lsls	r2, r2, #3
 800167e:	21ff      	movs	r1, #255	; 0xff
 8001680:	4091      	lsls	r1, r2
 8001682:	000a      	movs	r2, r1
 8001684:	43d2      	mvns	r2, r2
 8001686:	401a      	ands	r2, r3
 8001688:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	019b      	lsls	r3, r3, #6
 800168e:	22ff      	movs	r2, #255	; 0xff
 8001690:	401a      	ands	r2, r3
 8001692:	1dfb      	adds	r3, r7, #7
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	0018      	movs	r0, r3
 8001698:	2303      	movs	r3, #3
 800169a:	4003      	ands	r3, r0
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016a0:	4809      	ldr	r0, [pc, #36]	; (80016c8 <__NVIC_SetPriority+0xd8>)
 80016a2:	1dfb      	adds	r3, r7, #7
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	001c      	movs	r4, r3
 80016a8:	230f      	movs	r3, #15
 80016aa:	4023      	ands	r3, r4
 80016ac:	3b08      	subs	r3, #8
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	430a      	orrs	r2, r1
 80016b2:	3306      	adds	r3, #6
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	18c3      	adds	r3, r0, r3
 80016b8:	3304      	adds	r3, #4
 80016ba:	601a      	str	r2, [r3, #0]
}
 80016bc:	46c0      	nop			; (mov r8, r8)
 80016be:	46bd      	mov	sp, r7
 80016c0:	b003      	add	sp, #12
 80016c2:	bd90      	pop	{r4, r7, pc}
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	1e5a      	subs	r2, r3, #1
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	045b      	lsls	r3, r3, #17
 80016dc:	429a      	cmp	r2, r3
 80016de:	d301      	bcc.n	80016e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e0:	2301      	movs	r3, #1
 80016e2:	e010      	b.n	8001706 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <SysTick_Config+0x44>)
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	3a01      	subs	r2, #1
 80016ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ec:	2301      	movs	r3, #1
 80016ee:	425b      	negs	r3, r3
 80016f0:	2103      	movs	r1, #3
 80016f2:	0018      	movs	r0, r3
 80016f4:	f7ff ff7c 	bl	80015f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <SysTick_Config+0x44>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <SysTick_Config+0x44>)
 8001700:	2207      	movs	r2, #7
 8001702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001704:	2300      	movs	r3, #0
}
 8001706:	0018      	movs	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	b002      	add	sp, #8
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	e000e010 	.word	0xe000e010

08001714 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	210f      	movs	r1, #15
 8001720:	187b      	adds	r3, r7, r1
 8001722:	1c02      	adds	r2, r0, #0
 8001724:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	187b      	adds	r3, r7, r1
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b25b      	sxtb	r3, r3
 800172e:	0011      	movs	r1, r2
 8001730:	0018      	movs	r0, r3
 8001732:	f7ff ff5d 	bl	80015f0 <__NVIC_SetPriority>
}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	b004      	add	sp, #16
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	0002      	movs	r2, r0
 8001746:	1dfb      	adds	r3, r7, #7
 8001748:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800174a:	1dfb      	adds	r3, r7, #7
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	b25b      	sxtb	r3, r3
 8001750:	0018      	movs	r0, r3
 8001752:	f7ff ff33 	bl	80015bc <__NVIC_EnableIRQ>
}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	46bd      	mov	sp, r7
 800175a:	b002      	add	sp, #8
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	0018      	movs	r0, r3
 800176a:	f7ff ffaf 	bl	80016cc <SysTick_Config>
 800176e:	0003      	movs	r3, r0
}
 8001770:	0018      	movs	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	b002      	add	sp, #8
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001786:	e155      	b.n	8001a34 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2101      	movs	r1, #1
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4091      	lsls	r1, r2
 8001792:	000a      	movs	r2, r1
 8001794:	4013      	ands	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <HAL_GPIO_Init+0x28>
 800179e:	e146      	b.n	8001a2e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2203      	movs	r2, #3
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d005      	beq.n	80017b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2203      	movs	r2, #3
 80017b2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d130      	bne.n	800181a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	2203      	movs	r2, #3
 80017c4:	409a      	lsls	r2, r3
 80017c6:	0013      	movs	r3, r2
 80017c8:	43da      	mvns	r2, r3
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4013      	ands	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	409a      	lsls	r2, r3
 80017da:	0013      	movs	r3, r2
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ee:	2201      	movs	r2, #1
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	409a      	lsls	r2, r3
 80017f4:	0013      	movs	r3, r2
 80017f6:	43da      	mvns	r2, r3
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	091b      	lsrs	r3, r3, #4
 8001804:	2201      	movs	r2, #1
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
 800180c:	0013      	movs	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2203      	movs	r2, #3
 8001820:	4013      	ands	r3, r2
 8001822:	2b03      	cmp	r3, #3
 8001824:	d017      	beq.n	8001856 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	409a      	lsls	r2, r3
 8001834:	0013      	movs	r3, r2
 8001836:	43da      	mvns	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	409a      	lsls	r2, r3
 8001848:	0013      	movs	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2203      	movs	r2, #3
 800185c:	4013      	ands	r3, r2
 800185e:	2b02      	cmp	r3, #2
 8001860:	d123      	bne.n	80018aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	08da      	lsrs	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3208      	adds	r2, #8
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	58d3      	ldr	r3, [r2, r3]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2207      	movs	r2, #7
 8001874:	4013      	ands	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	220f      	movs	r2, #15
 800187a:	409a      	lsls	r2, r3
 800187c:	0013      	movs	r3, r2
 800187e:	43da      	mvns	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	691a      	ldr	r2, [r3, #16]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2107      	movs	r1, #7
 800188e:	400b      	ands	r3, r1
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	409a      	lsls	r2, r3
 8001894:	0013      	movs	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	08da      	lsrs	r2, r3, #3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3208      	adds	r2, #8
 80018a4:	0092      	lsls	r2, r2, #2
 80018a6:	6939      	ldr	r1, [r7, #16]
 80018a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	409a      	lsls	r2, r3
 80018b8:	0013      	movs	r3, r2
 80018ba:	43da      	mvns	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2203      	movs	r2, #3
 80018c8:	401a      	ands	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	409a      	lsls	r2, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	23c0      	movs	r3, #192	; 0xc0
 80018e4:	029b      	lsls	r3, r3, #10
 80018e6:	4013      	ands	r3, r2
 80018e8:	d100      	bne.n	80018ec <HAL_GPIO_Init+0x174>
 80018ea:	e0a0      	b.n	8001a2e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ec:	4b57      	ldr	r3, [pc, #348]	; (8001a4c <HAL_GPIO_Init+0x2d4>)
 80018ee:	699a      	ldr	r2, [r3, #24]
 80018f0:	4b56      	ldr	r3, [pc, #344]	; (8001a4c <HAL_GPIO_Init+0x2d4>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	430a      	orrs	r2, r1
 80018f6:	619a      	str	r2, [r3, #24]
 80018f8:	4b54      	ldr	r3, [pc, #336]	; (8001a4c <HAL_GPIO_Init+0x2d4>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	2201      	movs	r2, #1
 80018fe:	4013      	ands	r3, r2
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001904:	4a52      	ldr	r2, [pc, #328]	; (8001a50 <HAL_GPIO_Init+0x2d8>)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	089b      	lsrs	r3, r3, #2
 800190a:	3302      	adds	r3, #2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	589b      	ldr	r3, [r3, r2]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2203      	movs	r2, #3
 8001916:	4013      	ands	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	409a      	lsls	r2, r3
 800191e:	0013      	movs	r3, r2
 8001920:	43da      	mvns	r2, r3
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	2390      	movs	r3, #144	; 0x90
 800192c:	05db      	lsls	r3, r3, #23
 800192e:	429a      	cmp	r2, r3
 8001930:	d019      	beq.n	8001966 <HAL_GPIO_Init+0x1ee>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a47      	ldr	r2, [pc, #284]	; (8001a54 <HAL_GPIO_Init+0x2dc>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d013      	beq.n	8001962 <HAL_GPIO_Init+0x1ea>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a46      	ldr	r2, [pc, #280]	; (8001a58 <HAL_GPIO_Init+0x2e0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d00d      	beq.n	800195e <HAL_GPIO_Init+0x1e6>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a45      	ldr	r2, [pc, #276]	; (8001a5c <HAL_GPIO_Init+0x2e4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d007      	beq.n	800195a <HAL_GPIO_Init+0x1e2>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a44      	ldr	r2, [pc, #272]	; (8001a60 <HAL_GPIO_Init+0x2e8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d101      	bne.n	8001956 <HAL_GPIO_Init+0x1de>
 8001952:	2304      	movs	r3, #4
 8001954:	e008      	b.n	8001968 <HAL_GPIO_Init+0x1f0>
 8001956:	2305      	movs	r3, #5
 8001958:	e006      	b.n	8001968 <HAL_GPIO_Init+0x1f0>
 800195a:	2303      	movs	r3, #3
 800195c:	e004      	b.n	8001968 <HAL_GPIO_Init+0x1f0>
 800195e:	2302      	movs	r3, #2
 8001960:	e002      	b.n	8001968 <HAL_GPIO_Init+0x1f0>
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <HAL_GPIO_Init+0x1f0>
 8001966:	2300      	movs	r3, #0
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	2103      	movs	r1, #3
 800196c:	400a      	ands	r2, r1
 800196e:	0092      	lsls	r2, r2, #2
 8001970:	4093      	lsls	r3, r2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001978:	4935      	ldr	r1, [pc, #212]	; (8001a50 <HAL_GPIO_Init+0x2d8>)
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	089b      	lsrs	r3, r3, #2
 800197e:	3302      	adds	r3, #2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001986:	4b37      	ldr	r3, [pc, #220]	; (8001a64 <HAL_GPIO_Init+0x2ec>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	43da      	mvns	r2, r3
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	035b      	lsls	r3, r3, #13
 800199e:	4013      	ands	r3, r2
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <HAL_GPIO_Init+0x2ec>)
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019b0:	4b2c      	ldr	r3, [pc, #176]	; (8001a64 <HAL_GPIO_Init+0x2ec>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	43da      	mvns	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	039b      	lsls	r3, r3, #14
 80019c8:	4013      	ands	r3, r2
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019d4:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <HAL_GPIO_Init+0x2ec>)
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <HAL_GPIO_Init+0x2ec>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	43da      	mvns	r2, r3
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	029b      	lsls	r3, r3, #10
 80019f2:	4013      	ands	r3, r2
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <HAL_GPIO_Init+0x2ec>)
 8001a00:	693a      	ldr	r2, [r7, #16]
 8001a02:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <HAL_GPIO_Init+0x2ec>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	43da      	mvns	r2, r3
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	025b      	lsls	r3, r3, #9
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_GPIO_Init+0x2ec>)
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	40da      	lsrs	r2, r3
 8001a3c:	1e13      	subs	r3, r2, #0
 8001a3e:	d000      	beq.n	8001a42 <HAL_GPIO_Init+0x2ca>
 8001a40:	e6a2      	b.n	8001788 <HAL_GPIO_Init+0x10>
  } 
}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	46c0      	nop			; (mov r8, r8)
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b006      	add	sp, #24
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	40010000 	.word	0x40010000
 8001a54:	48000400 	.word	0x48000400
 8001a58:	48000800 	.word	0x48000800
 8001a5c:	48000c00 	.word	0x48000c00
 8001a60:	48001000 	.word	0x48001000
 8001a64:	40010400 	.word	0x40010400

08001a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	0008      	movs	r0, r1
 8001a72:	0011      	movs	r1, r2
 8001a74:	1cbb      	adds	r3, r7, #2
 8001a76:	1c02      	adds	r2, r0, #0
 8001a78:	801a      	strh	r2, [r3, #0]
 8001a7a:	1c7b      	adds	r3, r7, #1
 8001a7c:	1c0a      	adds	r2, r1, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a80:	1c7b      	adds	r3, r7, #1
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d004      	beq.n	8001a92 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a88:	1cbb      	adds	r3, r7, #2
 8001a8a:	881a      	ldrh	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a90:	e003      	b.n	8001a9a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a92:	1cbb      	adds	r3, r7, #2
 8001a94:	881a      	ldrh	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	b002      	add	sp, #8
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f000 fb76 	bl	80021a4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2201      	movs	r2, #1
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d100      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x20>
 8001ac2:	e08e      	b.n	8001be2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ac4:	4bc5      	ldr	r3, [pc, #788]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	220c      	movs	r2, #12
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d00e      	beq.n	8001aee <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ad0:	4bc2      	ldr	r3, [pc, #776]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	220c      	movs	r2, #12
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	2b08      	cmp	r3, #8
 8001ada:	d117      	bne.n	8001b0c <HAL_RCC_OscConfig+0x68>
 8001adc:	4bbf      	ldr	r3, [pc, #764]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	23c0      	movs	r3, #192	; 0xc0
 8001ae2:	025b      	lsls	r3, r3, #9
 8001ae4:	401a      	ands	r2, r3
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	025b      	lsls	r3, r3, #9
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d10e      	bne.n	8001b0c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aee:	4bbb      	ldr	r3, [pc, #748]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	029b      	lsls	r3, r3, #10
 8001af6:	4013      	ands	r3, r2
 8001af8:	d100      	bne.n	8001afc <HAL_RCC_OscConfig+0x58>
 8001afa:	e071      	b.n	8001be0 <HAL_RCC_OscConfig+0x13c>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d000      	beq.n	8001b06 <HAL_RCC_OscConfig+0x62>
 8001b04:	e06c      	b.n	8001be0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	f000 fb4c 	bl	80021a4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d107      	bne.n	8001b24 <HAL_RCC_OscConfig+0x80>
 8001b14:	4bb1      	ldr	r3, [pc, #708]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4bb0      	ldr	r3, [pc, #704]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b1a:	2180      	movs	r1, #128	; 0x80
 8001b1c:	0249      	lsls	r1, r1, #9
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e02f      	b.n	8001b84 <HAL_RCC_OscConfig+0xe0>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10c      	bne.n	8001b46 <HAL_RCC_OscConfig+0xa2>
 8001b2c:	4bab      	ldr	r3, [pc, #684]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4baa      	ldr	r3, [pc, #680]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b32:	49ab      	ldr	r1, [pc, #684]	; (8001de0 <HAL_RCC_OscConfig+0x33c>)
 8001b34:	400a      	ands	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	4ba8      	ldr	r3, [pc, #672]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4ba7      	ldr	r3, [pc, #668]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b3e:	49a9      	ldr	r1, [pc, #676]	; (8001de4 <HAL_RCC_OscConfig+0x340>)
 8001b40:	400a      	ands	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e01e      	b.n	8001b84 <HAL_RCC_OscConfig+0xe0>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b05      	cmp	r3, #5
 8001b4c:	d10e      	bne.n	8001b6c <HAL_RCC_OscConfig+0xc8>
 8001b4e:	4ba3      	ldr	r3, [pc, #652]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4ba2      	ldr	r3, [pc, #648]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	02c9      	lsls	r1, r1, #11
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	4b9f      	ldr	r3, [pc, #636]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b9e      	ldr	r3, [pc, #632]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b62:	2180      	movs	r1, #128	; 0x80
 8001b64:	0249      	lsls	r1, r1, #9
 8001b66:	430a      	orrs	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	e00b      	b.n	8001b84 <HAL_RCC_OscConfig+0xe0>
 8001b6c:	4b9b      	ldr	r3, [pc, #620]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b9a      	ldr	r3, [pc, #616]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b72:	499b      	ldr	r1, [pc, #620]	; (8001de0 <HAL_RCC_OscConfig+0x33c>)
 8001b74:	400a      	ands	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	4b98      	ldr	r3, [pc, #608]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b97      	ldr	r3, [pc, #604]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001b7e:	4999      	ldr	r1, [pc, #612]	; (8001de4 <HAL_RCC_OscConfig+0x340>)
 8001b80:	400a      	ands	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d014      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff f9c8 	bl	8000f20 <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b96:	f7ff f9c3 	bl	8000f20 <HAL_GetTick>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b64      	cmp	r3, #100	; 0x64
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e2fd      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba8:	4b8c      	ldr	r3, [pc, #560]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	029b      	lsls	r3, r3, #10
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0xf2>
 8001bb4:	e015      	b.n	8001be2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb6:	f7ff f9b3 	bl	8000f20 <HAL_GetTick>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc0:	f7ff f9ae 	bl	8000f20 <HAL_GetTick>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b64      	cmp	r3, #100	; 0x64
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e2e8      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	4b82      	ldr	r3, [pc, #520]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	029b      	lsls	r3, r3, #10
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x11c>
 8001bde:	e000      	b.n	8001be2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2202      	movs	r2, #2
 8001be8:	4013      	ands	r3, r2
 8001bea:	d100      	bne.n	8001bee <HAL_RCC_OscConfig+0x14a>
 8001bec:	e06c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001bee:	4b7b      	ldr	r3, [pc, #492]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d00e      	beq.n	8001c16 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001bf8:	4b78      	ldr	r3, [pc, #480]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	220c      	movs	r2, #12
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d11f      	bne.n	8001c44 <HAL_RCC_OscConfig+0x1a0>
 8001c04:	4b75      	ldr	r3, [pc, #468]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	23c0      	movs	r3, #192	; 0xc0
 8001c0a:	025b      	lsls	r3, r3, #9
 8001c0c:	401a      	ands	r2, r3
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d116      	bne.n	8001c44 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c16:	4b71      	ldr	r3, [pc, #452]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_OscConfig+0x188>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e2bb      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2c:	4b6b      	ldr	r3, [pc, #428]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	22f8      	movs	r2, #248	; 0xf8
 8001c32:	4393      	bics	r3, r2
 8001c34:	0019      	movs	r1, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	00da      	lsls	r2, r3, #3
 8001c3c:	4b67      	ldr	r3, [pc, #412]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c42:	e041      	b.n	8001cc8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d024      	beq.n	8001c96 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c4c:	4b63      	ldr	r3, [pc, #396]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b62      	ldr	r3, [pc, #392]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c52:	2101      	movs	r1, #1
 8001c54:	430a      	orrs	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff f962 	bl	8000f20 <HAL_GetTick>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c62:	f7ff f95d 	bl	8000f20 <HAL_GetTick>
 8001c66:	0002      	movs	r2, r0
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e297      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c74:	4b59      	ldr	r3, [pc, #356]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2202      	movs	r2, #2
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d0f1      	beq.n	8001c62 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7e:	4b57      	ldr	r3, [pc, #348]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	22f8      	movs	r2, #248	; 0xf8
 8001c84:	4393      	bics	r3, r2
 8001c86:	0019      	movs	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	00da      	lsls	r2, r3, #3
 8001c8e:	4b53      	ldr	r3, [pc, #332]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	e018      	b.n	8001cc8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c96:	4b51      	ldr	r3, [pc, #324]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	4b50      	ldr	r3, [pc, #320]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	438a      	bics	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7ff f93d 	bl	8000f20 <HAL_GetTick>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cac:	f7ff f938 	bl	8000f20 <HAL_GetTick>
 8001cb0:	0002      	movs	r2, r0
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e272      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	4b47      	ldr	r3, [pc, #284]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d1f1      	bne.n	8001cac <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2208      	movs	r2, #8
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d036      	beq.n	8001d40 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d019      	beq.n	8001d0e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cda:	4b40      	ldr	r3, [pc, #256]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cde:	4b3f      	ldr	r3, [pc, #252]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff f91b 	bl	8000f20 <HAL_GetTick>
 8001cea:	0003      	movs	r3, r0
 8001cec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf0:	f7ff f916 	bl	8000f20 <HAL_GetTick>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e250      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d02:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	2202      	movs	r2, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d0f1      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x24c>
 8001d0c:	e018      	b.n	8001d40 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0e:	4b33      	ldr	r3, [pc, #204]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001d10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d12:	4b32      	ldr	r3, [pc, #200]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001d14:	2101      	movs	r1, #1
 8001d16:	438a      	bics	r2, r1
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1a:	f7ff f901 	bl	8000f20 <HAL_GetTick>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d24:	f7ff f8fc 	bl	8000f20 <HAL_GetTick>
 8001d28:	0002      	movs	r2, r0
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e236      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d36:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d1f1      	bne.n	8001d24 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2204      	movs	r2, #4
 8001d46:	4013      	ands	r3, r2
 8001d48:	d100      	bne.n	8001d4c <HAL_RCC_OscConfig+0x2a8>
 8001d4a:	e0b5      	b.n	8001eb8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4c:	201f      	movs	r0, #31
 8001d4e:	183b      	adds	r3, r7, r0
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d54:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001d56:	69da      	ldr	r2, [r3, #28]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	055b      	lsls	r3, r3, #21
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d110      	bne.n	8001d82 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001d62:	69da      	ldr	r2, [r3, #28]
 8001d64:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	0549      	lsls	r1, r1, #21
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	61da      	str	r2, [r3, #28]
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001d70:	69da      	ldr	r2, [r3, #28]
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	055b      	lsls	r3, r3, #21
 8001d76:	4013      	ands	r3, r2
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d7c:	183b      	adds	r3, r7, r0
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d82:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HAL_RCC_OscConfig+0x344>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d11a      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8e:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <HAL_RCC_OscConfig+0x344>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <HAL_RCC_OscConfig+0x344>)
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	0049      	lsls	r1, r1, #1
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9c:	f7ff f8c0 	bl	8000f20 <HAL_GetTick>
 8001da0:	0003      	movs	r3, r0
 8001da2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da6:	f7ff f8bb 	bl	8000f20 <HAL_GetTick>
 8001daa:	0002      	movs	r2, r0
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b64      	cmp	r3, #100	; 0x64
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e1f5      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_RCC_OscConfig+0x344>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d0f0      	beq.n	8001da6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d10f      	bne.n	8001dec <HAL_RCC_OscConfig+0x348>
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001dce:	6a1a      	ldr	r2, [r3, #32]
 8001dd0:	4b02      	ldr	r3, [pc, #8]	; (8001ddc <HAL_RCC_OscConfig+0x338>)
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	621a      	str	r2, [r3, #32]
 8001dd8:	e036      	b.n	8001e48 <HAL_RCC_OscConfig+0x3a4>
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	fffeffff 	.word	0xfffeffff
 8001de4:	fffbffff 	.word	0xfffbffff
 8001de8:	40007000 	.word	0x40007000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10c      	bne.n	8001e0e <HAL_RCC_OscConfig+0x36a>
 8001df4:	4bca      	ldr	r3, [pc, #808]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001df6:	6a1a      	ldr	r2, [r3, #32]
 8001df8:	4bc9      	ldr	r3, [pc, #804]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	438a      	bics	r2, r1
 8001dfe:	621a      	str	r2, [r3, #32]
 8001e00:	4bc7      	ldr	r3, [pc, #796]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e02:	6a1a      	ldr	r2, [r3, #32]
 8001e04:	4bc6      	ldr	r3, [pc, #792]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e06:	2104      	movs	r1, #4
 8001e08:	438a      	bics	r2, r1
 8001e0a:	621a      	str	r2, [r3, #32]
 8001e0c:	e01c      	b.n	8001e48 <HAL_RCC_OscConfig+0x3a4>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b05      	cmp	r3, #5
 8001e14:	d10c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x38c>
 8001e16:	4bc2      	ldr	r3, [pc, #776]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e18:	6a1a      	ldr	r2, [r3, #32]
 8001e1a:	4bc1      	ldr	r3, [pc, #772]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e1c:	2104      	movs	r1, #4
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	621a      	str	r2, [r3, #32]
 8001e22:	4bbf      	ldr	r3, [pc, #764]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e24:	6a1a      	ldr	r2, [r3, #32]
 8001e26:	4bbe      	ldr	r3, [pc, #760]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e28:	2101      	movs	r1, #1
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	621a      	str	r2, [r3, #32]
 8001e2e:	e00b      	b.n	8001e48 <HAL_RCC_OscConfig+0x3a4>
 8001e30:	4bbb      	ldr	r3, [pc, #748]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e32:	6a1a      	ldr	r2, [r3, #32]
 8001e34:	4bba      	ldr	r3, [pc, #744]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e36:	2101      	movs	r1, #1
 8001e38:	438a      	bics	r2, r1
 8001e3a:	621a      	str	r2, [r3, #32]
 8001e3c:	4bb8      	ldr	r3, [pc, #736]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e3e:	6a1a      	ldr	r2, [r3, #32]
 8001e40:	4bb7      	ldr	r3, [pc, #732]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e42:	2104      	movs	r1, #4
 8001e44:	438a      	bics	r2, r1
 8001e46:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d014      	beq.n	8001e7a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e50:	f7ff f866 	bl	8000f20 <HAL_GetTick>
 8001e54:	0003      	movs	r3, r0
 8001e56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e58:	e009      	b.n	8001e6e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e5a:	f7ff f861 	bl	8000f20 <HAL_GetTick>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	4aaf      	ldr	r2, [pc, #700]	; (8002124 <HAL_RCC_OscConfig+0x680>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e19a      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6e:	4bac      	ldr	r3, [pc, #688]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	2202      	movs	r2, #2
 8001e74:	4013      	ands	r3, r2
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x3b6>
 8001e78:	e013      	b.n	8001ea2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff f851 	bl	8000f20 <HAL_GetTick>
 8001e7e:	0003      	movs	r3, r0
 8001e80:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e82:	e009      	b.n	8001e98 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e84:	f7ff f84c 	bl	8000f20 <HAL_GetTick>
 8001e88:	0002      	movs	r2, r0
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	4aa5      	ldr	r2, [pc, #660]	; (8002124 <HAL_RCC_OscConfig+0x680>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e185      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e98:	4ba1      	ldr	r3, [pc, #644]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ea2:	231f      	movs	r3, #31
 8001ea4:	18fb      	adds	r3, r7, r3
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d105      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eac:	4b9c      	ldr	r3, [pc, #624]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001eae:	69da      	ldr	r2, [r3, #28]
 8001eb0:	4b9b      	ldr	r3, [pc, #620]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001eb2:	499d      	ldr	r1, [pc, #628]	; (8002128 <HAL_RCC_OscConfig+0x684>)
 8001eb4:	400a      	ands	r2, r1
 8001eb6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2210      	movs	r2, #16
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d063      	beq.n	8001f8a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d12a      	bne.n	8001f20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001eca:	4b95      	ldr	r3, [pc, #596]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ece:	4b94      	ldr	r3, [pc, #592]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001ed0:	2104      	movs	r1, #4
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ed6:	4b92      	ldr	r3, [pc, #584]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eda:	4b91      	ldr	r3, [pc, #580]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001edc:	2101      	movs	r1, #1
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee2:	f7ff f81d 	bl	8000f20 <HAL_GetTick>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001eea:	e008      	b.n	8001efe <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001eec:	f7ff f818 	bl	8000f20 <HAL_GetTick>
 8001ef0:	0002      	movs	r2, r0
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e152      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001efe:	4b88      	ldr	r3, [pc, #544]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f02:	2202      	movs	r2, #2
 8001f04:	4013      	ands	r3, r2
 8001f06:	d0f1      	beq.n	8001eec <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f08:	4b85      	ldr	r3, [pc, #532]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0c:	22f8      	movs	r2, #248	; 0xf8
 8001f0e:	4393      	bics	r3, r2
 8001f10:	0019      	movs	r1, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	00da      	lsls	r2, r3, #3
 8001f18:	4b81      	ldr	r3, [pc, #516]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f1e:	e034      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	3305      	adds	r3, #5
 8001f26:	d111      	bne.n	8001f4c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001f28:	4b7d      	ldr	r3, [pc, #500]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f2c:	4b7c      	ldr	r3, [pc, #496]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f2e:	2104      	movs	r1, #4
 8001f30:	438a      	bics	r2, r1
 8001f32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f34:	4b7a      	ldr	r3, [pc, #488]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f38:	22f8      	movs	r2, #248	; 0xf8
 8001f3a:	4393      	bics	r3, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	00da      	lsls	r2, r3, #3
 8001f44:	4b76      	ldr	r3, [pc, #472]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f46:	430a      	orrs	r2, r1
 8001f48:	635a      	str	r2, [r3, #52]	; 0x34
 8001f4a:	e01e      	b.n	8001f8a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f4c:	4b74      	ldr	r3, [pc, #464]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f50:	4b73      	ldr	r3, [pc, #460]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f52:	2104      	movs	r1, #4
 8001f54:	430a      	orrs	r2, r1
 8001f56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f58:	4b71      	ldr	r3, [pc, #452]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f5c:	4b70      	ldr	r3, [pc, #448]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f5e:	2101      	movs	r1, #1
 8001f60:	438a      	bics	r2, r1
 8001f62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f64:	f7fe ffdc 	bl	8000f20 <HAL_GetTick>
 8001f68:	0003      	movs	r3, r0
 8001f6a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f6e:	f7fe ffd7 	bl	8000f20 <HAL_GetTick>
 8001f72:	0002      	movs	r2, r0
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e111      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f80:	4b67      	ldr	r3, [pc, #412]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f84:	2202      	movs	r2, #2
 8001f86:	4013      	ands	r3, r2
 8001f88:	d1f1      	bne.n	8001f6e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	4013      	ands	r3, r2
 8001f92:	d05c      	beq.n	800204e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001f94:	4b62      	ldr	r3, [pc, #392]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	220c      	movs	r2, #12
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	2b0c      	cmp	r3, #12
 8001f9e:	d00e      	beq.n	8001fbe <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001fa0:	4b5f      	ldr	r3, [pc, #380]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	220c      	movs	r2, #12
 8001fa6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d114      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001fac:	4b5c      	ldr	r3, [pc, #368]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	23c0      	movs	r3, #192	; 0xc0
 8001fb2:	025b      	lsls	r3, r3, #9
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	23c0      	movs	r3, #192	; 0xc0
 8001fb8:	025b      	lsls	r3, r3, #9
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d10b      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001fbe:	4b58      	ldr	r3, [pc, #352]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	029b      	lsls	r3, r3, #10
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d040      	beq.n	800204c <HAL_RCC_OscConfig+0x5a8>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d03c      	beq.n	800204c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e0e6      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d01b      	beq.n	8002016 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001fde:	4b50      	ldr	r3, [pc, #320]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fe2:	4b4f      	ldr	r3, [pc, #316]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8001fe4:	2180      	movs	r1, #128	; 0x80
 8001fe6:	0249      	lsls	r1, r1, #9
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7fe ff98 	bl	8000f20 <HAL_GetTick>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ff6:	f7fe ff93 	bl	8000f20 <HAL_GetTick>
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b02      	cmp	r3, #2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e0cd      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002008:	4b45      	ldr	r3, [pc, #276]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 800200a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	029b      	lsls	r3, r3, #10
 8002010:	4013      	ands	r3, r2
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x552>
 8002014:	e01b      	b.n	800204e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002016:	4b42      	ldr	r3, [pc, #264]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8002018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800201a:	4b41      	ldr	r3, [pc, #260]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 800201c:	4943      	ldr	r1, [pc, #268]	; (800212c <HAL_RCC_OscConfig+0x688>)
 800201e:	400a      	ands	r2, r1
 8002020:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7fe ff7d 	bl	8000f20 <HAL_GetTick>
 8002026:	0003      	movs	r3, r0
 8002028:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800202c:	f7fe ff78 	bl	8000f20 <HAL_GetTick>
 8002030:	0002      	movs	r2, r0
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e0b2      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800203e:	4b38      	ldr	r3, [pc, #224]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8002040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002042:	2380      	movs	r3, #128	; 0x80
 8002044:	029b      	lsls	r3, r3, #10
 8002046:	4013      	ands	r3, r2
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x588>
 800204a:	e000      	b.n	800204e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800204c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	2b00      	cmp	r3, #0
 8002054:	d100      	bne.n	8002058 <HAL_RCC_OscConfig+0x5b4>
 8002056:	e0a4      	b.n	80021a2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002058:	4b31      	ldr	r3, [pc, #196]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	220c      	movs	r2, #12
 800205e:	4013      	ands	r3, r2
 8002060:	2b08      	cmp	r3, #8
 8002062:	d100      	bne.n	8002066 <HAL_RCC_OscConfig+0x5c2>
 8002064:	e078      	b.n	8002158 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	2b02      	cmp	r3, #2
 800206c:	d14c      	bne.n	8002108 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206e:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8002074:	492e      	ldr	r1, [pc, #184]	; (8002130 <HAL_RCC_OscConfig+0x68c>)
 8002076:	400a      	ands	r2, r1
 8002078:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7fe ff51 	bl	8000f20 <HAL_GetTick>
 800207e:	0003      	movs	r3, r0
 8002080:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002084:	f7fe ff4c 	bl	8000f20 <HAL_GetTick>
 8002088:	0002      	movs	r2, r0
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e086      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002096:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	2380      	movs	r3, #128	; 0x80
 800209c:	049b      	lsls	r3, r3, #18
 800209e:	4013      	ands	r3, r2
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020a2:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a6:	220f      	movs	r2, #15
 80020a8:	4393      	bics	r3, r2
 80020aa:	0019      	movs	r1, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 80020b2:	430a      	orrs	r2, r1
 80020b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <HAL_RCC_OscConfig+0x690>)
 80020bc:	4013      	ands	r3, r2
 80020be:	0019      	movs	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c8:	431a      	orrs	r2, r3
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 80020cc:	430a      	orrs	r2, r1
 80020ce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 80020d6:	2180      	movs	r1, #128	; 0x80
 80020d8:	0449      	lsls	r1, r1, #17
 80020da:	430a      	orrs	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020de:	f7fe ff1f 	bl	8000f20 <HAL_GetTick>
 80020e2:	0003      	movs	r3, r0
 80020e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e8:	f7fe ff1a 	bl	8000f20 <HAL_GetTick>
 80020ec:	0002      	movs	r2, r0
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e054      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020fa:	4b09      	ldr	r3, [pc, #36]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	049b      	lsls	r3, r3, #18
 8002102:	4013      	ands	r3, r2
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x644>
 8002106:	e04c      	b.n	80021a2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b04      	ldr	r3, [pc, #16]	; (8002120 <HAL_RCC_OscConfig+0x67c>)
 800210e:	4908      	ldr	r1, [pc, #32]	; (8002130 <HAL_RCC_OscConfig+0x68c>)
 8002110:	400a      	ands	r2, r1
 8002112:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7fe ff04 	bl	8000f20 <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211c:	e015      	b.n	800214a <HAL_RCC_OscConfig+0x6a6>
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	40021000 	.word	0x40021000
 8002124:	00001388 	.word	0x00001388
 8002128:	efffffff 	.word	0xefffffff
 800212c:	fffeffff 	.word	0xfffeffff
 8002130:	feffffff 	.word	0xfeffffff
 8002134:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002138:	f7fe fef2 	bl	8000f20 <HAL_GetTick>
 800213c:	0002      	movs	r2, r0
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e02c      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214a:	4b18      	ldr	r3, [pc, #96]	; (80021ac <HAL_RCC_OscConfig+0x708>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	049b      	lsls	r3, r3, #18
 8002152:	4013      	ands	r3, r2
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x694>
 8002156:	e024      	b.n	80021a2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e01f      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_RCC_OscConfig+0x708>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <HAL_RCC_OscConfig+0x708>)
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	23c0      	movs	r3, #192	; 0xc0
 8002174:	025b      	lsls	r3, r3, #9
 8002176:	401a      	ands	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217c:	429a      	cmp	r2, r3
 800217e:	d10e      	bne.n	800219e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	220f      	movs	r2, #15
 8002184:	401a      	ands	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	429a      	cmp	r2, r3
 800218c:	d107      	bne.n	800219e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	23f0      	movs	r3, #240	; 0xf0
 8002192:	039b      	lsls	r3, r3, #14
 8002194:	401a      	ands	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800219a:	429a      	cmp	r2, r3
 800219c:	d001      	beq.n	80021a2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b008      	add	sp, #32
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000

080021b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0bf      	b.n	8002344 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021c4:	4b61      	ldr	r3, [pc, #388]	; (800234c <HAL_RCC_ClockConfig+0x19c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2201      	movs	r2, #1
 80021ca:	4013      	ands	r3, r2
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d911      	bls.n	80021f6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d2:	4b5e      	ldr	r3, [pc, #376]	; (800234c <HAL_RCC_ClockConfig+0x19c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2201      	movs	r2, #1
 80021d8:	4393      	bics	r3, r2
 80021da:	0019      	movs	r1, r3
 80021dc:	4b5b      	ldr	r3, [pc, #364]	; (800234c <HAL_RCC_ClockConfig+0x19c>)
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e4:	4b59      	ldr	r3, [pc, #356]	; (800234c <HAL_RCC_ClockConfig+0x19c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2201      	movs	r2, #1
 80021ea:	4013      	ands	r3, r2
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d001      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e0a6      	b.n	8002344 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2202      	movs	r2, #2
 80021fc:	4013      	ands	r3, r2
 80021fe:	d015      	beq.n	800222c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2204      	movs	r2, #4
 8002206:	4013      	ands	r3, r2
 8002208:	d006      	beq.n	8002218 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800220a:	4b51      	ldr	r3, [pc, #324]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	4b50      	ldr	r3, [pc, #320]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 8002210:	21e0      	movs	r1, #224	; 0xe0
 8002212:	00c9      	lsls	r1, r1, #3
 8002214:	430a      	orrs	r2, r1
 8002216:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002218:	4b4d      	ldr	r3, [pc, #308]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	22f0      	movs	r2, #240	; 0xf0
 800221e:	4393      	bics	r3, r2
 8002220:	0019      	movs	r1, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	4b4a      	ldr	r3, [pc, #296]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 8002228:	430a      	orrs	r2, r1
 800222a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2201      	movs	r2, #1
 8002232:	4013      	ands	r3, r2
 8002234:	d04c      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d107      	bne.n	800224e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223e:	4b44      	ldr	r3, [pc, #272]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	029b      	lsls	r3, r3, #10
 8002246:	4013      	ands	r3, r2
 8002248:	d120      	bne.n	800228c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e07a      	b.n	8002344 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b02      	cmp	r3, #2
 8002254:	d107      	bne.n	8002266 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002256:	4b3e      	ldr	r3, [pc, #248]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	049b      	lsls	r3, r3, #18
 800225e:	4013      	ands	r3, r2
 8002260:	d114      	bne.n	800228c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e06e      	b.n	8002344 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b03      	cmp	r3, #3
 800226c:	d107      	bne.n	800227e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800226e:	4b38      	ldr	r3, [pc, #224]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 8002270:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	029b      	lsls	r3, r3, #10
 8002276:	4013      	ands	r3, r2
 8002278:	d108      	bne.n	800228c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e062      	b.n	8002344 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227e:	4b34      	ldr	r3, [pc, #208]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2202      	movs	r2, #2
 8002284:	4013      	ands	r3, r2
 8002286:	d101      	bne.n	800228c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e05b      	b.n	8002344 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800228c:	4b30      	ldr	r3, [pc, #192]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2203      	movs	r2, #3
 8002292:	4393      	bics	r3, r2
 8002294:	0019      	movs	r1, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 800229c:	430a      	orrs	r2, r1
 800229e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a0:	f7fe fe3e 	bl	8000f20 <HAL_GetTick>
 80022a4:	0003      	movs	r3, r0
 80022a6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a8:	e009      	b.n	80022be <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022aa:	f7fe fe39 	bl	8000f20 <HAL_GetTick>
 80022ae:	0002      	movs	r2, r0
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	4a27      	ldr	r2, [pc, #156]	; (8002354 <HAL_RCC_ClockConfig+0x1a4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e042      	b.n	8002344 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	4b24      	ldr	r3, [pc, #144]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	220c      	movs	r2, #12
 80022c4:	401a      	ands	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d1ec      	bne.n	80022aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d0:	4b1e      	ldr	r3, [pc, #120]	; (800234c <HAL_RCC_ClockConfig+0x19c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2201      	movs	r2, #1
 80022d6:	4013      	ands	r3, r2
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d211      	bcs.n	8002302 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022de:	4b1b      	ldr	r3, [pc, #108]	; (800234c <HAL_RCC_ClockConfig+0x19c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2201      	movs	r2, #1
 80022e4:	4393      	bics	r3, r2
 80022e6:	0019      	movs	r1, r3
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <HAL_RCC_ClockConfig+0x19c>)
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f0:	4b16      	ldr	r3, [pc, #88]	; (800234c <HAL_RCC_ClockConfig+0x19c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2201      	movs	r2, #1
 80022f6:	4013      	ands	r3, r2
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d001      	beq.n	8002302 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e020      	b.n	8002344 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2204      	movs	r2, #4
 8002308:	4013      	ands	r3, r2
 800230a:	d009      	beq.n	8002320 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800230c:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4a11      	ldr	r2, [pc, #68]	; (8002358 <HAL_RCC_ClockConfig+0x1a8>)
 8002312:	4013      	ands	r3, r2
 8002314:	0019      	movs	r1, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 800231c:	430a      	orrs	r2, r1
 800231e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002320:	f000 f820 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8002324:	0001      	movs	r1, r0
 8002326:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <HAL_RCC_ClockConfig+0x1a0>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	091b      	lsrs	r3, r3, #4
 800232c:	220f      	movs	r2, #15
 800232e:	4013      	ands	r3, r2
 8002330:	4a0a      	ldr	r2, [pc, #40]	; (800235c <HAL_RCC_ClockConfig+0x1ac>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	000a      	movs	r2, r1
 8002336:	40da      	lsrs	r2, r3
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_RCC_ClockConfig+0x1b0>)
 800233a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800233c:	2003      	movs	r0, #3
 800233e:	f7fe fda9 	bl	8000e94 <HAL_InitTick>
  
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	0018      	movs	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	b004      	add	sp, #16
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40022000 	.word	0x40022000
 8002350:	40021000 	.word	0x40021000
 8002354:	00001388 	.word	0x00001388
 8002358:	fffff8ff 	.word	0xfffff8ff
 800235c:	080037d8 	.word	0x080037d8
 8002360:	20000100 	.word	0x20000100

08002364 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	2300      	movs	r3, #0
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800237e:	4b2d      	ldr	r3, [pc, #180]	; (8002434 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	220c      	movs	r2, #12
 8002388:	4013      	ands	r3, r2
 800238a:	2b0c      	cmp	r3, #12
 800238c:	d046      	beq.n	800241c <HAL_RCC_GetSysClockFreq+0xb8>
 800238e:	d848      	bhi.n	8002422 <HAL_RCC_GetSysClockFreq+0xbe>
 8002390:	2b04      	cmp	r3, #4
 8002392:	d002      	beq.n	800239a <HAL_RCC_GetSysClockFreq+0x36>
 8002394:	2b08      	cmp	r3, #8
 8002396:	d003      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x3c>
 8002398:	e043      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800239a:	4b27      	ldr	r3, [pc, #156]	; (8002438 <HAL_RCC_GetSysClockFreq+0xd4>)
 800239c:	613b      	str	r3, [r7, #16]
      break;
 800239e:	e043      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	0c9b      	lsrs	r3, r3, #18
 80023a4:	220f      	movs	r2, #15
 80023a6:	4013      	ands	r3, r2
 80023a8:	4a24      	ldr	r2, [pc, #144]	; (800243c <HAL_RCC_GetSysClockFreq+0xd8>)
 80023aa:	5cd3      	ldrb	r3, [r2, r3]
 80023ac:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80023ae:	4b21      	ldr	r3, [pc, #132]	; (8002434 <HAL_RCC_GetSysClockFreq+0xd0>)
 80023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b2:	220f      	movs	r2, #15
 80023b4:	4013      	ands	r3, r2
 80023b6:	4a22      	ldr	r2, [pc, #136]	; (8002440 <HAL_RCC_GetSysClockFreq+0xdc>)
 80023b8:	5cd3      	ldrb	r3, [r2, r3]
 80023ba:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	23c0      	movs	r3, #192	; 0xc0
 80023c0:	025b      	lsls	r3, r3, #9
 80023c2:	401a      	ands	r2, r3
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	025b      	lsls	r3, r3, #9
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d109      	bne.n	80023e0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	481a      	ldr	r0, [pc, #104]	; (8002438 <HAL_RCC_GetSysClockFreq+0xd4>)
 80023d0:	f7fd fe9a 	bl	8000108 <__udivsi3>
 80023d4:	0003      	movs	r3, r0
 80023d6:	001a      	movs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4353      	muls	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	e01a      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	23c0      	movs	r3, #192	; 0xc0
 80023e4:	025b      	lsls	r3, r3, #9
 80023e6:	401a      	ands	r2, r3
 80023e8:	23c0      	movs	r3, #192	; 0xc0
 80023ea:	025b      	lsls	r3, r3, #9
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d109      	bne.n	8002404 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023f0:	68b9      	ldr	r1, [r7, #8]
 80023f2:	4814      	ldr	r0, [pc, #80]	; (8002444 <HAL_RCC_GetSysClockFreq+0xe0>)
 80023f4:	f7fd fe88 	bl	8000108 <__udivsi3>
 80023f8:	0003      	movs	r3, r0
 80023fa:	001a      	movs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4353      	muls	r3, r2
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	e008      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	480c      	ldr	r0, [pc, #48]	; (8002438 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002408:	f7fd fe7e 	bl	8000108 <__udivsi3>
 800240c:	0003      	movs	r3, r0
 800240e:	001a      	movs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4353      	muls	r3, r2
 8002414:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	613b      	str	r3, [r7, #16]
      break;
 800241a:	e005      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_RCC_GetSysClockFreq+0xe0>)
 800241e:	613b      	str	r3, [r7, #16]
      break;
 8002420:	e002      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002424:	613b      	str	r3, [r7, #16]
      break;
 8002426:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002428:	693b      	ldr	r3, [r7, #16]
}
 800242a:	0018      	movs	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	b006      	add	sp, #24
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			; (mov r8, r8)
 8002434:	40021000 	.word	0x40021000
 8002438:	007a1200 	.word	0x007a1200
 800243c:	080037f0 	.word	0x080037f0
 8002440:	08003800 	.word	0x08003800
 8002444:	02dc6c00 	.word	0x02dc6c00

08002448 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800244c:	4b02      	ldr	r3, [pc, #8]	; (8002458 <HAL_RCC_GetHCLKFreq+0x10>)
 800244e:	681b      	ldr	r3, [r3, #0]
}
 8002450:	0018      	movs	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	46c0      	nop			; (mov r8, r8)
 8002458:	20000100 	.word	0x20000100

0800245c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002460:	f7ff fff2 	bl	8002448 <HAL_RCC_GetHCLKFreq>
 8002464:	0001      	movs	r1, r0
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	0a1b      	lsrs	r3, r3, #8
 800246c:	2207      	movs	r2, #7
 800246e:	4013      	ands	r3, r2
 8002470:	4a04      	ldr	r2, [pc, #16]	; (8002484 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	40d9      	lsrs	r1, r3
 8002476:	000b      	movs	r3, r1
}    
 8002478:	0018      	movs	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	40021000 	.word	0x40021000
 8002484:	080037e8 	.word	0x080037e8

08002488 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002490:	2300      	movs	r3, #0
 8002492:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	025b      	lsls	r3, r3, #9
 80024a0:	4013      	ands	r3, r2
 80024a2:	d100      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80024a4:	e08e      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80024a6:	2017      	movs	r0, #23
 80024a8:	183b      	adds	r3, r7, r0
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ae:	4b6e      	ldr	r3, [pc, #440]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024b0:	69da      	ldr	r2, [r3, #28]
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	055b      	lsls	r3, r3, #21
 80024b6:	4013      	ands	r3, r2
 80024b8:	d110      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024ba:	4b6b      	ldr	r3, [pc, #428]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024bc:	69da      	ldr	r2, [r3, #28]
 80024be:	4b6a      	ldr	r3, [pc, #424]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024c0:	2180      	movs	r1, #128	; 0x80
 80024c2:	0549      	lsls	r1, r1, #21
 80024c4:	430a      	orrs	r2, r1
 80024c6:	61da      	str	r2, [r3, #28]
 80024c8:	4b67      	ldr	r3, [pc, #412]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80024ca:	69da      	ldr	r2, [r3, #28]
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	055b      	lsls	r3, r3, #21
 80024d0:	4013      	ands	r3, r2
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024d6:	183b      	adds	r3, r7, r0
 80024d8:	2201      	movs	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	4b63      	ldr	r3, [pc, #396]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4013      	ands	r3, r2
 80024e6:	d11a      	bne.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024e8:	4b60      	ldr	r3, [pc, #384]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b5f      	ldr	r3, [pc, #380]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80024ee:	2180      	movs	r1, #128	; 0x80
 80024f0:	0049      	lsls	r1, r1, #1
 80024f2:	430a      	orrs	r2, r1
 80024f4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024f6:	f7fe fd13 	bl	8000f20 <HAL_GetTick>
 80024fa:	0003      	movs	r3, r0
 80024fc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024fe:	e008      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002500:	f7fe fd0e 	bl	8000f20 <HAL_GetTick>
 8002504:	0002      	movs	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e0a6      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002512:	4b56      	ldr	r3, [pc, #344]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4013      	ands	r3, r2
 800251c:	d0f0      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800251e:	4b52      	ldr	r3, [pc, #328]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002520:	6a1a      	ldr	r2, [r3, #32]
 8002522:	23c0      	movs	r3, #192	; 0xc0
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4013      	ands	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d034      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	23c0      	movs	r3, #192	; 0xc0
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4013      	ands	r3, r2
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	429a      	cmp	r2, r3
 800253e:	d02c      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002540:	4b49      	ldr	r3, [pc, #292]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4a4a      	ldr	r2, [pc, #296]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002546:	4013      	ands	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800254a:	4b47      	ldr	r3, [pc, #284]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800254c:	6a1a      	ldr	r2, [r3, #32]
 800254e:	4b46      	ldr	r3, [pc, #280]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002550:	2180      	movs	r1, #128	; 0x80
 8002552:	0249      	lsls	r1, r1, #9
 8002554:	430a      	orrs	r2, r1
 8002556:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002558:	4b43      	ldr	r3, [pc, #268]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800255a:	6a1a      	ldr	r2, [r3, #32]
 800255c:	4b42      	ldr	r3, [pc, #264]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800255e:	4945      	ldr	r1, [pc, #276]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002560:	400a      	ands	r2, r1
 8002562:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002564:	4b40      	ldr	r3, [pc, #256]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2201      	movs	r2, #1
 800256e:	4013      	ands	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7fe fcd5 	bl	8000f20 <HAL_GetTick>
 8002576:	0003      	movs	r3, r0
 8002578:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257a:	e009      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257c:	f7fe fcd0 	bl	8000f20 <HAL_GetTick>
 8002580:	0002      	movs	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	4a3c      	ldr	r2, [pc, #240]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d901      	bls.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e067      	b.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002590:	4b35      	ldr	r3, [pc, #212]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	2202      	movs	r2, #2
 8002596:	4013      	ands	r3, r2
 8002598:	d0f0      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800259a:	4b33      	ldr	r3, [pc, #204]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4a34      	ldr	r2, [pc, #208]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	0019      	movs	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	4b2f      	ldr	r3, [pc, #188]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025aa:	430a      	orrs	r2, r1
 80025ac:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025ae:	2317      	movs	r3, #23
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d105      	bne.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b8:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025ba:	69da      	ldr	r2, [r3, #28]
 80025bc:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025be:	492f      	ldr	r1, [pc, #188]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80025c0:	400a      	ands	r2, r1
 80025c2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2201      	movs	r2, #1
 80025ca:	4013      	ands	r3, r2
 80025cc:	d009      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ce:	4b26      	ldr	r3, [pc, #152]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	2203      	movs	r2, #3
 80025d4:	4393      	bics	r3, r2
 80025d6:	0019      	movs	r1, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	4b22      	ldr	r3, [pc, #136]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025de:	430a      	orrs	r2, r1
 80025e0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2202      	movs	r2, #2
 80025e8:	4013      	ands	r3, r2
 80025ea:	d009      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025ec:	4b1e      	ldr	r3, [pc, #120]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	4a23      	ldr	r2, [pc, #140]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	0019      	movs	r1, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68da      	ldr	r2, [r3, #12]
 80025fa:	4b1b      	ldr	r3, [pc, #108]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80025fc:	430a      	orrs	r2, r1
 80025fe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2220      	movs	r2, #32
 8002606:	4013      	ands	r3, r2
 8002608:	d009      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	2210      	movs	r2, #16
 8002610:	4393      	bics	r3, r2
 8002612:	0019      	movs	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	4b13      	ldr	r3, [pc, #76]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800261a:	430a      	orrs	r2, r1
 800261c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	029b      	lsls	r3, r3, #10
 8002626:	4013      	ands	r3, r2
 8002628:	d009      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800262a:	4b0f      	ldr	r3, [pc, #60]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	2280      	movs	r2, #128	; 0x80
 8002630:	4393      	bics	r3, r2
 8002632:	0019      	movs	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699a      	ldr	r2, [r3, #24]
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800263a:	430a      	orrs	r2, r1
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4013      	ands	r3, r2
 8002648:	d009      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	2240      	movs	r2, #64	; 0x40
 8002650:	4393      	bics	r3, r2
 8002652:	0019      	movs	r1, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	695a      	ldr	r2, [r3, #20]
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800265a:	430a      	orrs	r2, r1
 800265c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	0018      	movs	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	b006      	add	sp, #24
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	40007000 	.word	0x40007000
 8002670:	fffffcff 	.word	0xfffffcff
 8002674:	fffeffff 	.word	0xfffeffff
 8002678:	00001388 	.word	0x00001388
 800267c:	efffffff 	.word	0xefffffff
 8002680:	fffcffff 	.word	0xfffcffff

08002684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e042      	b.n	800271c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	223d      	movs	r2, #61	; 0x3d
 800269a:	5c9b      	ldrb	r3, [r3, r2]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d107      	bne.n	80026b2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	223c      	movs	r2, #60	; 0x3c
 80026a6:	2100      	movs	r1, #0
 80026a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7fe faf7 	bl	8000ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	223d      	movs	r2, #61	; 0x3d
 80026b6:	2102      	movs	r1, #2
 80026b8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3304      	adds	r3, #4
 80026c2:	0019      	movs	r1, r3
 80026c4:	0010      	movs	r0, r2
 80026c6:	f000 fab7 	bl	8002c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2246      	movs	r2, #70	; 0x46
 80026ce:	2101      	movs	r1, #1
 80026d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	223e      	movs	r2, #62	; 0x3e
 80026d6:	2101      	movs	r1, #1
 80026d8:	5499      	strb	r1, [r3, r2]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	223f      	movs	r2, #63	; 0x3f
 80026de:	2101      	movs	r1, #1
 80026e0:	5499      	strb	r1, [r3, r2]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2240      	movs	r2, #64	; 0x40
 80026e6:	2101      	movs	r1, #1
 80026e8:	5499      	strb	r1, [r3, r2]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2241      	movs	r2, #65	; 0x41
 80026ee:	2101      	movs	r1, #1
 80026f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2242      	movs	r2, #66	; 0x42
 80026f6:	2101      	movs	r1, #1
 80026f8:	5499      	strb	r1, [r3, r2]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2243      	movs	r2, #67	; 0x43
 80026fe:	2101      	movs	r1, #1
 8002700:	5499      	strb	r1, [r3, r2]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2244      	movs	r2, #68	; 0x44
 8002706:	2101      	movs	r1, #1
 8002708:	5499      	strb	r1, [r3, r2]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2245      	movs	r2, #69	; 0x45
 800270e:	2101      	movs	r1, #1
 8002710:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	223d      	movs	r2, #61	; 0x3d
 8002716:	2101      	movs	r1, #1
 8002718:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	0018      	movs	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	b002      	add	sp, #8
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	223d      	movs	r2, #61	; 0x3d
 8002730:	5c9b      	ldrb	r3, [r3, r2]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b01      	cmp	r3, #1
 8002736:	d001      	beq.n	800273c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e03b      	b.n	80027b4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	223d      	movs	r2, #61	; 0x3d
 8002740:	2102      	movs	r1, #2
 8002742:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2101      	movs	r1, #1
 8002750:	430a      	orrs	r2, r1
 8002752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a18      	ldr	r2, [pc, #96]	; (80027bc <HAL_TIM_Base_Start_IT+0x98>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00f      	beq.n	800277e <HAL_TIM_Base_Start_IT+0x5a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	05db      	lsls	r3, r3, #23
 8002766:	429a      	cmp	r2, r3
 8002768:	d009      	beq.n	800277e <HAL_TIM_Base_Start_IT+0x5a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d004      	beq.n	800277e <HAL_TIM_Base_Start_IT+0x5a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <HAL_TIM_Base_Start_IT+0xa0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d111      	bne.n	80027a2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2207      	movs	r2, #7
 8002786:	4013      	ands	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2b06      	cmp	r3, #6
 800278e:	d010      	beq.n	80027b2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2101      	movs	r1, #1
 800279c:	430a      	orrs	r2, r1
 800279e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a0:	e007      	b.n	80027b2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2101      	movs	r1, #1
 80027ae:	430a      	orrs	r2, r1
 80027b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	0018      	movs	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b004      	add	sp, #16
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40012c00 	.word	0x40012c00
 80027c0:	40000400 	.word	0x40000400
 80027c4:	40014000 	.word	0x40014000

080027c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2101      	movs	r1, #1
 80027dc:	438a      	bics	r2, r1
 80027de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	4a0d      	ldr	r2, [pc, #52]	; (800281c <HAL_TIM_Base_Stop_IT+0x54>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	d10d      	bne.n	8002808 <HAL_TIM_Base_Stop_IT+0x40>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4a0b      	ldr	r2, [pc, #44]	; (8002820 <HAL_TIM_Base_Stop_IT+0x58>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	d107      	bne.n	8002808 <HAL_TIM_Base_Stop_IT+0x40>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2101      	movs	r1, #1
 8002804:	438a      	bics	r2, r1
 8002806:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	223d      	movs	r2, #61	; 0x3d
 800280c:	2101      	movs	r1, #1
 800280e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	0018      	movs	r0, r3
 8002814:	46bd      	mov	sp, r7
 8002816:	b002      	add	sp, #8
 8002818:	bd80      	pop	{r7, pc}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	00001111 	.word	0x00001111
 8002820:	00000444 	.word	0x00000444

08002824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2202      	movs	r2, #2
 8002834:	4013      	ands	r3, r2
 8002836:	2b02      	cmp	r3, #2
 8002838:	d124      	bne.n	8002884 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2202      	movs	r2, #2
 8002842:	4013      	ands	r3, r2
 8002844:	2b02      	cmp	r3, #2
 8002846:	d11d      	bne.n	8002884 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2203      	movs	r2, #3
 800284e:	4252      	negs	r2, r2
 8002850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2203      	movs	r2, #3
 8002860:	4013      	ands	r3, r2
 8002862:	d004      	beq.n	800286e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	0018      	movs	r0, r3
 8002868:	f000 f9ce 	bl	8002c08 <HAL_TIM_IC_CaptureCallback>
 800286c:	e007      	b.n	800287e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	0018      	movs	r0, r3
 8002872:	f000 f9c1 	bl	8002bf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	0018      	movs	r0, r3
 800287a:	f000 f9cd 	bl	8002c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	2204      	movs	r2, #4
 800288c:	4013      	ands	r3, r2
 800288e:	2b04      	cmp	r3, #4
 8002890:	d125      	bne.n	80028de <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	2204      	movs	r2, #4
 800289a:	4013      	ands	r3, r2
 800289c:	2b04      	cmp	r3, #4
 800289e:	d11e      	bne.n	80028de <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2205      	movs	r2, #5
 80028a6:	4252      	negs	r2, r2
 80028a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2202      	movs	r2, #2
 80028ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	23c0      	movs	r3, #192	; 0xc0
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4013      	ands	r3, r2
 80028bc:	d004      	beq.n	80028c8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	0018      	movs	r0, r3
 80028c2:	f000 f9a1 	bl	8002c08 <HAL_TIM_IC_CaptureCallback>
 80028c6:	e007      	b.n	80028d8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	0018      	movs	r0, r3
 80028cc:	f000 f994 	bl	8002bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	0018      	movs	r0, r3
 80028d4:	f000 f9a0 	bl	8002c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2208      	movs	r2, #8
 80028e6:	4013      	ands	r3, r2
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d124      	bne.n	8002936 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2208      	movs	r2, #8
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b08      	cmp	r3, #8
 80028f8:	d11d      	bne.n	8002936 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2209      	movs	r2, #9
 8002900:	4252      	negs	r2, r2
 8002902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2204      	movs	r2, #4
 8002908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	2203      	movs	r2, #3
 8002912:	4013      	ands	r3, r2
 8002914:	d004      	beq.n	8002920 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	0018      	movs	r0, r3
 800291a:	f000 f975 	bl	8002c08 <HAL_TIM_IC_CaptureCallback>
 800291e:	e007      	b.n	8002930 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	0018      	movs	r0, r3
 8002924:	f000 f968 	bl	8002bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	0018      	movs	r0, r3
 800292c:	f000 f974 	bl	8002c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	2210      	movs	r2, #16
 800293e:	4013      	ands	r3, r2
 8002940:	2b10      	cmp	r3, #16
 8002942:	d125      	bne.n	8002990 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	2210      	movs	r2, #16
 800294c:	4013      	ands	r3, r2
 800294e:	2b10      	cmp	r3, #16
 8002950:	d11e      	bne.n	8002990 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2211      	movs	r2, #17
 8002958:	4252      	negs	r2, r2
 800295a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2208      	movs	r2, #8
 8002960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	69da      	ldr	r2, [r3, #28]
 8002968:	23c0      	movs	r3, #192	; 0xc0
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4013      	ands	r3, r2
 800296e:	d004      	beq.n	800297a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	0018      	movs	r0, r3
 8002974:	f000 f948 	bl	8002c08 <HAL_TIM_IC_CaptureCallback>
 8002978:	e007      	b.n	800298a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	0018      	movs	r0, r3
 800297e:	f000 f93b 	bl	8002bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	0018      	movs	r0, r3
 8002986:	f000 f947 	bl	8002c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2201      	movs	r2, #1
 8002998:	4013      	ands	r3, r2
 800299a:	2b01      	cmp	r3, #1
 800299c:	d10f      	bne.n	80029be <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d108      	bne.n	80029be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	4252      	negs	r2, r2
 80029b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f7fd fedd 	bl	8000778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2280      	movs	r2, #128	; 0x80
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b80      	cmp	r3, #128	; 0x80
 80029ca:	d10f      	bne.n	80029ec <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	2280      	movs	r2, #128	; 0x80
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b80      	cmp	r3, #128	; 0x80
 80029d8:	d108      	bne.n	80029ec <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2281      	movs	r2, #129	; 0x81
 80029e0:	4252      	negs	r2, r2
 80029e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	0018      	movs	r0, r3
 80029e8:	f000 faa6 	bl	8002f38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2240      	movs	r2, #64	; 0x40
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b40      	cmp	r3, #64	; 0x40
 80029f8:	d10f      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2240      	movs	r2, #64	; 0x40
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b40      	cmp	r3, #64	; 0x40
 8002a06:	d108      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2241      	movs	r2, #65	; 0x41
 8002a0e:	4252      	negs	r2, r2
 8002a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	0018      	movs	r0, r3
 8002a16:	f000 f907 	bl	8002c28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	2220      	movs	r2, #32
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d10f      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	4013      	ands	r3, r2
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d108      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2221      	movs	r2, #33	; 0x21
 8002a3c:	4252      	negs	r2, r2
 8002a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	0018      	movs	r0, r3
 8002a44:	f000 fa70 	bl	8002f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a48:	46c0      	nop			; (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b002      	add	sp, #8
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5a:	230f      	movs	r3, #15
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	223c      	movs	r2, #60	; 0x3c
 8002a66:	5c9b      	ldrb	r3, [r3, r2]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_TIM_ConfigClockSource+0x20>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e0bc      	b.n	8002bea <HAL_TIM_ConfigClockSource+0x19a>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	223c      	movs	r2, #60	; 0x3c
 8002a74:	2101      	movs	r1, #1
 8002a76:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	223d      	movs	r2, #61	; 0x3d
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2277      	movs	r2, #119	; 0x77
 8002a8c:	4393      	bics	r3, r2
 8002a8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4a58      	ldr	r2, [pc, #352]	; (8002bf4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2280      	movs	r2, #128	; 0x80
 8002aa6:	0192      	lsls	r2, r2, #6
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d040      	beq.n	8002b2e <HAL_TIM_ConfigClockSource+0xde>
 8002aac:	2280      	movs	r2, #128	; 0x80
 8002aae:	0192      	lsls	r2, r2, #6
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d900      	bls.n	8002ab6 <HAL_TIM_ConfigClockSource+0x66>
 8002ab4:	e088      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x178>
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	0152      	lsls	r2, r2, #5
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d100      	bne.n	8002ac0 <HAL_TIM_ConfigClockSource+0x70>
 8002abe:	e088      	b.n	8002bd2 <HAL_TIM_ConfigClockSource+0x182>
 8002ac0:	2280      	movs	r2, #128	; 0x80
 8002ac2:	0152      	lsls	r2, r2, #5
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d900      	bls.n	8002aca <HAL_TIM_ConfigClockSource+0x7a>
 8002ac8:	e07e      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x178>
 8002aca:	2b70      	cmp	r3, #112	; 0x70
 8002acc:	d018      	beq.n	8002b00 <HAL_TIM_ConfigClockSource+0xb0>
 8002ace:	d900      	bls.n	8002ad2 <HAL_TIM_ConfigClockSource+0x82>
 8002ad0:	e07a      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x178>
 8002ad2:	2b60      	cmp	r3, #96	; 0x60
 8002ad4:	d04f      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x126>
 8002ad6:	d900      	bls.n	8002ada <HAL_TIM_ConfigClockSource+0x8a>
 8002ad8:	e076      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x178>
 8002ada:	2b50      	cmp	r3, #80	; 0x50
 8002adc:	d03b      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0x106>
 8002ade:	d900      	bls.n	8002ae2 <HAL_TIM_ConfigClockSource+0x92>
 8002ae0:	e072      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x178>
 8002ae2:	2b40      	cmp	r3, #64	; 0x40
 8002ae4:	d057      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x146>
 8002ae6:	d900      	bls.n	8002aea <HAL_TIM_ConfigClockSource+0x9a>
 8002ae8:	e06e      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x178>
 8002aea:	2b30      	cmp	r3, #48	; 0x30
 8002aec:	d063      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x166>
 8002aee:	d86b      	bhi.n	8002bc8 <HAL_TIM_ConfigClockSource+0x178>
 8002af0:	2b20      	cmp	r3, #32
 8002af2:	d060      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x166>
 8002af4:	d868      	bhi.n	8002bc8 <HAL_TIM_ConfigClockSource+0x178>
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d05d      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x166>
 8002afa:	2b10      	cmp	r3, #16
 8002afc:	d05b      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x166>
 8002afe:	e063      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b10:	f000 f98c 	bl	8002e2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2277      	movs	r2, #119	; 0x77
 8002b20:	4313      	orrs	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	609a      	str	r2, [r3, #8]
      break;
 8002b2c:	e052      	b.n	8002bd4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b3e:	f000 f975 	bl	8002e2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2180      	movs	r1, #128	; 0x80
 8002b4e:	01c9      	lsls	r1, r1, #7
 8002b50:	430a      	orrs	r2, r1
 8002b52:	609a      	str	r2, [r3, #8]
      break;
 8002b54:	e03e      	b.n	8002bd4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b62:	001a      	movs	r2, r3
 8002b64:	f000 f8e8 	bl	8002d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2150      	movs	r1, #80	; 0x50
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f000 f942 	bl	8002df8 <TIM_ITRx_SetConfig>
      break;
 8002b74:	e02e      	b.n	8002bd4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b82:	001a      	movs	r2, r3
 8002b84:	f000 f906 	bl	8002d94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2160      	movs	r1, #96	; 0x60
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f000 f932 	bl	8002df8 <TIM_ITRx_SetConfig>
      break;
 8002b94:	e01e      	b.n	8002bd4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba2:	001a      	movs	r2, r3
 8002ba4:	f000 f8c8 	bl	8002d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2140      	movs	r1, #64	; 0x40
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f000 f922 	bl	8002df8 <TIM_ITRx_SetConfig>
      break;
 8002bb4:	e00e      	b.n	8002bd4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	0019      	movs	r1, r3
 8002bc0:	0010      	movs	r0, r2
 8002bc2:	f000 f919 	bl	8002df8 <TIM_ITRx_SetConfig>
      break;
 8002bc6:	e005      	b.n	8002bd4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002bc8:	230f      	movs	r3, #15
 8002bca:	18fb      	adds	r3, r7, r3
 8002bcc:	2201      	movs	r2, #1
 8002bce:	701a      	strb	r2, [r3, #0]
      break;
 8002bd0:	e000      	b.n	8002bd4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002bd2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	223d      	movs	r2, #61	; 0x3d
 8002bd8:	2101      	movs	r1, #1
 8002bda:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	223c      	movs	r2, #60	; 0x3c
 8002be0:	2100      	movs	r1, #0
 8002be2:	5499      	strb	r1, [r3, r2]

  return status;
 8002be4:	230f      	movs	r3, #15
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	781b      	ldrb	r3, [r3, #0]
}
 8002bea:	0018      	movs	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b004      	add	sp, #16
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	ffff00ff 	.word	0xffff00ff

08002bf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c00:	46c0      	nop			; (mov r8, r8)
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b002      	add	sp, #8
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c10:	46c0      	nop			; (mov r8, r8)
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b002      	add	sp, #8
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b002      	add	sp, #8
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c30:	46c0      	nop			; (mov r8, r8)
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b002      	add	sp, #8
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a34      	ldr	r2, [pc, #208]	; (8002d1c <TIM_Base_SetConfig+0xe4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d008      	beq.n	8002c62 <TIM_Base_SetConfig+0x2a>
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	05db      	lsls	r3, r3, #23
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d003      	beq.n	8002c62 <TIM_Base_SetConfig+0x2a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a30      	ldr	r2, [pc, #192]	; (8002d20 <TIM_Base_SetConfig+0xe8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d108      	bne.n	8002c74 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2270      	movs	r2, #112	; 0x70
 8002c66:	4393      	bics	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a29      	ldr	r2, [pc, #164]	; (8002d1c <TIM_Base_SetConfig+0xe4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d018      	beq.n	8002cae <TIM_Base_SetConfig+0x76>
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	2380      	movs	r3, #128	; 0x80
 8002c80:	05db      	lsls	r3, r3, #23
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d013      	beq.n	8002cae <TIM_Base_SetConfig+0x76>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a25      	ldr	r2, [pc, #148]	; (8002d20 <TIM_Base_SetConfig+0xe8>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00f      	beq.n	8002cae <TIM_Base_SetConfig+0x76>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a24      	ldr	r2, [pc, #144]	; (8002d24 <TIM_Base_SetConfig+0xec>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00b      	beq.n	8002cae <TIM_Base_SetConfig+0x76>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a23      	ldr	r2, [pc, #140]	; (8002d28 <TIM_Base_SetConfig+0xf0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <TIM_Base_SetConfig+0x76>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a22      	ldr	r2, [pc, #136]	; (8002d2c <TIM_Base_SetConfig+0xf4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d003      	beq.n	8002cae <TIM_Base_SetConfig+0x76>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a21      	ldr	r2, [pc, #132]	; (8002d30 <TIM_Base_SetConfig+0xf8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d108      	bne.n	8002cc0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4a20      	ldr	r2, [pc, #128]	; (8002d34 <TIM_Base_SetConfig+0xfc>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2280      	movs	r2, #128	; 0x80
 8002cc4:	4393      	bics	r3, r2
 8002cc6:	001a      	movs	r2, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a0c      	ldr	r2, [pc, #48]	; (8002d1c <TIM_Base_SetConfig+0xe4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d00b      	beq.n	8002d06 <TIM_Base_SetConfig+0xce>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a0d      	ldr	r2, [pc, #52]	; (8002d28 <TIM_Base_SetConfig+0xf0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d007      	beq.n	8002d06 <TIM_Base_SetConfig+0xce>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a0c      	ldr	r2, [pc, #48]	; (8002d2c <TIM_Base_SetConfig+0xf4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d003      	beq.n	8002d06 <TIM_Base_SetConfig+0xce>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <TIM_Base_SetConfig+0xf8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d103      	bne.n	8002d0e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	691a      	ldr	r2, [r3, #16]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	615a      	str	r2, [r3, #20]
}
 8002d14:	46c0      	nop			; (mov r8, r8)
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b004      	add	sp, #16
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40012c00 	.word	0x40012c00
 8002d20:	40000400 	.word	0x40000400
 8002d24:	40002000 	.word	0x40002000
 8002d28:	40014000 	.word	0x40014000
 8002d2c:	40014400 	.word	0x40014400
 8002d30:	40014800 	.word	0x40014800
 8002d34:	fffffcff 	.word	0xfffffcff

08002d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4393      	bics	r3, r2
 8002d52:	001a      	movs	r2, r3
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	22f0      	movs	r2, #240	; 0xf0
 8002d62:	4393      	bics	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	220a      	movs	r2, #10
 8002d74:	4393      	bics	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d78:	697a      	ldr	r2, [r7, #20]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	621a      	str	r2, [r3, #32]
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b006      	add	sp, #24
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	2210      	movs	r2, #16
 8002da6:	4393      	bics	r3, r2
 8002da8:	001a      	movs	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	4a0d      	ldr	r2, [pc, #52]	; (8002df4 <TIM_TI2_ConfigInputStage+0x60>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	031b      	lsls	r3, r3, #12
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	22a0      	movs	r2, #160	; 0xa0
 8002dd0:	4393      	bics	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	621a      	str	r2, [r3, #32]
}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	46bd      	mov	sp, r7
 8002dee:	b006      	add	sp, #24
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	ffff0fff 	.word	0xffff0fff

08002df8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2270      	movs	r2, #112	; 0x70
 8002e0c:	4393      	bics	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	2207      	movs	r2, #7
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	609a      	str	r2, [r3, #8]
}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b004      	add	sp, #16
 8002e28:	bd80      	pop	{r7, pc}
	...

08002e2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	4a09      	ldr	r2, [pc, #36]	; (8002e68 <TIM_ETR_SetConfig+0x3c>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	021a      	lsls	r2, r3, #8
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	697a      	ldr	r2, [r7, #20]
 8002e5e:	609a      	str	r2, [r3, #8]
}
 8002e60:	46c0      	nop			; (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b006      	add	sp, #24
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	ffff00ff 	.word	0xffff00ff

08002e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	223c      	movs	r2, #60	; 0x3c
 8002e7a:	5c9b      	ldrb	r3, [r3, r2]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e047      	b.n	8002f14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	223c      	movs	r2, #60	; 0x3c
 8002e88:	2101      	movs	r1, #1
 8002e8a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	223d      	movs	r2, #61	; 0x3d
 8002e90:	2102      	movs	r1, #2
 8002e92:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2270      	movs	r2, #112	; 0x70
 8002ea8:	4393      	bics	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a16      	ldr	r2, [pc, #88]	; (8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d00f      	beq.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	05db      	lsls	r3, r3, #23
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d009      	beq.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a11      	ldr	r2, [pc, #68]	; (8002f20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d004      	beq.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a10      	ldr	r2, [pc, #64]	; (8002f24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d10c      	bne.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2280      	movs	r2, #128	; 0x80
 8002eec:	4393      	bics	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	223d      	movs	r2, #61	; 0x3d
 8002f06:	2101      	movs	r1, #1
 8002f08:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	223c      	movs	r2, #60	; 0x3c
 8002f0e:	2100      	movs	r1, #0
 8002f10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b004      	add	sp, #16
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40012c00 	.word	0x40012c00
 8002f20:	40000400 	.word	0x40000400
 8002f24:	40014000 	.word	0x40014000

08002f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b002      	add	sp, #8
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b002      	add	sp, #8
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d101      	bne.n	8002f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e044      	b.n	8002fe4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d107      	bne.n	8002f72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2278      	movs	r2, #120	; 0x78
 8002f66:	2100      	movs	r1, #0
 8002f68:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f7fd fecf 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2224      	movs	r2, #36	; 0x24
 8002f76:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2101      	movs	r1, #1
 8002f84:	438a      	bics	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f000 f830 	bl	8002ff0 <UART_SetConfig>
 8002f90:	0003      	movs	r3, r0
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e024      	b.n	8002fe4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f000 f9ab 	bl	8003300 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	490d      	ldr	r1, [pc, #52]	; (8002fec <HAL_UART_Init+0xa4>)
 8002fb6:	400a      	ands	r2, r1
 8002fb8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	212a      	movs	r1, #42	; 0x2a
 8002fc6:	438a      	bics	r2, r1
 8002fc8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 fa43 	bl	8003468 <UART_CheckIdleState>
 8002fe2:	0003      	movs	r3, r0
}
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b002      	add	sp, #8
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	ffffb7ff 	.word	0xffffb7ff

08002ff0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ff8:	231e      	movs	r3, #30
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4aaf      	ldr	r2, [pc, #700]	; (80032dc <UART_SetConfig+0x2ec>)
 8003020:	4013      	ands	r3, r2
 8003022:	0019      	movs	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	430a      	orrs	r2, r1
 800302c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4aaa      	ldr	r2, [pc, #680]	; (80032e0 <UART_SetConfig+0x2f0>)
 8003036:	4013      	ands	r3, r2
 8003038:	0019      	movs	r1, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	4313      	orrs	r3, r2
 8003054:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	4aa1      	ldr	r2, [pc, #644]	; (80032e4 <UART_SetConfig+0x2f4>)
 800305e:	4013      	ands	r3, r2
 8003060:	0019      	movs	r1, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	430a      	orrs	r2, r1
 800306a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a9d      	ldr	r2, [pc, #628]	; (80032e8 <UART_SetConfig+0x2f8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d127      	bne.n	80030c6 <UART_SetConfig+0xd6>
 8003076:	4b9d      	ldr	r3, [pc, #628]	; (80032ec <UART_SetConfig+0x2fc>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	2203      	movs	r2, #3
 800307c:	4013      	ands	r3, r2
 800307e:	2b03      	cmp	r3, #3
 8003080:	d00d      	beq.n	800309e <UART_SetConfig+0xae>
 8003082:	d81b      	bhi.n	80030bc <UART_SetConfig+0xcc>
 8003084:	2b02      	cmp	r3, #2
 8003086:	d014      	beq.n	80030b2 <UART_SetConfig+0xc2>
 8003088:	d818      	bhi.n	80030bc <UART_SetConfig+0xcc>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <UART_SetConfig+0xa4>
 800308e:	2b01      	cmp	r3, #1
 8003090:	d00a      	beq.n	80030a8 <UART_SetConfig+0xb8>
 8003092:	e013      	b.n	80030bc <UART_SetConfig+0xcc>
 8003094:	231f      	movs	r3, #31
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	e065      	b.n	800316a <UART_SetConfig+0x17a>
 800309e:	231f      	movs	r3, #31
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	2202      	movs	r2, #2
 80030a4:	701a      	strb	r2, [r3, #0]
 80030a6:	e060      	b.n	800316a <UART_SetConfig+0x17a>
 80030a8:	231f      	movs	r3, #31
 80030aa:	18fb      	adds	r3, r7, r3
 80030ac:	2204      	movs	r2, #4
 80030ae:	701a      	strb	r2, [r3, #0]
 80030b0:	e05b      	b.n	800316a <UART_SetConfig+0x17a>
 80030b2:	231f      	movs	r3, #31
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	2208      	movs	r2, #8
 80030b8:	701a      	strb	r2, [r3, #0]
 80030ba:	e056      	b.n	800316a <UART_SetConfig+0x17a>
 80030bc:	231f      	movs	r3, #31
 80030be:	18fb      	adds	r3, r7, r3
 80030c0:	2210      	movs	r2, #16
 80030c2:	701a      	strb	r2, [r3, #0]
 80030c4:	e051      	b.n	800316a <UART_SetConfig+0x17a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a89      	ldr	r2, [pc, #548]	; (80032f0 <UART_SetConfig+0x300>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d134      	bne.n	800313a <UART_SetConfig+0x14a>
 80030d0:	4b86      	ldr	r3, [pc, #536]	; (80032ec <UART_SetConfig+0x2fc>)
 80030d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d4:	23c0      	movs	r3, #192	; 0xc0
 80030d6:	029b      	lsls	r3, r3, #10
 80030d8:	4013      	ands	r3, r2
 80030da:	22c0      	movs	r2, #192	; 0xc0
 80030dc:	0292      	lsls	r2, r2, #10
 80030de:	4293      	cmp	r3, r2
 80030e0:	d017      	beq.n	8003112 <UART_SetConfig+0x122>
 80030e2:	22c0      	movs	r2, #192	; 0xc0
 80030e4:	0292      	lsls	r2, r2, #10
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d822      	bhi.n	8003130 <UART_SetConfig+0x140>
 80030ea:	2280      	movs	r2, #128	; 0x80
 80030ec:	0292      	lsls	r2, r2, #10
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d019      	beq.n	8003126 <UART_SetConfig+0x136>
 80030f2:	2280      	movs	r2, #128	; 0x80
 80030f4:	0292      	lsls	r2, r2, #10
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d81a      	bhi.n	8003130 <UART_SetConfig+0x140>
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d004      	beq.n	8003108 <UART_SetConfig+0x118>
 80030fe:	2280      	movs	r2, #128	; 0x80
 8003100:	0252      	lsls	r2, r2, #9
 8003102:	4293      	cmp	r3, r2
 8003104:	d00a      	beq.n	800311c <UART_SetConfig+0x12c>
 8003106:	e013      	b.n	8003130 <UART_SetConfig+0x140>
 8003108:	231f      	movs	r3, #31
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	2200      	movs	r2, #0
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	e02b      	b.n	800316a <UART_SetConfig+0x17a>
 8003112:	231f      	movs	r3, #31
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	2202      	movs	r2, #2
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	e026      	b.n	800316a <UART_SetConfig+0x17a>
 800311c:	231f      	movs	r3, #31
 800311e:	18fb      	adds	r3, r7, r3
 8003120:	2204      	movs	r2, #4
 8003122:	701a      	strb	r2, [r3, #0]
 8003124:	e021      	b.n	800316a <UART_SetConfig+0x17a>
 8003126:	231f      	movs	r3, #31
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	2208      	movs	r2, #8
 800312c:	701a      	strb	r2, [r3, #0]
 800312e:	e01c      	b.n	800316a <UART_SetConfig+0x17a>
 8003130:	231f      	movs	r3, #31
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	2210      	movs	r2, #16
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	e017      	b.n	800316a <UART_SetConfig+0x17a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a6d      	ldr	r2, [pc, #436]	; (80032f4 <UART_SetConfig+0x304>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d104      	bne.n	800314e <UART_SetConfig+0x15e>
 8003144:	231f      	movs	r3, #31
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
 800314c:	e00d      	b.n	800316a <UART_SetConfig+0x17a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a69      	ldr	r2, [pc, #420]	; (80032f8 <UART_SetConfig+0x308>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d104      	bne.n	8003162 <UART_SetConfig+0x172>
 8003158:	231f      	movs	r3, #31
 800315a:	18fb      	adds	r3, r7, r3
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
 8003160:	e003      	b.n	800316a <UART_SetConfig+0x17a>
 8003162:	231f      	movs	r3, #31
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	2210      	movs	r2, #16
 8003168:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69da      	ldr	r2, [r3, #28]
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	429a      	cmp	r2, r3
 8003174:	d15c      	bne.n	8003230 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8003176:	231f      	movs	r3, #31
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b08      	cmp	r3, #8
 800317e:	d015      	beq.n	80031ac <UART_SetConfig+0x1bc>
 8003180:	dc18      	bgt.n	80031b4 <UART_SetConfig+0x1c4>
 8003182:	2b04      	cmp	r3, #4
 8003184:	d00d      	beq.n	80031a2 <UART_SetConfig+0x1b2>
 8003186:	dc15      	bgt.n	80031b4 <UART_SetConfig+0x1c4>
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <UART_SetConfig+0x1a2>
 800318c:	2b02      	cmp	r3, #2
 800318e:	d005      	beq.n	800319c <UART_SetConfig+0x1ac>
 8003190:	e010      	b.n	80031b4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003192:	f7ff f963 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8003196:	0003      	movs	r3, r0
 8003198:	61bb      	str	r3, [r7, #24]
        break;
 800319a:	e012      	b.n	80031c2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800319c:	4b57      	ldr	r3, [pc, #348]	; (80032fc <UART_SetConfig+0x30c>)
 800319e:	61bb      	str	r3, [r7, #24]
        break;
 80031a0:	e00f      	b.n	80031c2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031a2:	f7ff f8df 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 80031a6:	0003      	movs	r3, r0
 80031a8:	61bb      	str	r3, [r7, #24]
        break;
 80031aa:	e00a      	b.n	80031c2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	61bb      	str	r3, [r7, #24]
        break;
 80031b2:	e006      	b.n	80031c2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031b8:	231e      	movs	r3, #30
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	2201      	movs	r2, #1
 80031be:	701a      	strb	r2, [r3, #0]
        break;
 80031c0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d100      	bne.n	80031ca <UART_SetConfig+0x1da>
 80031c8:	e07a      	b.n	80032c0 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031ca:	69bb      	ldr	r3, [r7, #24]
 80031cc:	005a      	lsls	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	085b      	lsrs	r3, r3, #1
 80031d4:	18d2      	adds	r2, r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	0019      	movs	r1, r3
 80031dc:	0010      	movs	r0, r2
 80031de:	f7fc ff93 	bl	8000108 <__udivsi3>
 80031e2:	0003      	movs	r3, r0
 80031e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	2b0f      	cmp	r3, #15
 80031ea:	d91c      	bls.n	8003226 <UART_SetConfig+0x236>
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	025b      	lsls	r3, r3, #9
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d217      	bcs.n	8003226 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	200e      	movs	r0, #14
 80031fc:	183b      	adds	r3, r7, r0
 80031fe:	210f      	movs	r1, #15
 8003200:	438a      	bics	r2, r1
 8003202:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	085b      	lsrs	r3, r3, #1
 8003208:	b29b      	uxth	r3, r3
 800320a:	2207      	movs	r2, #7
 800320c:	4013      	ands	r3, r2
 800320e:	b299      	uxth	r1, r3
 8003210:	183b      	adds	r3, r7, r0
 8003212:	183a      	adds	r2, r7, r0
 8003214:	8812      	ldrh	r2, [r2, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	183a      	adds	r2, r7, r0
 8003220:	8812      	ldrh	r2, [r2, #0]
 8003222:	60da      	str	r2, [r3, #12]
 8003224:	e04c      	b.n	80032c0 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003226:	231e      	movs	r3, #30
 8003228:	18fb      	adds	r3, r7, r3
 800322a:	2201      	movs	r2, #1
 800322c:	701a      	strb	r2, [r3, #0]
 800322e:	e047      	b.n	80032c0 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003230:	231f      	movs	r3, #31
 8003232:	18fb      	adds	r3, r7, r3
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	2b08      	cmp	r3, #8
 8003238:	d015      	beq.n	8003266 <UART_SetConfig+0x276>
 800323a:	dc18      	bgt.n	800326e <UART_SetConfig+0x27e>
 800323c:	2b04      	cmp	r3, #4
 800323e:	d00d      	beq.n	800325c <UART_SetConfig+0x26c>
 8003240:	dc15      	bgt.n	800326e <UART_SetConfig+0x27e>
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <UART_SetConfig+0x25c>
 8003246:	2b02      	cmp	r3, #2
 8003248:	d005      	beq.n	8003256 <UART_SetConfig+0x266>
 800324a:	e010      	b.n	800326e <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800324c:	f7ff f906 	bl	800245c <HAL_RCC_GetPCLK1Freq>
 8003250:	0003      	movs	r3, r0
 8003252:	61bb      	str	r3, [r7, #24]
        break;
 8003254:	e012      	b.n	800327c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003256:	4b29      	ldr	r3, [pc, #164]	; (80032fc <UART_SetConfig+0x30c>)
 8003258:	61bb      	str	r3, [r7, #24]
        break;
 800325a:	e00f      	b.n	800327c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800325c:	f7ff f882 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8003260:	0003      	movs	r3, r0
 8003262:	61bb      	str	r3, [r7, #24]
        break;
 8003264:	e00a      	b.n	800327c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003266:	2380      	movs	r3, #128	; 0x80
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	61bb      	str	r3, [r7, #24]
        break;
 800326c:	e006      	b.n	800327c <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003272:	231e      	movs	r3, #30
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	2201      	movs	r2, #1
 8003278:	701a      	strb	r2, [r3, #0]
        break;
 800327a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d01e      	beq.n	80032c0 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	085a      	lsrs	r2, r3, #1
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	18d2      	adds	r2, r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	0019      	movs	r1, r3
 8003292:	0010      	movs	r0, r2
 8003294:	f7fc ff38 	bl	8000108 <__udivsi3>
 8003298:	0003      	movs	r3, r0
 800329a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	2b0f      	cmp	r3, #15
 80032a0:	d90a      	bls.n	80032b8 <UART_SetConfig+0x2c8>
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	2380      	movs	r3, #128	; 0x80
 80032a6:	025b      	lsls	r3, r3, #9
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d205      	bcs.n	80032b8 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	e003      	b.n	80032c0 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80032b8:	231e      	movs	r3, #30
 80032ba:	18fb      	adds	r3, r7, r3
 80032bc:	2201      	movs	r2, #1
 80032be:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80032cc:	231e      	movs	r3, #30
 80032ce:	18fb      	adds	r3, r7, r3
 80032d0:	781b      	ldrb	r3, [r3, #0]
}
 80032d2:	0018      	movs	r0, r3
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b008      	add	sp, #32
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	efff69f3 	.word	0xefff69f3
 80032e0:	ffffcfff 	.word	0xffffcfff
 80032e4:	fffff4ff 	.word	0xfffff4ff
 80032e8:	40013800 	.word	0x40013800
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40004400 	.word	0x40004400
 80032f4:	40004800 	.word	0x40004800
 80032f8:	40004c00 	.word	0x40004c00
 80032fc:	007a1200 	.word	0x007a1200

08003300 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	2201      	movs	r2, #1
 800330e:	4013      	ands	r3, r2
 8003310:	d00b      	beq.n	800332a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	4a4a      	ldr	r2, [pc, #296]	; (8003444 <UART_AdvFeatureConfig+0x144>)
 800331a:	4013      	ands	r3, r2
 800331c:	0019      	movs	r1, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	2202      	movs	r2, #2
 8003330:	4013      	ands	r3, r2
 8003332:	d00b      	beq.n	800334c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4a43      	ldr	r2, [pc, #268]	; (8003448 <UART_AdvFeatureConfig+0x148>)
 800333c:	4013      	ands	r3, r2
 800333e:	0019      	movs	r1, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	2204      	movs	r2, #4
 8003352:	4013      	ands	r3, r2
 8003354:	d00b      	beq.n	800336e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	4a3b      	ldr	r2, [pc, #236]	; (800344c <UART_AdvFeatureConfig+0x14c>)
 800335e:	4013      	ands	r3, r2
 8003360:	0019      	movs	r1, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	2208      	movs	r2, #8
 8003374:	4013      	ands	r3, r2
 8003376:	d00b      	beq.n	8003390 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	4a34      	ldr	r2, [pc, #208]	; (8003450 <UART_AdvFeatureConfig+0x150>)
 8003380:	4013      	ands	r3, r2
 8003382:	0019      	movs	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	2210      	movs	r2, #16
 8003396:	4013      	ands	r3, r2
 8003398:	d00b      	beq.n	80033b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4a2c      	ldr	r2, [pc, #176]	; (8003454 <UART_AdvFeatureConfig+0x154>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	0019      	movs	r1, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b6:	2220      	movs	r2, #32
 80033b8:	4013      	ands	r3, r2
 80033ba:	d00b      	beq.n	80033d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	4a25      	ldr	r2, [pc, #148]	; (8003458 <UART_AdvFeatureConfig+0x158>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	0019      	movs	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d8:	2240      	movs	r2, #64	; 0x40
 80033da:	4013      	ands	r3, r2
 80033dc:	d01d      	beq.n	800341a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4a1d      	ldr	r2, [pc, #116]	; (800345c <UART_AdvFeatureConfig+0x15c>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	0019      	movs	r1, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	035b      	lsls	r3, r3, #13
 80033fe:	429a      	cmp	r2, r3
 8003400:	d10b      	bne.n	800341a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4a15      	ldr	r2, [pc, #84]	; (8003460 <UART_AdvFeatureConfig+0x160>)
 800340a:	4013      	ands	r3, r2
 800340c:	0019      	movs	r1, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	2280      	movs	r2, #128	; 0x80
 8003420:	4013      	ands	r3, r2
 8003422:	d00b      	beq.n	800343c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	4a0e      	ldr	r2, [pc, #56]	; (8003464 <UART_AdvFeatureConfig+0x164>)
 800342c:	4013      	ands	r3, r2
 800342e:	0019      	movs	r1, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	605a      	str	r2, [r3, #4]
  }
}
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	46bd      	mov	sp, r7
 8003440:	b002      	add	sp, #8
 8003442:	bd80      	pop	{r7, pc}
 8003444:	fffdffff 	.word	0xfffdffff
 8003448:	fffeffff 	.word	0xfffeffff
 800344c:	fffbffff 	.word	0xfffbffff
 8003450:	ffff7fff 	.word	0xffff7fff
 8003454:	ffffefff 	.word	0xffffefff
 8003458:	ffffdfff 	.word	0xffffdfff
 800345c:	ffefffff 	.word	0xffefffff
 8003460:	ff9fffff 	.word	0xff9fffff
 8003464:	fff7ffff 	.word	0xfff7ffff

08003468 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b092      	sub	sp, #72	; 0x48
 800346c:	af02      	add	r7, sp, #8
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2284      	movs	r2, #132	; 0x84
 8003474:	2100      	movs	r1, #0
 8003476:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003478:	f7fd fd52 	bl	8000f20 <HAL_GetTick>
 800347c:	0003      	movs	r3, r0
 800347e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2208      	movs	r2, #8
 8003488:	4013      	ands	r3, r2
 800348a:	2b08      	cmp	r3, #8
 800348c:	d12c      	bne.n	80034e8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800348e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003490:	2280      	movs	r2, #128	; 0x80
 8003492:	0391      	lsls	r1, r2, #14
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4a46      	ldr	r2, [pc, #280]	; (80035b0 <UART_CheckIdleState+0x148>)
 8003498:	9200      	str	r2, [sp, #0]
 800349a:	2200      	movs	r2, #0
 800349c:	f000 f88c 	bl	80035b8 <UART_WaitOnFlagUntilTimeout>
 80034a0:	1e03      	subs	r3, r0, #0
 80034a2:	d021      	beq.n	80034e8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a4:	f3ef 8310 	mrs	r3, PRIMASK
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80034ae:	2301      	movs	r3, #1
 80034b0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b4:	f383 8810 	msr	PRIMASK, r3
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2180      	movs	r1, #128	; 0x80
 80034c6:	438a      	bics	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d0:	f383 8810 	msr	PRIMASK, r3
}
 80034d4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2278      	movs	r2, #120	; 0x78
 80034e0:	2100      	movs	r1, #0
 80034e2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e05f      	b.n	80035a8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2204      	movs	r2, #4
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d146      	bne.n	8003584 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f8:	2280      	movs	r2, #128	; 0x80
 80034fa:	03d1      	lsls	r1, r2, #15
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4a2c      	ldr	r2, [pc, #176]	; (80035b0 <UART_CheckIdleState+0x148>)
 8003500:	9200      	str	r2, [sp, #0]
 8003502:	2200      	movs	r2, #0
 8003504:	f000 f858 	bl	80035b8 <UART_WaitOnFlagUntilTimeout>
 8003508:	1e03      	subs	r3, r0, #0
 800350a:	d03b      	beq.n	8003584 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350c:	f3ef 8310 	mrs	r3, PRIMASK
 8003510:	60fb      	str	r3, [r7, #12]
  return(result);
 8003512:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003514:	637b      	str	r3, [r7, #52]	; 0x34
 8003516:	2301      	movs	r3, #1
 8003518:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f383 8810 	msr	PRIMASK, r3
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4921      	ldr	r1, [pc, #132]	; (80035b4 <UART_CheckIdleState+0x14c>)
 800352e:	400a      	ands	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003534:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f383 8810 	msr	PRIMASK, r3
}
 800353c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800353e:	f3ef 8310 	mrs	r3, PRIMASK
 8003542:	61bb      	str	r3, [r7, #24]
  return(result);
 8003544:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003546:	633b      	str	r3, [r7, #48]	; 0x30
 8003548:	2301      	movs	r3, #1
 800354a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f383 8810 	msr	PRIMASK, r3
}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2101      	movs	r1, #1
 8003560:	438a      	bics	r2, r1
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003566:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003568:	6a3b      	ldr	r3, [r7, #32]
 800356a:	f383 8810 	msr	PRIMASK, r3
}
 800356e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2280      	movs	r2, #128	; 0x80
 8003574:	2120      	movs	r1, #32
 8003576:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2278      	movs	r2, #120	; 0x78
 800357c:	2100      	movs	r1, #0
 800357e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e011      	b.n	80035a8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2280      	movs	r2, #128	; 0x80
 800358e:	2120      	movs	r1, #32
 8003590:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2278      	movs	r2, #120	; 0x78
 80035a2:	2100      	movs	r1, #0
 80035a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	0018      	movs	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b010      	add	sp, #64	; 0x40
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	01ffffff 	.word	0x01ffffff
 80035b4:	fffffedf 	.word	0xfffffedf

080035b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	1dfb      	adds	r3, r7, #7
 80035c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c8:	e04b      	b.n	8003662 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	3301      	adds	r3, #1
 80035ce:	d048      	beq.n	8003662 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d0:	f7fd fca6 	bl	8000f20 <HAL_GetTick>
 80035d4:	0002      	movs	r2, r0
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d302      	bcc.n	80035e6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e04b      	b.n	8003682 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2204      	movs	r2, #4
 80035f2:	4013      	ands	r3, r2
 80035f4:	d035      	beq.n	8003662 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	2208      	movs	r2, #8
 80035fe:	4013      	ands	r3, r2
 8003600:	2b08      	cmp	r3, #8
 8003602:	d111      	bne.n	8003628 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2208      	movs	r2, #8
 800360a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	0018      	movs	r0, r3
 8003610:	f000 f83c 	bl	800368c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2284      	movs	r2, #132	; 0x84
 8003618:	2108      	movs	r1, #8
 800361a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2278      	movs	r2, #120	; 0x78
 8003620:	2100      	movs	r1, #0
 8003622:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e02c      	b.n	8003682 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69da      	ldr	r2, [r3, #28]
 800362e:	2380      	movs	r3, #128	; 0x80
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	401a      	ands	r2, r3
 8003634:	2380      	movs	r3, #128	; 0x80
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	429a      	cmp	r2, r3
 800363a:	d112      	bne.n	8003662 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2280      	movs	r2, #128	; 0x80
 8003642:	0112      	lsls	r2, r2, #4
 8003644:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	0018      	movs	r0, r3
 800364a:	f000 f81f 	bl	800368c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2284      	movs	r2, #132	; 0x84
 8003652:	2120      	movs	r1, #32
 8003654:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2278      	movs	r2, #120	; 0x78
 800365a:	2100      	movs	r1, #0
 800365c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e00f      	b.n	8003682 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	4013      	ands	r3, r2
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	425a      	negs	r2, r3
 8003672:	4153      	adcs	r3, r2
 8003674:	b2db      	uxtb	r3, r3
 8003676:	001a      	movs	r2, r3
 8003678:	1dfb      	adds	r3, r7, #7
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d0a4      	beq.n	80035ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	0018      	movs	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	b004      	add	sp, #16
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08e      	sub	sp, #56	; 0x38
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003694:	f3ef 8310 	mrs	r3, PRIMASK
 8003698:	617b      	str	r3, [r7, #20]
  return(result);
 800369a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800369c:	637b      	str	r3, [r7, #52]	; 0x34
 800369e:	2301      	movs	r3, #1
 80036a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	f383 8810 	msr	PRIMASK, r3
}
 80036a8:	46c0      	nop			; (mov r8, r8)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4926      	ldr	r1, [pc, #152]	; (8003750 <UART_EndRxTransfer+0xc4>)
 80036b6:	400a      	ands	r2, r1
 80036b8:	601a      	str	r2, [r3, #0]
 80036ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f383 8810 	msr	PRIMASK, r3
}
 80036c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c6:	f3ef 8310 	mrs	r3, PRIMASK
 80036ca:	623b      	str	r3, [r7, #32]
  return(result);
 80036cc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ce:	633b      	str	r3, [r7, #48]	; 0x30
 80036d0:	2301      	movs	r3, #1
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	f383 8810 	msr	PRIMASK, r3
}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2101      	movs	r1, #1
 80036e8:	438a      	bics	r2, r1
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f2:	f383 8810 	msr	PRIMASK, r3
}
 80036f6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d118      	bne.n	8003732 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003700:	f3ef 8310 	mrs	r3, PRIMASK
 8003704:	60bb      	str	r3, [r7, #8]
  return(result);
 8003706:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800370a:	2301      	movs	r3, #1
 800370c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f383 8810 	msr	PRIMASK, r3
}
 8003714:	46c0      	nop			; (mov r8, r8)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2110      	movs	r1, #16
 8003722:	438a      	bics	r2, r1
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003728:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f383 8810 	msr	PRIMASK, r3
}
 8003730:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2280      	movs	r2, #128	; 0x80
 8003736:	2120      	movs	r1, #32
 8003738:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	46bd      	mov	sp, r7
 800374a:	b00e      	add	sp, #56	; 0x38
 800374c:	bd80      	pop	{r7, pc}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	fffffedf 	.word	0xfffffedf

08003754 <memset>:
 8003754:	0003      	movs	r3, r0
 8003756:	1882      	adds	r2, r0, r2
 8003758:	4293      	cmp	r3, r2
 800375a:	d100      	bne.n	800375e <memset+0xa>
 800375c:	4770      	bx	lr
 800375e:	7019      	strb	r1, [r3, #0]
 8003760:	3301      	adds	r3, #1
 8003762:	e7f9      	b.n	8003758 <memset+0x4>

08003764 <__libc_init_array>:
 8003764:	b570      	push	{r4, r5, r6, lr}
 8003766:	2600      	movs	r6, #0
 8003768:	4c0c      	ldr	r4, [pc, #48]	; (800379c <__libc_init_array+0x38>)
 800376a:	4d0d      	ldr	r5, [pc, #52]	; (80037a0 <__libc_init_array+0x3c>)
 800376c:	1b64      	subs	r4, r4, r5
 800376e:	10a4      	asrs	r4, r4, #2
 8003770:	42a6      	cmp	r6, r4
 8003772:	d109      	bne.n	8003788 <__libc_init_array+0x24>
 8003774:	2600      	movs	r6, #0
 8003776:	f000 f819 	bl	80037ac <_init>
 800377a:	4c0a      	ldr	r4, [pc, #40]	; (80037a4 <__libc_init_array+0x40>)
 800377c:	4d0a      	ldr	r5, [pc, #40]	; (80037a8 <__libc_init_array+0x44>)
 800377e:	1b64      	subs	r4, r4, r5
 8003780:	10a4      	asrs	r4, r4, #2
 8003782:	42a6      	cmp	r6, r4
 8003784:	d105      	bne.n	8003792 <__libc_init_array+0x2e>
 8003786:	bd70      	pop	{r4, r5, r6, pc}
 8003788:	00b3      	lsls	r3, r6, #2
 800378a:	58eb      	ldr	r3, [r5, r3]
 800378c:	4798      	blx	r3
 800378e:	3601      	adds	r6, #1
 8003790:	e7ee      	b.n	8003770 <__libc_init_array+0xc>
 8003792:	00b3      	lsls	r3, r6, #2
 8003794:	58eb      	ldr	r3, [r5, r3]
 8003796:	4798      	blx	r3
 8003798:	3601      	adds	r6, #1
 800379a:	e7f2      	b.n	8003782 <__libc_init_array+0x1e>
 800379c:	08003810 	.word	0x08003810
 80037a0:	08003810 	.word	0x08003810
 80037a4:	08003814 	.word	0x08003814
 80037a8:	08003810 	.word	0x08003810

080037ac <_init>:
 80037ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037b2:	bc08      	pop	{r3}
 80037b4:	469e      	mov	lr, r3
 80037b6:	4770      	bx	lr

080037b8 <_fini>:
 80037b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037be:	bc08      	pop	{r3}
 80037c0:	469e      	mov	lr, r3
 80037c2:	4770      	bx	lr
